// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/game/cookie/api/grpc/cookie.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetCookieReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCookieReq) Reset()         { *m = GetCookieReq{} }
func (m *GetCookieReq) String() string { return proto.CompactTextString(m) }
func (*GetCookieReq) ProtoMessage()    {}
func (*GetCookieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_95601467e3a2afaa, []int{0}
}
func (m *GetCookieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCookieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCookieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCookieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCookieReq.Merge(m, src)
}
func (m *GetCookieReq) XXX_Size() int {
	return m.Size()
}
func (m *GetCookieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCookieReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetCookieReq proto.InternalMessageInfo

func (m *GetCookieReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetCookieReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type GetCookieResp struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Exist                bool     `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCookieResp) Reset()         { *m = GetCookieResp{} }
func (m *GetCookieResp) String() string { return proto.CompactTextString(m) }
func (*GetCookieResp) ProtoMessage()    {}
func (*GetCookieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_95601467e3a2afaa, []int{1}
}
func (m *GetCookieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCookieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCookieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCookieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCookieResp.Merge(m, src)
}
func (m *GetCookieResp) XXX_Size() int {
	return m.Size()
}
func (m *GetCookieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCookieResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetCookieResp proto.InternalMessageInfo

func (m *GetCookieResp) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *GetCookieResp) GetExist() bool {
	if m != nil {
		return m.Exist
	}
	return false
}

type GetAllCookieReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetAllCookieReq) Reset()         { *m = GetAllCookieReq{} }
func (m *GetAllCookieReq) String() string { return proto.CompactTextString(m) }
func (*GetAllCookieReq) ProtoMessage()    {}
func (*GetAllCookieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_95601467e3a2afaa, []int{2}
}
func (m *GetAllCookieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCookieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCookieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCookieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCookieReq.Merge(m, src)
}
func (m *GetAllCookieReq) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCookieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCookieReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCookieReq proto.InternalMessageInfo

func (m *GetAllCookieReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetAllCookieResp struct {
	Cookie               map[string]string `protobuf:"bytes,1,rep,name=cookie,proto3" json:"cookie,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetAllCookieResp) Reset()         { *m = GetAllCookieResp{} }
func (m *GetAllCookieResp) String() string { return proto.CompactTextString(m) }
func (*GetAllCookieResp) ProtoMessage()    {}
func (*GetAllCookieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_95601467e3a2afaa, []int{3}
}
func (m *GetAllCookieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllCookieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllCookieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAllCookieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllCookieResp.Merge(m, src)
}
func (m *GetAllCookieResp) XXX_Size() int {
	return m.Size()
}
func (m *GetAllCookieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllCookieResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllCookieResp proto.InternalMessageInfo

func (m *GetAllCookieResp) GetCookie() map[string]string {
	if m != nil {
		return m.Cookie
	}
	return nil
}

type SetCookieReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetCookieReq) Reset()         { *m = SetCookieReq{} }
func (m *SetCookieReq) String() string { return proto.CompactTextString(m) }
func (*SetCookieReq) ProtoMessage()    {}
func (*SetCookieReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_95601467e3a2afaa, []int{4}
}
func (m *SetCookieReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCookieReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCookieReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCookieReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCookieReq.Merge(m, src)
}
func (m *SetCookieReq) XXX_Size() int {
	return m.Size()
}
func (m *SetCookieReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCookieReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetCookieReq proto.InternalMessageInfo

func (m *SetCookieReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SetCookieReq) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SetCookieReq) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type SetCookieResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetCookieResp) Reset()         { *m = SetCookieResp{} }
func (m *SetCookieResp) String() string { return proto.CompactTextString(m) }
func (*SetCookieResp) ProtoMessage()    {}
func (*SetCookieResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_95601467e3a2afaa, []int{5}
}
func (m *SetCookieResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetCookieResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetCookieResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetCookieResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetCookieResp.Merge(m, src)
}
func (m *SetCookieResp) XXX_Size() int {
	return m.Size()
}
func (m *SetCookieResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetCookieResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetCookieResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetCookieReq)(nil), "ncs.game.cookie.GetCookieReq")
	proto.RegisterType((*GetCookieResp)(nil), "ncs.game.cookie.GetCookieResp")
	proto.RegisterType((*GetAllCookieReq)(nil), "ncs.game.cookie.GetAllCookieReq")
	proto.RegisterType((*GetAllCookieResp)(nil), "ncs.game.cookie.GetAllCookieResp")
	proto.RegisterMapType((map[string]string)(nil), "ncs.game.cookie.GetAllCookieResp.CookieEntry")
	proto.RegisterType((*SetCookieReq)(nil), "ncs.game.cookie.SetCookieReq")
	proto.RegisterType((*SetCookieResp)(nil), "ncs.game.cookie.SetCookieResp")
}

func init() {
	proto.RegisterFile("app/game/cookie/api/grpc/cookie.proto", fileDescriptor_95601467e3a2afaa)
}

var fileDescriptor_95601467e3a2afaa = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xed, 0x4a, 0xad, 0xa9, 0xd6, 0x36, 0x36, 0x4b, 0x6b, 0x84, 0xea, 0x0a, 0x75, 0xdb, 0x82,
	0x29, 0x54, 0x02, 0xf7, 0xd2, 0x38, 0xa7, 0x24, 0x18, 0xe7, 0x2c, 0xdd, 0x72, 0x53, 0xec, 0x45,
	0x08, 0x2b, 0xda, 0xb5, 0x77, 0x1d, 0x62, 0x8c, 0x2f, 0xf9, 0x85, 0xe4, 0x90, 0x4f, 0xca, 0x31,
	0x90, 0x4b, 0x8e, 0xc1, 0xc9, 0x87, 0x04, 0x69, 0x1d, 0x59, 0x32, 0x41, 0x26, 0xb7, 0x99, 0xd1,
	0x7b, 0xfb, 0xf4, 0x1e, 0x33, 0xf0, 0xb7, 0xcf, 0x98, 0x13, 0xf8, 0x67, 0xc4, 0x19, 0x52, 0x3a,
	0x0e, 0x89, 0xe3, 0xb3, 0xd0, 0x09, 0xa6, 0x6c, 0xb8, 0xee, 0x6d, 0x36, 0xa5, 0x82, 0xa2, 0x46,
	0x3c, 0xe4, 0x76, 0x02, 0xb3, 0xe5, 0xd8, 0x68, 0x07, 0x94, 0x06, 0x91, 0x84, 0xfb, 0x71, 0x4c,
	0x85, 0x2f, 0x42, 0x1a, 0x73, 0x09, 0xc7, 0x5d, 0x58, 0x1b, 0x10, 0x71, 0x94, 0x42, 0x5d, 0x32,
	0x41, 0x4d, 0xa8, 0xce, 0xc2, 0x91, 0x0e, 0x2c, 0xd0, 0x51, 0xdd, 0xa4, 0x4c, 0x26, 0x63, 0x32,
	0xd7, 0x15, 0x0b, 0x74, 0x34, 0x37, 0x29, 0xf1, 0x3e, 0xac, 0xe7, 0x38, 0x9c, 0xa1, 0x2f, 0xf0,
	0xd3, 0xb9, 0x1f, 0xcd, 0x48, 0x4a, 0xd3, 0x5c, 0xd9, 0x24, 0x53, 0x72, 0x11, 0x72, 0x91, 0x52,
	0x3f, 0xbb, 0xb2, 0xc1, 0x3f, 0x61, 0x63, 0x40, 0xc4, 0x41, 0x14, 0x95, 0x68, 0xe2, 0x6b, 0x00,
	0x9b, 0x45, 0x14, 0x67, 0xa8, 0x0f, 0x2b, 0xd2, 0x92, 0x0e, 0x2c, 0xb5, 0x53, 0xed, 0xfe, 0xb5,
	0xb7, 0xac, 0xda, 0xdb, 0x14, 0x5b, 0x96, 0xfd, 0x58, 0x4c, 0xe7, 0xee, 0x9a, 0x6c, 0xec, 0xc1,
	0x6a, 0x6e, 0xfc, 0x6a, 0x0f, 0x64, 0xf6, 0x36, 0x6e, 0x94, 0x9c, 0x9b, 0x9e, 0xf2, 0x1f, 0xe0,
	0x63, 0x58, 0xf3, 0xde, 0x19, 0xd6, 0xe6, 0x35, 0x35, 0xf7, 0x1a, 0x6e, 0xc0, 0xba, 0x97, 0x8f,
	0xb0, 0xfb, 0xa0, 0xc0, 0x8a, 0x6c, 0x11, 0x83, 0x5a, 0x16, 0x2f, 0xfa, 0xfe, 0x96, 0xc9, 0xec,
	0x0f, 0x0c, 0xb3, 0xec, 0x33, 0x67, 0xf8, 0xd7, 0xe5, 0xfd, 0xf3, 0x95, 0x62, 0xa2, 0x76, 0x61,
	0x73, 0x02, 0x22, 0x9c, 0xc5, 0x2c, 0x1c, 0x2d, 0x9d, 0xc5, 0x98, 0xcc, 0x97, 0x88, 0xa7, 0x4b,
	0x90, 0x45, 0x87, 0xac, 0x1d, 0xc9, 0x4e, 0x8c, 0x1f, 0x3b, 0xb3, 0xc7, 0x66, 0x2a, 0xad, 0xa3,
	0x56, 0x71, 0x69, 0xa3, 0x48, 0x4a, 0xa3, 0x00, 0x6a, 0x5e, 0x89, 0x4d, 0xaf, 0xdc, 0x66, 0x21,
	0x3d, 0xfc, 0x2d, 0xd5, 0xfa, 0x8a, 0x9b, 0x05, 0x2d, 0x4e, 0x44, 0x0f, 0xfc, 0x39, 0x6c, 0xdd,
	0xae, 0x4c, 0x70, 0xb7, 0x32, 0xc1, 0xe3, 0xca, 0x04, 0x37, 0x4f, 0xe6, 0x87, 0x93, 0x8f, 0xc9,
	0xd9, 0x9c, 0x56, 0xd2, 0x0b, 0xf8, 0xf7, 0x12, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x60, 0xd5, 0x0b,
	0x59, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CookieClient is the client API for Cookie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CookieClient interface {
	GetCookie(ctx context.Context, in *GetCookieReq, opts ...grpc.CallOption) (*GetCookieResp, error)
	GetAllCookie(ctx context.Context, in *GetAllCookieReq, opts ...grpc.CallOption) (*GetAllCookieResp, error)
	SetCookie(ctx context.Context, in *SetCookieReq, opts ...grpc.CallOption) (*SetCookieResp, error)
}

type cookieClient struct {
	cc *grpc.ClientConn
}

func NewCookieClient(cc *grpc.ClientConn) CookieClient {
	return &cookieClient{cc}
}

func (c *cookieClient) GetCookie(ctx context.Context, in *GetCookieReq, opts ...grpc.CallOption) (*GetCookieResp, error) {
	out := new(GetCookieResp)
	err := c.cc.Invoke(ctx, "/ncs.game.cookie.Cookie/GetCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieClient) GetAllCookie(ctx context.Context, in *GetAllCookieReq, opts ...grpc.CallOption) (*GetAllCookieResp, error) {
	out := new(GetAllCookieResp)
	err := c.cc.Invoke(ctx, "/ncs.game.cookie.Cookie/GetAllCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieClient) SetCookie(ctx context.Context, in *SetCookieReq, opts ...grpc.CallOption) (*SetCookieResp, error) {
	out := new(SetCookieResp)
	err := c.cc.Invoke(ctx, "/ncs.game.cookie.Cookie/SetCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookieServer is the server API for Cookie service.
type CookieServer interface {
	GetCookie(context.Context, *GetCookieReq) (*GetCookieResp, error)
	GetAllCookie(context.Context, *GetAllCookieReq) (*GetAllCookieResp, error)
	SetCookie(context.Context, *SetCookieReq) (*SetCookieResp, error)
}

// UnimplementedCookieServer can be embedded to have forward compatible implementations.
type UnimplementedCookieServer struct {
}

func (*UnimplementedCookieServer) GetCookie(ctx context.Context, req *GetCookieReq) (*GetCookieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookie not implemented")
}
func (*UnimplementedCookieServer) GetAllCookie(ctx context.Context, req *GetAllCookieReq) (*GetAllCookieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCookie not implemented")
}
func (*UnimplementedCookieServer) SetCookie(ctx context.Context, req *SetCookieReq) (*SetCookieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCookie not implemented")
}

func RegisterCookieServer(s *grpc.Server, srv CookieServer) {
	s.RegisterService(&_Cookie_serviceDesc, srv)
}

func _Cookie_GetCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServer).GetCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.cookie.Cookie/GetCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServer).GetCookie(ctx, req.(*GetCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookie_GetAllCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServer).GetAllCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.cookie.Cookie/GetAllCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServer).GetAllCookie(ctx, req.(*GetAllCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookie_SetCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServer).SetCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.cookie.Cookie/SetCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServer).SetCookie(ctx, req.(*SetCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cookie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.cookie.Cookie",
	HandlerType: (*CookieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCookie",
			Handler:    _Cookie_GetCookie_Handler,
		},
		{
			MethodName: "GetAllCookie",
			Handler:    _Cookie_GetAllCookie_Handler,
		},
		{
			MethodName: "SetCookie",
			Handler:    _Cookie_SetCookie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/cookie/api/grpc/cookie.proto",
}

func (m *GetCookieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCookieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCookieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCookie(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintCookie(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCookieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCookieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCookieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Exist {
		i--
		if m.Exist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCookie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAllCookieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCookieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCookieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintCookie(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetAllCookieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllCookieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAllCookieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cookie) > 0 {
		for k := range m.Cookie {
			v := m.Cookie[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCookie(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCookie(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCookie(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetCookieReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCookieReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCookieReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintCookie(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintCookie(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	if m.Uid != 0 {
		i = encodeVarintCookie(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetCookieResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetCookieResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetCookieResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintCookie(dAtA []byte, offset int, v uint64) int {
	offset -= sovCookie(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetCookieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCookie(uint64(m.Uid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCookie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCookieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCookie(uint64(l))
	}
	if m.Exist {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllCookieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCookie(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllCookieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cookie) > 0 {
		for k, v := range m.Cookie {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCookie(uint64(len(k))) + 1 + len(v) + sovCookie(uint64(len(v)))
			n += mapEntrySize + 1 + sovCookie(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetCookieReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovCookie(uint64(m.Uid))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovCookie(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovCookie(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetCookieResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCookie(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCookie(x uint64) (n int) {
	return sovCookie(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetCookieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCookieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCookieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCookie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCookie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCookie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCookieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCookieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCookieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCookie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCookie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exist = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCookie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCookieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCookieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCookieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCookie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllCookieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllCookieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllCookieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cookie", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCookie
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCookie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cookie == nil {
				m.Cookie = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCookie
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCookie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCookie
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCookie
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCookie
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCookie
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCookie
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCookie(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCookie
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Cookie[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCookie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCookieReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCookieReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCookieReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCookie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCookie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCookie
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCookie
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCookie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetCookieResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetCookieResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetCookieResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCookie(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCookie
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCookie(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCookie
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCookie
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCookie
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCookie
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCookie
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCookie        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCookie          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCookie = fmt.Errorf("proto: unexpected end of group")
)
