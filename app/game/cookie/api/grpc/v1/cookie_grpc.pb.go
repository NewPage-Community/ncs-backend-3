// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CookieClient is the client API for Cookie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CookieClient interface {
	GetCookie(ctx context.Context, in *GetCookieReq, opts ...grpc.CallOption) (*GetCookieResp, error)
	GetAllCookie(ctx context.Context, in *GetAllCookieReq, opts ...grpc.CallOption) (*GetAllCookieResp, error)
	SetCookie(ctx context.Context, in *SetCookieReq, opts ...grpc.CallOption) (*SetCookieResp, error)
}

type cookieClient struct {
	cc grpc.ClientConnInterface
}

func NewCookieClient(cc grpc.ClientConnInterface) CookieClient {
	return &cookieClient{cc}
}

func (c *cookieClient) GetCookie(ctx context.Context, in *GetCookieReq, opts ...grpc.CallOption) (*GetCookieResp, error) {
	out := new(GetCookieResp)
	err := c.cc.Invoke(ctx, "/ncs.game.cookie.v1.Cookie/GetCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieClient) GetAllCookie(ctx context.Context, in *GetAllCookieReq, opts ...grpc.CallOption) (*GetAllCookieResp, error) {
	out := new(GetAllCookieResp)
	err := c.cc.Invoke(ctx, "/ncs.game.cookie.v1.Cookie/GetAllCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cookieClient) SetCookie(ctx context.Context, in *SetCookieReq, opts ...grpc.CallOption) (*SetCookieResp, error) {
	out := new(SetCookieResp)
	err := c.cc.Invoke(ctx, "/ncs.game.cookie.v1.Cookie/SetCookie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CookieServer is the server API for Cookie service.
// All implementations must embed UnimplementedCookieServer
// for forward compatibility
type CookieServer interface {
	GetCookie(context.Context, *GetCookieReq) (*GetCookieResp, error)
	GetAllCookie(context.Context, *GetAllCookieReq) (*GetAllCookieResp, error)
	SetCookie(context.Context, *SetCookieReq) (*SetCookieResp, error)
	mustEmbedUnimplementedCookieServer()
}

// UnimplementedCookieServer must be embedded to have forward compatible implementations.
type UnimplementedCookieServer struct {
}

func (UnimplementedCookieServer) GetCookie(context.Context, *GetCookieReq) (*GetCookieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCookie not implemented")
}
func (UnimplementedCookieServer) GetAllCookie(context.Context, *GetAllCookieReq) (*GetAllCookieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCookie not implemented")
}
func (UnimplementedCookieServer) SetCookie(context.Context, *SetCookieReq) (*SetCookieResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCookie not implemented")
}
func (UnimplementedCookieServer) mustEmbedUnimplementedCookieServer() {}

// UnsafeCookieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CookieServer will
// result in compilation errors.
type UnsafeCookieServer interface {
	mustEmbedUnimplementedCookieServer()
}

func RegisterCookieServer(s grpc.ServiceRegistrar, srv CookieServer) {
	s.RegisterService(&Cookie_ServiceDesc, srv)
}

func _Cookie_GetCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServer).GetCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.cookie.v1.Cookie/GetCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServer).GetCookie(ctx, req.(*GetCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookie_GetAllCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServer).GetAllCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.cookie.v1.Cookie/GetAllCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServer).GetAllCookie(ctx, req.(*GetAllCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cookie_SetCookie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCookieReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CookieServer).SetCookie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.cookie.v1.Cookie/SetCookie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CookieServer).SetCookie(ctx, req.(*SetCookieReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Cookie_ServiceDesc is the grpc.ServiceDesc for Cookie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cookie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.cookie.v1.Cookie",
	HandlerType: (*CookieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCookie",
			Handler:    _Cookie_GetCookie_Handler,
		},
		{
			MethodName: "GetAllCookie",
			Handler:    _Cookie_GetAllCookie_Handler,
		},
		{
			MethodName: "SetCookie",
			Handler:    _Cookie_SetCookie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/cookie/api/grpc/v1/cookie.proto",
}
