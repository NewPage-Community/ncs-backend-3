// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/chat/api/grpc/chat.pb.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockChatClient is a mock of ChatClient interface
type MockChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatClientMockRecorder
}

// MockChatClientMockRecorder is the mock recorder for MockChatClient
type MockChatClientMockRecorder struct {
	mock *MockChatClient
}

// NewMockChatClient creates a new mock instance
func NewMockChatClient(ctrl *gomock.Controller) *MockChatClient {
	mock := &MockChatClient{ctrl: ctrl}
	mock.recorder = &MockChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatClient) EXPECT() *MockChatClientMockRecorder {
	return m.recorder
}

// AllChat mocks base method
func (m *MockChatClient) AllChat(ctx context.Context, in *AllChatReq, opts ...grpc.CallOption) (*AllChatResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllChat", varargs...)
	ret0, _ := ret[0].(*AllChatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllChat indicates an expected call of AllChat
func (mr *MockChatClientMockRecorder) AllChat(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllChat", reflect.TypeOf((*MockChatClient)(nil).AllChat), varargs...)
}

// ChatNotify mocks base method
func (m *MockChatClient) ChatNotify(ctx context.Context, in *ChatNotifyReq, opts ...grpc.CallOption) (*ChatNotifyResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChatNotify", varargs...)
	ret0, _ := ret[0].(*ChatNotifyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatNotify indicates an expected call of ChatNotify
func (mr *MockChatClientMockRecorder) ChatNotify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatNotify", reflect.TypeOf((*MockChatClient)(nil).ChatNotify), varargs...)
}

// MockChatServer is a mock of ChatServer interface
type MockChatServer struct {
	ctrl     *gomock.Controller
	recorder *MockChatServerMockRecorder
}

// MockChatServerMockRecorder is the mock recorder for MockChatServer
type MockChatServerMockRecorder struct {
	mock *MockChatServer
}

// NewMockChatServer creates a new mock instance
func NewMockChatServer(ctrl *gomock.Controller) *MockChatServer {
	mock := &MockChatServer{ctrl: ctrl}
	mock.recorder = &MockChatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChatServer) EXPECT() *MockChatServerMockRecorder {
	return m.recorder
}

// AllChat mocks base method
func (m *MockChatServer) AllChat(arg0 context.Context, arg1 *AllChatReq) (*AllChatResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllChat", arg0, arg1)
	ret0, _ := ret[0].(*AllChatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllChat indicates an expected call of AllChat
func (mr *MockChatServerMockRecorder) AllChat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllChat", reflect.TypeOf((*MockChatServer)(nil).AllChat), arg0, arg1)
}

// ChatNotify mocks base method
func (m *MockChatServer) ChatNotify(arg0 context.Context, arg1 *ChatNotifyReq) (*ChatNotifyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatNotify", arg0, arg1)
	ret0, _ := ret[0].(*ChatNotifyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatNotify indicates an expected call of ChatNotify
func (mr *MockChatServerMockRecorder) ChatNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatNotify", reflect.TypeOf((*MockChatServer)(nil).ChatNotify), arg0, arg1)
}
