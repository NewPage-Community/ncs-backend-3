// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/chat/dao/dao.go

// Package dao is a generated GoMock package.
package dao

import (
	event "backend/app/game/chat/event"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDao) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDaoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDao)(nil).Close))
}

// CreateAllChatEvent mocks base method.
func (m *MockDao) CreateAllChatEvent(ctx context.Context, data *event.AllChatEventData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAllChatEvent", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAllChatEvent indicates an expected call of CreateAllChatEvent.
func (mr *MockDaoMockRecorder) CreateAllChatEvent(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAllChatEvent", reflect.TypeOf((*MockDao)(nil).CreateAllChatEvent), ctx, data)
}

// Healthy mocks base method.
func (m *MockDao) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockDaoMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockDao)(nil).Healthy))
}

// ListenAllChatEvent mocks base method.
func (m *MockDao) ListenAllChatEvent(cb event.AllChatCallback) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenAllChatEvent", cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListenAllChatEvent indicates an expected call of ListenAllChatEvent.
func (mr *MockDaoMockRecorder) ListenAllChatEvent(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenAllChatEvent", reflect.TypeOf((*MockDao)(nil).ListenAllChatEvent), cb)
}
