// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/server/api/grpc/v1/public_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockServerPublicClient is a mock of ServerPublicClient interface.
type MockServerPublicClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerPublicClientMockRecorder
}

// MockServerPublicClientMockRecorder is the mock recorder for MockServerPublicClient.
type MockServerPublicClientMockRecorder struct {
	mock *MockServerPublicClient
}

// NewMockServerPublicClient creates a new mock instance.
func NewMockServerPublicClient(ctrl *gomock.Controller) *MockServerPublicClient {
	mock := &MockServerPublicClient{ctrl: ctrl}
	mock.recorder = &MockServerPublicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerPublicClient) EXPECT() *MockServerPublicClientMockRecorder {
	return m.recorder
}

// AllInfo mocks base method.
func (m *MockServerPublicClient) AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllInfo", varargs...)
	ret0, _ := ret[0].(*AllInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInfo indicates an expected call of AllInfo.
func (mr *MockServerPublicClientMockRecorder) AllInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInfo", reflect.TypeOf((*MockServerPublicClient)(nil).AllInfo), varargs...)
}

// Info mocks base method.
func (m *MockServerPublicClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockServerPublicClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServerPublicClient)(nil).Info), varargs...)
}

// MockServerPublicServer is a mock of ServerPublicServer interface.
type MockServerPublicServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerPublicServerMockRecorder
}

// MockServerPublicServerMockRecorder is the mock recorder for MockServerPublicServer.
type MockServerPublicServerMockRecorder struct {
	mock *MockServerPublicServer
}

// NewMockServerPublicServer creates a new mock instance.
func NewMockServerPublicServer(ctrl *gomock.Controller) *MockServerPublicServer {
	mock := &MockServerPublicServer{ctrl: ctrl}
	mock.recorder = &MockServerPublicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerPublicServer) EXPECT() *MockServerPublicServerMockRecorder {
	return m.recorder
}

// AllInfo mocks base method.
func (m *MockServerPublicServer) AllInfo(arg0 context.Context, arg1 *AllInfoReq) (*AllInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInfo", arg0, arg1)
	ret0, _ := ret[0].(*AllInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInfo indicates an expected call of AllInfo.
func (mr *MockServerPublicServerMockRecorder) AllInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInfo", reflect.TypeOf((*MockServerPublicServer)(nil).AllInfo), arg0, arg1)
}

// Info mocks base method.
func (m *MockServerPublicServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockServerPublicServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServerPublicServer)(nil).Info), arg0, arg1)
}

// mustEmbedUnimplementedServerPublicServer mocks base method.
func (m *MockServerPublicServer) mustEmbedUnimplementedServerPublicServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServerPublicServer")
}

// mustEmbedUnimplementedServerPublicServer indicates an expected call of mustEmbedUnimplementedServerPublicServer.
func (mr *MockServerPublicServerMockRecorder) mustEmbedUnimplementedServerPublicServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServerPublicServer", reflect.TypeOf((*MockServerPublicServer)(nil).mustEmbedUnimplementedServerPublicServer))
}

// MockUnsafeServerPublicServer is a mock of UnsafeServerPublicServer interface.
type MockUnsafeServerPublicServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeServerPublicServerMockRecorder
}

// MockUnsafeServerPublicServerMockRecorder is the mock recorder for MockUnsafeServerPublicServer.
type MockUnsafeServerPublicServerMockRecorder struct {
	mock *MockUnsafeServerPublicServer
}

// NewMockUnsafeServerPublicServer creates a new mock instance.
func NewMockUnsafeServerPublicServer(ctrl *gomock.Controller) *MockUnsafeServerPublicServer {
	mock := &MockUnsafeServerPublicServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeServerPublicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeServerPublicServer) EXPECT() *MockUnsafeServerPublicServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedServerPublicServer mocks base method.
func (m *MockUnsafeServerPublicServer) mustEmbedUnimplementedServerPublicServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedServerPublicServer")
}

// mustEmbedUnimplementedServerPublicServer indicates an expected call of mustEmbedUnimplementedServerPublicServer.
func (mr *MockUnsafeServerPublicServerMockRecorder) mustEmbedUnimplementedServerPublicServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedServerPublicServer", reflect.TypeOf((*MockUnsafeServerPublicServer)(nil).mustEmbedUnimplementedServerPublicServer))
}
