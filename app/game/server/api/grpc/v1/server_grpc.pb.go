// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error)
	Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error)
	Rcon(ctx context.Context, in *RconReq, opts ...grpc.CallOption) (*RconResp, error)
	RconAll(ctx context.Context, in *RconAllReq, opts ...grpc.CallOption) (*RconAllResp, error)
	ChangeMapNotify(ctx context.Context, in *ChangeMapNotifyReq, opts ...grpc.CallOption) (*ChangeMapNotifyResp, error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Server/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error) {
	out := new(AllInfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Server/AllInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error) {
	out := new(InitResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Server/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) Rcon(ctx context.Context, in *RconReq, opts ...grpc.CallOption) (*RconResp, error) {
	out := new(RconResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Server/Rcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) RconAll(ctx context.Context, in *RconAllReq, opts ...grpc.CallOption) (*RconAllResp, error) {
	out := new(RconAllResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Server/RconAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) ChangeMapNotify(ctx context.Context, in *ChangeMapNotifyReq, opts ...grpc.CallOption) (*ChangeMapNotifyResp, error) {
	out := new(ChangeMapNotifyResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Server/ChangeMapNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility
type ServerServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	AllInfo(context.Context, *AllInfoReq) (*AllInfoResp, error)
	Init(context.Context, *InitReq) (*InitResp, error)
	Rcon(context.Context, *RconReq) (*RconResp, error)
	RconAll(context.Context, *RconAllReq) (*RconAllResp, error)
	ChangeMapNotify(context.Context, *ChangeMapNotifyReq) (*ChangeMapNotifyResp, error)
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have forward compatible implementations.
type UnimplementedServerServer struct {
}

func (UnimplementedServerServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedServerServer) AllInfo(context.Context, *AllInfoReq) (*AllInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllInfo not implemented")
}
func (UnimplementedServerServer) Init(context.Context, *InitReq) (*InitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedServerServer) Rcon(context.Context, *RconReq) (*RconResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rcon not implemented")
}
func (UnimplementedServerServer) RconAll(context.Context, *RconAllReq) (*RconAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RconAll not implemented")
}
func (UnimplementedServerServer) ChangeMapNotify(context.Context, *ChangeMapNotifyReq) (*ChangeMapNotifyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMapNotify not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Server/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_AllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).AllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Server/AllInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).AllInfo(ctx, req.(*AllInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Server/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Init(ctx, req.(*InitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Rcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RconReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Rcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Server/Rcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Rcon(ctx, req.(*RconReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_RconAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RconAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).RconAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Server/RconAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).RconAll(ctx, req.(*RconAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_ChangeMapNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMapNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).ChangeMapNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Server/ChangeMapNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).ChangeMapNotify(ctx, req.(*ChangeMapNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.server.v1.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Server_Info_Handler,
		},
		{
			MethodName: "AllInfo",
			Handler:    _Server_AllInfo_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Server_Init_Handler,
		},
		{
			MethodName: "Rcon",
			Handler:    _Server_Rcon_Handler,
		},
		{
			MethodName: "RconAll",
			Handler:    _Server_RconAll_Handler,
		},
		{
			MethodName: "ChangeMapNotify",
			Handler:    _Server_ChangeMapNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/server/api/grpc/v1/server.proto",
}

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Web/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error) {
	out := new(AllInfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.Web/AllInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
// All implementations must embed UnimplementedWebServer
// for forward compatibility
type WebServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	AllInfo(context.Context, *AllInfoReq) (*AllInfoResp, error)
	mustEmbedUnimplementedWebServer()
}

// UnimplementedWebServer must be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (UnimplementedWebServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedWebServer) AllInfo(context.Context, *AllInfoReq) (*AllInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllInfo not implemented")
}
func (UnimplementedWebServer) mustEmbedUnimplementedWebServer() {}

// UnsafeWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServer will
// result in compilation errors.
type UnsafeWebServer interface {
	mustEmbedUnimplementedWebServer()
}

func RegisterWebServer(s grpc.ServiceRegistrar, srv WebServer) {
	s.RegisterService(&Web_ServiceDesc, srv)
}

func _Web_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Web/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_AllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).AllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.Web/AllInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).AllInfo(ctx, req.(*AllInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Web_ServiceDesc is the grpc.ServiceDesc for Web service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.server.v1.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Web_Info_Handler,
		},
		{
			MethodName: "AllInfo",
			Handler:    _Web_AllInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/server/api/grpc/v1/server.proto",
}
