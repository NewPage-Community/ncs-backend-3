// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerPublicClient is the client API for ServerPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerPublicClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error)
}

type serverPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewServerPublicClient(cc grpc.ClientConnInterface) ServerPublicClient {
	return &serverPublicClient{cc}
}

func (c *serverPublicClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.ServerPublic/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverPublicClient) AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error) {
	out := new(AllInfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.server.v1.ServerPublic/AllInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerPublicServer is the server API for ServerPublic service.
// All implementations must embed UnimplementedServerPublicServer
// for forward compatibility
type ServerPublicServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	AllInfo(context.Context, *AllInfoReq) (*AllInfoResp, error)
	mustEmbedUnimplementedServerPublicServer()
}

// UnimplementedServerPublicServer must be embedded to have forward compatible implementations.
type UnimplementedServerPublicServer struct {
}

func (UnimplementedServerPublicServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedServerPublicServer) AllInfo(context.Context, *AllInfoReq) (*AllInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllInfo not implemented")
}
func (UnimplementedServerPublicServer) mustEmbedUnimplementedServerPublicServer() {}

// UnsafeServerPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerPublicServer will
// result in compilation errors.
type UnsafeServerPublicServer interface {
	mustEmbedUnimplementedServerPublicServer()
}

func RegisterServerPublicServer(s grpc.ServiceRegistrar, srv ServerPublicServer) {
	s.RegisterService(&ServerPublic_ServiceDesc, srv)
}

func _ServerPublic_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerPublicServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.ServerPublic/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerPublicServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerPublic_AllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerPublicServer).AllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.server.v1.ServerPublic/AllInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerPublicServer).AllInfo(ctx, req.(*AllInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerPublic_ServiceDesc is the grpc.ServiceDesc for ServerPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.server.v1.ServerPublic",
	HandlerType: (*ServerPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ServerPublic_Info_Handler,
		},
		{
			MethodName: "AllInfo",
			Handler:    _ServerPublic_AllInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/server/api/grpc/v1/public.proto",
}
