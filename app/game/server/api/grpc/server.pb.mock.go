// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/server/api/grpc/server.pb.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockServerClient is a mock of ServerClient interface
type MockServerClient struct {
	ctrl     *gomock.Controller
	recorder *MockServerClientMockRecorder
}

// MockServerClientMockRecorder is the mock recorder for MockServerClient
type MockServerClientMockRecorder struct {
	mock *MockServerClient
}

// NewMockServerClient creates a new mock instance
func NewMockServerClient(ctrl *gomock.Controller) *MockServerClient {
	mock := &MockServerClient{ctrl: ctrl}
	mock.recorder = &MockServerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerClient) EXPECT() *MockServerClientMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockServerClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockServerClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServerClient)(nil).Info), varargs...)
}

// AllInfo mocks base method
func (m *MockServerClient) AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllInfo", varargs...)
	ret0, _ := ret[0].(*AllInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInfo indicates an expected call of AllInfo
func (mr *MockServerClientMockRecorder) AllInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInfo", reflect.TypeOf((*MockServerClient)(nil).AllInfo), varargs...)
}

// Init mocks base method
func (m *MockServerClient) Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Init", varargs...)
	ret0, _ := ret[0].(*InitResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockServerClientMockRecorder) Init(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServerClient)(nil).Init), varargs...)
}

// Rcon mocks base method
func (m *MockServerClient) Rcon(ctx context.Context, in *RconReq, opts ...grpc.CallOption) (*RconResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Rcon", varargs...)
	ret0, _ := ret[0].(*RconResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rcon indicates an expected call of Rcon
func (mr *MockServerClientMockRecorder) Rcon(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rcon", reflect.TypeOf((*MockServerClient)(nil).Rcon), varargs...)
}

// RconAll mocks base method
func (m *MockServerClient) RconAll(ctx context.Context, in *RconAllReq, opts ...grpc.CallOption) (*RconAllResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RconAll", varargs...)
	ret0, _ := ret[0].(*RconAllResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RconAll indicates an expected call of RconAll
func (mr *MockServerClientMockRecorder) RconAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RconAll", reflect.TypeOf((*MockServerClient)(nil).RconAll), varargs...)
}

// ChangeMapNotify mocks base method
func (m *MockServerClient) ChangeMapNotify(ctx context.Context, in *ChangeMapNotifyReq, opts ...grpc.CallOption) (*ChangeMapNotifyResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeMapNotify", varargs...)
	ret0, _ := ret[0].(*ChangeMapNotifyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMapNotify indicates an expected call of ChangeMapNotify
func (mr *MockServerClientMockRecorder) ChangeMapNotify(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMapNotify", reflect.TypeOf((*MockServerClient)(nil).ChangeMapNotify), varargs...)
}

// MockServerServer is a mock of ServerServer interface
type MockServerServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerServerMockRecorder
}

// MockServerServerMockRecorder is the mock recorder for MockServerServer
type MockServerServerMockRecorder struct {
	mock *MockServerServer
}

// NewMockServerServer creates a new mock instance
func NewMockServerServer(ctrl *gomock.Controller) *MockServerServer {
	mock := &MockServerServer{ctrl: ctrl}
	mock.recorder = &MockServerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerServer) EXPECT() *MockServerServerMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockServerServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockServerServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServerServer)(nil).Info), arg0, arg1)
}

// AllInfo mocks base method
func (m *MockServerServer) AllInfo(arg0 context.Context, arg1 *AllInfoReq) (*AllInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInfo", arg0, arg1)
	ret0, _ := ret[0].(*AllInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInfo indicates an expected call of AllInfo
func (mr *MockServerServerMockRecorder) AllInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInfo", reflect.TypeOf((*MockServerServer)(nil).AllInfo), arg0, arg1)
}

// Init mocks base method
func (m *MockServerServer) Init(arg0 context.Context, arg1 *InitReq) (*InitResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(*InitResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockServerServerMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockServerServer)(nil).Init), arg0, arg1)
}

// Rcon mocks base method
func (m *MockServerServer) Rcon(arg0 context.Context, arg1 *RconReq) (*RconResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rcon", arg0, arg1)
	ret0, _ := ret[0].(*RconResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rcon indicates an expected call of Rcon
func (mr *MockServerServerMockRecorder) Rcon(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rcon", reflect.TypeOf((*MockServerServer)(nil).Rcon), arg0, arg1)
}

// RconAll mocks base method
func (m *MockServerServer) RconAll(arg0 context.Context, arg1 *RconAllReq) (*RconAllResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RconAll", arg0, arg1)
	ret0, _ := ret[0].(*RconAllResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RconAll indicates an expected call of RconAll
func (mr *MockServerServerMockRecorder) RconAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RconAll", reflect.TypeOf((*MockServerServer)(nil).RconAll), arg0, arg1)
}

// ChangeMapNotify mocks base method
func (m *MockServerServer) ChangeMapNotify(arg0 context.Context, arg1 *ChangeMapNotifyReq) (*ChangeMapNotifyResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMapNotify", arg0, arg1)
	ret0, _ := ret[0].(*ChangeMapNotifyResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMapNotify indicates an expected call of ChangeMapNotify
func (mr *MockServerServerMockRecorder) ChangeMapNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMapNotify", reflect.TypeOf((*MockServerServer)(nil).ChangeMapNotify), arg0, arg1)
}

// MockWebClient is a mock of WebClient interface
type MockWebClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebClientMockRecorder
}

// MockWebClientMockRecorder is the mock recorder for MockWebClient
type MockWebClientMockRecorder struct {
	mock *MockWebClient
}

// NewMockWebClient creates a new mock instance
func NewMockWebClient(ctrl *gomock.Controller) *MockWebClient {
	mock := &MockWebClient{ctrl: ctrl}
	mock.recorder = &MockWebClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebClient) EXPECT() *MockWebClientMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockWebClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockWebClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWebClient)(nil).Info), varargs...)
}

// AllInfo mocks base method
func (m *MockWebClient) AllInfo(ctx context.Context, in *AllInfoReq, opts ...grpc.CallOption) (*AllInfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllInfo", varargs...)
	ret0, _ := ret[0].(*AllInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInfo indicates an expected call of AllInfo
func (mr *MockWebClientMockRecorder) AllInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInfo", reflect.TypeOf((*MockWebClient)(nil).AllInfo), varargs...)
}

// MockWebServer is a mock of WebServer interface
type MockWebServer struct {
	ctrl     *gomock.Controller
	recorder *MockWebServerMockRecorder
}

// MockWebServerMockRecorder is the mock recorder for MockWebServer
type MockWebServerMockRecorder struct {
	mock *MockWebServer
}

// NewMockWebServer creates a new mock instance
func NewMockWebServer(ctrl *gomock.Controller) *MockWebServer {
	mock := &MockWebServer{ctrl: ctrl}
	mock.recorder = &MockWebServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWebServer) EXPECT() *MockWebServerMockRecorder {
	return m.recorder
}

// Info mocks base method
func (m *MockWebServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info
func (mr *MockWebServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWebServer)(nil).Info), arg0, arg1)
}

// AllInfo mocks base method
func (m *MockWebServer) AllInfo(arg0 context.Context, arg1 *AllInfoReq) (*AllInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllInfo", arg0, arg1)
	ret0, _ := ret[0].(*AllInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllInfo indicates an expected call of AllInfo
func (mr *MockWebServerMockRecorder) AllInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllInfo", reflect.TypeOf((*MockWebServer)(nil).AllInfo), arg0, arg1)
}
