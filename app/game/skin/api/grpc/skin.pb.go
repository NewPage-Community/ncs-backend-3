// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/game/skin/api/grpc/skin.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SkinInfo struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	SkinPath             string   `protobuf:"bytes,4,opt,name=skin_path,json=skinPath,proto3" json:"skin_path,omitempty"`
	ArmPath              string   `protobuf:"bytes,5,opt,name=arm_path,json=armPath,proto3" json:"arm_path,omitempty"`
	Price                int32    `protobuf:"varint,6,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SkinInfo) Reset()         { *m = SkinInfo{} }
func (m *SkinInfo) String() string { return proto.CompactTextString(m) }
func (*SkinInfo) ProtoMessage()    {}
func (*SkinInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{0}
}
func (m *SkinInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkinInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkinInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkinInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkinInfo.Merge(m, src)
}
func (m *SkinInfo) XXX_Size() int {
	return m.Size()
}
func (m *SkinInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SkinInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SkinInfo proto.InternalMessageInfo

func (m *SkinInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SkinInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SkinInfo) GetSkinPath() string {
	if m != nil {
		return m.SkinPath
	}
	return ""
}

func (m *SkinInfo) GetArmPath() string {
	if m != nil {
		return m.ArmPath
	}
	return ""
}

func (m *SkinInfo) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type GetInfoReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoReq) Reset()         { *m = GetInfoReq{} }
func (m *GetInfoReq) String() string { return proto.CompactTextString(m) }
func (*GetInfoReq) ProtoMessage()    {}
func (*GetInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{1}
}
func (m *GetInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoReq.Merge(m, src)
}
func (m *GetInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoReq proto.InternalMessageInfo

func (m *GetInfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type GetInfoResp struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UsedSkin             int32    `protobuf:"varint,2,opt,name=used_skin,json=usedSkin,proto3" json:"used_skin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetInfoResp) Reset()         { *m = GetInfoResp{} }
func (m *GetInfoResp) String() string { return proto.CompactTextString(m) }
func (*GetInfoResp) ProtoMessage()    {}
func (*GetInfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{2}
}
func (m *GetInfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetInfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetInfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetInfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetInfoResp.Merge(m, src)
}
func (m *GetInfoResp) XXX_Size() int {
	return m.Size()
}
func (m *GetInfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetInfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetInfoResp proto.InternalMessageInfo

func (m *GetInfoResp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GetInfoResp) GetUsedSkin() int32 {
	if m != nil {
		return m.UsedSkin
	}
	return 0
}

type GetSkinsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSkinsReq) Reset()         { *m = GetSkinsReq{} }
func (m *GetSkinsReq) String() string { return proto.CompactTextString(m) }
func (*GetSkinsReq) ProtoMessage()    {}
func (*GetSkinsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{3}
}
func (m *GetSkinsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSkinsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSkinsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSkinsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSkinsReq.Merge(m, src)
}
func (m *GetSkinsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSkinsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSkinsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSkinsReq proto.InternalMessageInfo

type GetSkinsResp struct {
	Info                 []*SkinInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GetSkinsResp) Reset()         { *m = GetSkinsResp{} }
func (m *GetSkinsResp) String() string { return proto.CompactTextString(m) }
func (*GetSkinsResp) ProtoMessage()    {}
func (*GetSkinsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{4}
}
func (m *GetSkinsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSkinsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSkinsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSkinsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSkinsResp.Merge(m, src)
}
func (m *GetSkinsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSkinsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSkinsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSkinsResp proto.InternalMessageInfo

func (m *GetSkinsResp) GetInfo() []*SkinInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

type SetUsedSkinReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UsedSkin             int32    `protobuf:"varint,2,opt,name=used_skin,json=usedSkin,proto3" json:"used_skin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUsedSkinReq) Reset()         { *m = SetUsedSkinReq{} }
func (m *SetUsedSkinReq) String() string { return proto.CompactTextString(m) }
func (*SetUsedSkinReq) ProtoMessage()    {}
func (*SetUsedSkinReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{5}
}
func (m *SetUsedSkinReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUsedSkinReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUsedSkinReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUsedSkinReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUsedSkinReq.Merge(m, src)
}
func (m *SetUsedSkinReq) XXX_Size() int {
	return m.Size()
}
func (m *SetUsedSkinReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUsedSkinReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetUsedSkinReq proto.InternalMessageInfo

func (m *SetUsedSkinReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SetUsedSkinReq) GetUsedSkin() int32 {
	if m != nil {
		return m.UsedSkin
	}
	return 0
}

type SetUsedSkinResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetUsedSkinResp) Reset()         { *m = SetUsedSkinResp{} }
func (m *SetUsedSkinResp) String() string { return proto.CompactTextString(m) }
func (*SetUsedSkinResp) ProtoMessage()    {}
func (*SetUsedSkinResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a40b71e552f9b453, []int{6}
}
func (m *SetUsedSkinResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetUsedSkinResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetUsedSkinResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetUsedSkinResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetUsedSkinResp.Merge(m, src)
}
func (m *SetUsedSkinResp) XXX_Size() int {
	return m.Size()
}
func (m *SetUsedSkinResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SetUsedSkinResp.DiscardUnknown(m)
}

var xxx_messageInfo_SetUsedSkinResp proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SkinInfo)(nil), "ncs.skin.SkinInfo")
	proto.RegisterType((*GetInfoReq)(nil), "ncs.skin.GetInfoReq")
	proto.RegisterType((*GetInfoResp)(nil), "ncs.skin.GetInfoResp")
	proto.RegisterType((*GetSkinsReq)(nil), "ncs.skin.GetSkinsReq")
	proto.RegisterType((*GetSkinsResp)(nil), "ncs.skin.GetSkinsResp")
	proto.RegisterType((*SetUsedSkinReq)(nil), "ncs.skin.SetUsedSkinReq")
	proto.RegisterType((*SetUsedSkinResp)(nil), "ncs.skin.SetUsedSkinResp")
}

func init() { proto.RegisterFile("app/game/skin/api/grpc/skin.proto", fileDescriptor_a40b71e552f9b453) }

var fileDescriptor_a40b71e552f9b453 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x86, 0x59, 0x9f, 0x2f, 0x71, 0xe6, 0x42, 0x08, 0xa3, 0x5c, 0xb4, 0x31, 0xc8, 0x32, 0x5b,
	0xa0, 0x13, 0x85, 0x2d, 0x05, 0x89, 0x02, 0x21, 0x21, 0xd1, 0x20, 0x0a, 0xa4, 0xc8, 0x11, 0x0d,
	0x4d, 0xb4, 0x9c, 0x37, 0xce, 0x2a, 0x78, 0x77, 0xe3, 0xf5, 0x55, 0x40, 0x43, 0x4f, 0x45, 0xc3,
	0x23, 0x51, 0x22, 0xf1, 0x02, 0xe8, 0xe0, 0x41, 0xd0, 0xee, 0xf9, 0x38, 0x1f, 0x1c, 0xe9, 0x66,
	0xe6, 0x9f, 0xfd, 0xfd, 0xf9, 0xd7, 0xc0, 0x3d, 0x6e, 0x4c, 0x5e, 0xf1, 0x5a, 0xe4, 0xf6, 0x52,
	0xaa, 0x9c, 0x1b, 0x99, 0x57, 0x8d, 0x99, 0xfa, 0x2e, 0x33, 0x8d, 0x6e, 0x35, 0x46, 0x6a, 0x6a,
	0x33, 0xd7, 0xc7, 0x77, 0x2b, 0xad, 0xab, 0xb7, 0xc2, 0x6f, 0x71, 0xa5, 0x74, 0xcb, 0x5b, 0xa9,
	0x95, 0x5d, 0xec, 0xb1, 0xf7, 0x10, 0x9d, 0x5e, 0x4a, 0xf5, 0x42, 0x9d, 0x6b, 0xdc, 0x83, 0x40,
	0x96, 0x94, 0xa4, 0x64, 0x32, 0x2c, 0x02, 0x59, 0x22, 0x42, 0xa8, 0x78, 0x2d, 0xe8, 0x20, 0x25,
	0x93, 0x9d, 0xc2, 0xd7, 0x78, 0x07, 0x76, 0x9c, 0xeb, 0x99, 0xe1, 0xed, 0x05, 0x0d, 0xbd, 0x10,
	0xb9, 0xc1, 0x09, 0x6f, 0x2f, 0xf0, 0x08, 0x22, 0xde, 0xd4, 0x0b, 0x6d, 0xe8, 0xb5, 0x6d, 0xde,
	0xd4, 0x5e, 0x3a, 0x80, 0xa1, 0x69, 0xe4, 0x54, 0xd0, 0x2d, 0x6f, 0xbf, 0x68, 0x58, 0x02, 0xf0,
	0x5c, 0xb4, 0xee, 0xe3, 0x85, 0xb8, 0xc2, 0x7d, 0x18, 0xcc, 0x3a, 0x80, 0x41, 0xe1, 0x4a, 0xf6,
	0x04, 0x46, 0x7f, 0x74, 0x6b, 0xfe, 0x5d, 0x70, 0x38, 0x33, 0x2b, 0xca, 0x33, 0x87, 0x40, 0x03,
	0x6f, 0x1d, 0xb9, 0x81, 0xfb, 0x27, 0x76, 0xd3, 0xbf, 0x76, 0xa5, 0x2d, 0xc4, 0x15, 0x7b, 0x04,
	0xbb, 0xab, 0xd6, 0x1a, 0xbc, 0x0f, 0xa1, 0x54, 0xe7, 0x9a, 0x92, 0x74, 0x30, 0x19, 0x1d, 0x63,
	0xb6, 0x4c, 0x2c, 0x5b, 0x06, 0x52, 0x78, 0x9d, 0x3d, 0x85, 0xbd, 0x53, 0xd1, 0xbe, 0xea, 0x5c,
	0x37, 0x82, 0x5e, 0xcf, 0x71, 0x1b, 0x6e, 0xad, 0x19, 0x58, 0x73, 0xfc, 0x29, 0x80, 0xd0, 0x35,
	0xf8, 0x12, 0xa2, 0x25, 0x14, 0x8e, 0x57, 0x08, 0x3d, 0xee, 0xf8, 0x70, 0xd3, 0xd8, 0x1a, 0x86,
	0x1f, 0xbf, 0xff, 0xfa, 0x1c, 0xec, 0x22, 0xac, 0x4e, 0x01, 0x4f, 0x60, 0xbb, 0x0b, 0x0c, 0x0f,
	0xd6, 0x9e, 0x75, 0x19, 0xc7, 0xe3, 0x0d, 0x53, 0x6b, 0x18, 0xf5, 0x5e, 0x88, 0xfb, 0xbd, 0xb3,
	0x7a, 0x37, 0x93, 0xe5, 0x07, 0x2c, 0x61, 0xd4, 0x83, 0x47, 0xda, 0x8b, 0x69, 0x2d, 0x94, 0xf8,
	0xe8, 0x3f, 0x8a, 0x35, 0x2c, 0xf5, 0xee, 0x31, 0x1b, 0xff, 0xed, 0x9e, 0xbb, 0x8c, 0x1e, 0x93,
	0x07, 0xcf, 0x0e, 0xbf, 0xce, 0x13, 0xf2, 0x6d, 0x9e, 0x90, 0x1f, 0xf3, 0x84, 0x7c, 0xf9, 0x99,
	0xdc, 0x78, 0x1d, 0xba, 0x8b, 0x7e, 0xb3, 0xe5, 0xaf, 0xf4, 0xe1, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4a, 0xf8, 0x89, 0xf2, 0xf2, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SkinClient is the client API for Skin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SkinClient interface {
	GetSkins(ctx context.Context, in *GetSkinsReq, opts ...grpc.CallOption) (*GetSkinsResp, error)
	GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoResp, error)
	SetUsedSkin(ctx context.Context, in *SetUsedSkinReq, opts ...grpc.CallOption) (*SetUsedSkinResp, error)
}

type skinClient struct {
	cc *grpc.ClientConn
}

func NewSkinClient(cc *grpc.ClientConn) SkinClient {
	return &skinClient{cc}
}

func (c *skinClient) GetSkins(ctx context.Context, in *GetSkinsReq, opts ...grpc.CallOption) (*GetSkinsResp, error) {
	out := new(GetSkinsResp)
	err := c.cc.Invoke(ctx, "/ncs.skin.Skin/GetSkins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skinClient) GetInfo(ctx context.Context, in *GetInfoReq, opts ...grpc.CallOption) (*GetInfoResp, error) {
	out := new(GetInfoResp)
	err := c.cc.Invoke(ctx, "/ncs.skin.Skin/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *skinClient) SetUsedSkin(ctx context.Context, in *SetUsedSkinReq, opts ...grpc.CallOption) (*SetUsedSkinResp, error) {
	out := new(SetUsedSkinResp)
	err := c.cc.Invoke(ctx, "/ncs.skin.Skin/SetUsedSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SkinServer is the server API for Skin service.
type SkinServer interface {
	GetSkins(context.Context, *GetSkinsReq) (*GetSkinsResp, error)
	GetInfo(context.Context, *GetInfoReq) (*GetInfoResp, error)
	SetUsedSkin(context.Context, *SetUsedSkinReq) (*SetUsedSkinResp, error)
}

// UnimplementedSkinServer can be embedded to have forward compatible implementations.
type UnimplementedSkinServer struct {
}

func (*UnimplementedSkinServer) GetSkins(ctx context.Context, req *GetSkinsReq) (*GetSkinsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkins not implemented")
}
func (*UnimplementedSkinServer) GetInfo(ctx context.Context, req *GetInfoReq) (*GetInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedSkinServer) SetUsedSkin(ctx context.Context, req *SetUsedSkinReq) (*SetUsedSkinResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUsedSkin not implemented")
}

func RegisterSkinServer(s *grpc.Server, srv SkinServer) {
	s.RegisterService(&_Skin_serviceDesc, srv)
}

func _Skin_GetSkins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSkinsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkinServer).GetSkins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.skin.Skin/GetSkins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkinServer).GetSkins(ctx, req.(*GetSkinsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Skin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkinServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.skin.Skin/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkinServer).GetInfo(ctx, req.(*GetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Skin_SetUsedSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUsedSkinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SkinServer).SetUsedSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.skin.Skin/SetUsedSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SkinServer).SetUsedSkin(ctx, req.(*SetUsedSkinReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Skin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.skin.Skin",
	HandlerType: (*SkinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSkins",
			Handler:    _Skin_GetSkins_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Skin_GetInfo_Handler,
		},
		{
			MethodName: "SetUsedSkin",
			Handler:    _Skin_SetUsedSkin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/skin/api/grpc/skin.proto",
}

func (m *SkinInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkinInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkinInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Price != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ArmPath) > 0 {
		i -= len(m.ArmPath)
		copy(dAtA[i:], m.ArmPath)
		i = encodeVarintSkin(dAtA, i, uint64(len(m.ArmPath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SkinPath) > 0 {
		i -= len(m.SkinPath)
		copy(dAtA[i:], m.SkinPath)
		i = encodeVarintSkin(dAtA, i, uint64(len(m.SkinPath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSkin(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetInfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetInfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetInfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedSkin != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.UsedSkin))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetSkinsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSkinsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSkinsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetSkinsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSkinsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSkinsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSkin(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SetUsedSkinReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUsedSkinReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUsedSkinReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UsedSkin != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.UsedSkin))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintSkin(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetUsedSkinResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetUsedSkinResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetUsedSkinResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintSkin(dAtA []byte, offset int, v uint64) int {
	offset -= sovSkin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SkinInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSkin(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	l = len(m.SkinPath)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	l = len(m.ArmPath)
	if l > 0 {
		n += 1 + l + sovSkin(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovSkin(uint64(m.Price))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSkin(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetInfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSkin(uint64(m.Uid))
	}
	if m.UsedSkin != 0 {
		n += 1 + sovSkin(uint64(m.UsedSkin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSkinsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSkinsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovSkin(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetUsedSkinReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovSkin(uint64(m.Uid))
	}
	if m.UsedSkin != 0 {
		n += 1 + sovSkin(uint64(m.UsedSkin))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetUsedSkinResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSkin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSkin(x uint64) (n int) {
	return sovSkin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SkinInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkinInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkinInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkinPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SkinPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSkin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArmPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetInfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetInfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetInfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedSkin", wireType)
			}
			m.UsedSkin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedSkin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSkinsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSkinsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSkinsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSkinsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSkinsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSkinsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSkin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSkin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &SkinInfo{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUsedSkinReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUsedSkinReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUsedSkinReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedSkin", wireType)
			}
			m.UsedSkin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UsedSkin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetUsedSkinResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetUsedSkinResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetUsedSkinResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSkin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSkin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSkin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSkin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSkin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSkin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSkin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSkin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSkin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSkin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSkin = fmt.Errorf("proto: unexpected end of group")
)
