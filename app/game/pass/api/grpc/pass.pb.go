// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/game/pass/api/grpc/pass.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Item struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Amount               int32    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Length               int64    `protobuf:"varint,5,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Item) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Item) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Item) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Item) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type GetRewardsReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRewardsReq) Reset()         { *m = GetRewardsReq{} }
func (m *GetRewardsReq) String() string { return proto.CompactTextString(m) }
func (*GetRewardsReq) ProtoMessage()    {}
func (*GetRewardsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{1}
}
func (m *GetRewardsReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRewardsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRewardsReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRewardsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRewardsReq.Merge(m, src)
}
func (m *GetRewardsReq) XXX_Size() int {
	return m.Size()
}
func (m *GetRewardsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRewardsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRewardsReq proto.InternalMessageInfo

type GetRewardsResp struct {
	Season               int32    `protobuf:"varint,1,opt,name=season,proto3" json:"season,omitempty"`
	FreeRewards          []*Item  `protobuf:"bytes,2,rep,name=free_rewards,json=freeRewards,proto3" json:"free_rewards,omitempty"`
	AdvRewards           []*Item  `protobuf:"bytes,3,rep,name=adv_rewards,json=advRewards,proto3" json:"adv_rewards,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRewardsResp) Reset()         { *m = GetRewardsResp{} }
func (m *GetRewardsResp) String() string { return proto.CompactTextString(m) }
func (*GetRewardsResp) ProtoMessage()    {}
func (*GetRewardsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{2}
}
func (m *GetRewardsResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetRewardsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetRewardsResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetRewardsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRewardsResp.Merge(m, src)
}
func (m *GetRewardsResp) XXX_Size() int {
	return m.Size()
}
func (m *GetRewardsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRewardsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRewardsResp proto.InternalMessageInfo

func (m *GetRewardsResp) GetSeason() int32 {
	if m != nil {
		return m.Season
	}
	return 0
}

func (m *GetRewardsResp) GetFreeRewards() []*Item {
	if m != nil {
		return m.FreeRewards
	}
	return nil
}

func (m *GetRewardsResp) GetAdvRewards() []*Item {
	if m != nil {
		return m.AdvRewards
	}
	return nil
}

type UsePointBoxReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	All                  bool     `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsePointBoxReq) Reset()         { *m = UsePointBoxReq{} }
func (m *UsePointBoxReq) String() string { return proto.CompactTextString(m) }
func (*UsePointBoxReq) ProtoMessage()    {}
func (*UsePointBoxReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{3}
}
func (m *UsePointBoxReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsePointBoxReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsePointBoxReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsePointBoxReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsePointBoxReq.Merge(m, src)
}
func (m *UsePointBoxReq) XXX_Size() int {
	return m.Size()
}
func (m *UsePointBoxReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UsePointBoxReq.DiscardUnknown(m)
}

var xxx_messageInfo_UsePointBoxReq proto.InternalMessageInfo

func (m *UsePointBoxReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UsePointBoxReq) GetAll() bool {
	if m != nil {
		return m.All
	}
	return false
}

type UsePointBoxResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UsePointBoxResp) Reset()         { *m = UsePointBoxResp{} }
func (m *UsePointBoxResp) String() string { return proto.CompactTextString(m) }
func (*UsePointBoxResp) ProtoMessage()    {}
func (*UsePointBoxResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{4}
}
func (m *UsePointBoxResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsePointBoxResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsePointBoxResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsePointBoxResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsePointBoxResp.Merge(m, src)
}
func (m *UsePointBoxResp) XXX_Size() int {
	return m.Size()
}
func (m *UsePointBoxResp) XXX_DiscardUnknown() {
	xxx_messageInfo_UsePointBoxResp.DiscardUnknown(m)
}

var xxx_messageInfo_UsePointBoxResp proto.InternalMessageInfo

type InfoReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{5}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

func (m *InfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type InfoResp struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Point                int32    `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	BoxAmount            int32    `protobuf:"varint,4,opt,name=box_amount,json=boxAmount,proto3" json:"box_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResp) Reset()         { *m = InfoResp{} }
func (m *InfoResp) String() string { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()    {}
func (*InfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a6b947dbde360d8c, []int{6}
}
func (m *InfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResp.Merge(m, src)
}
func (m *InfoResp) XXX_Size() int {
	return m.Size()
}
func (m *InfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResp proto.InternalMessageInfo

func (m *InfoResp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *InfoResp) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *InfoResp) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *InfoResp) GetBoxAmount() int32 {
	if m != nil {
		return m.BoxAmount
	}
	return 0
}

func init() {
	proto.RegisterType((*Item)(nil), "ncs.game.pass.Item")
	proto.RegisterType((*GetRewardsReq)(nil), "ncs.game.pass.GetRewardsReq")
	proto.RegisterType((*GetRewardsResp)(nil), "ncs.game.pass.GetRewardsResp")
	proto.RegisterType((*UsePointBoxReq)(nil), "ncs.game.pass.UsePointBoxReq")
	proto.RegisterType((*UsePointBoxResp)(nil), "ncs.game.pass.UsePointBoxResp")
	proto.RegisterType((*InfoReq)(nil), "ncs.game.pass.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "ncs.game.pass.InfoResp")
}

func init() { proto.RegisterFile("app/game/pass/api/grpc/pass.proto", fileDescriptor_a6b947dbde360d8c) }

var fileDescriptor_a6b947dbde360d8c = []byte{
	// 490 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xfc, 0x93, 0x7e, 0xed, 0x0d, 0x4d, 0xe1, 0xb6, 0xa4, 0x56, 0x68, 0xac, 0x30, 0xab,
	0x88, 0x45, 0x2c, 0x95, 0x8a, 0x05, 0x3b, 0xba, 0x41, 0xdd, 0x55, 0x23, 0xc1, 0x82, 0x4d, 0x35,
	0xa9, 0x27, 0xc6, 0x92, 0x33, 0x33, 0xf5, 0x38, 0x21, 0x08, 0xb1, 0xe1, 0x15, 0x90, 0x10, 0xef,
	0xc1, 0x4b, 0xb0, 0x44, 0xe2, 0x05, 0x50, 0xe0, 0x41, 0xd0, 0x8c, 0x47, 0x60, 0x47, 0xa1, 0xbb,
	0x7b, 0xce, 0x9c, 0x7b, 0xae, 0xe7, 0x1e, 0x0f, 0x3c, 0x64, 0x4a, 0x25, 0x19, 0x9b, 0xf3, 0x44,
	0x31, 0xad, 0x13, 0xa6, 0xf2, 0x24, 0x2b, 0xd5, 0xb5, 0x45, 0x13, 0x55, 0xca, 0x4a, 0xe2, 0xbe,
	0xb8, 0xd6, 0x13, 0x23, 0x99, 0x18, 0x72, 0x70, 0x92, 0x49, 0x99, 0x15, 0xdc, 0x4a, 0x99, 0x10,
	0xb2, 0x62, 0x55, 0x2e, 0x85, 0x13, 0x13, 0x05, 0xe1, 0x45, 0xc5, 0xe7, 0xd8, 0x03, 0x3f, 0x4f,
	0x23, 0x6f, 0xe4, 0x8d, 0x3b, 0xd4, 0xcf, 0x53, 0x3c, 0x82, 0x4e, 0xc1, 0x97, 0xbc, 0x88, 0x7c,
	0x4b, 0xd5, 0x00, 0x11, 0x42, 0xc1, 0xe6, 0x3c, 0x0a, 0x46, 0xde, 0x78, 0x8f, 0xda, 0x1a, 0xfb,
	0xb0, 0xc3, 0xe6, 0x72, 0x21, 0xaa, 0x28, 0xb4, 0x52, 0x87, 0x0c, 0x5f, 0x70, 0x91, 0x55, 0xaf,
	0xa3, 0xce, 0xc8, 0x1b, 0x07, 0xd4, 0x21, 0x72, 0x00, 0xfb, 0xcf, 0x79, 0x45, 0xf9, 0x1b, 0x56,
	0xa6, 0x9a, 0xf2, 0x1b, 0xf2, 0xc9, 0x83, 0x5e, 0x93, 0xd1, 0xca, 0xf4, 0x6a, 0xce, 0xb4, 0x14,
	0xee, 0x8b, 0x1c, 0xc2, 0x27, 0x70, 0x67, 0x56, 0x72, 0x7e, 0x55, 0xd6, 0xda, 0xc8, 0x1f, 0x05,
	0xe3, 0xee, 0xe9, 0xe1, 0xa4, 0x75, 0xe3, 0x89, 0xb9, 0x10, 0xed, 0x1a, 0xa1, 0xf3, 0xc4, 0x33,
	0xe8, 0xb2, 0x74, 0xf9, 0xa7, 0x2d, 0xf8, 0x77, 0x1b, 0xb0, 0x74, 0xe9, 0xba, 0xc8, 0x19, 0xf4,
	0x5e, 0x68, 0x7e, 0x29, 0x73, 0x51, 0x9d, 0xcb, 0x15, 0xe5, 0x37, 0x78, 0x17, 0x82, 0x85, 0x5b,
	0x53, 0x40, 0x4d, 0x69, 0x18, 0x56, 0xd4, 0x5b, 0xda, 0xa5, 0xa6, 0x24, 0xf7, 0xe0, 0xa0, 0xd5,
	0xa5, 0x15, 0x79, 0x00, 0xff, 0x5f, 0x88, 0x99, 0xdc, 0xea, 0x40, 0x38, 0xec, 0xd6, 0x87, 0x5a,
	0x6d, 0xf1, 0x47, 0x08, 0xab, 0xb7, 0x8a, 0xbb, 0x18, 0x6c, 0x6d, 0xb2, 0x51, 0xc6, 0xde, 0xc6,
	0xd0, 0xa1, 0x35, 0xc0, 0x21, 0xc0, 0x54, 0xae, 0xae, 0x5a, 0x59, 0xec, 0x4d, 0xe5, 0xea, 0x99,
	0x25, 0x4e, 0xbf, 0xf8, 0x10, 0x5e, 0x32, 0xad, 0xf1, 0x25, 0x84, 0x66, 0x1e, 0xf6, 0x37, 0xaf,
	0x5f, 0x7f, 0xe1, 0xe0, 0x78, 0x2b, 0xaf, 0x15, 0x19, 0x7e, 0xf8, 0xfe, 0xeb, 0xa3, 0x7f, 0x8c,
	0xf7, 0x1b, 0xff, 0x5f, 0x2e, 0x66, 0x32, 0x79, 0xb7, 0xc8, 0xd3, 0xf7, 0xc8, 0x01, 0xfe, 0xa6,
	0x88, 0x27, 0x1b, 0x2e, 0xad, 0xc8, 0x07, 0xc3, 0x5b, 0x4e, 0xb5, 0x22, 0x03, 0x3b, 0xe9, 0x08,
	0xb1, 0x31, 0xc9, 0x65, 0x87, 0x05, 0x74, 0x1b, 0xeb, 0xc5, 0x4d, 0xa7, 0x76, 0x60, 0x83, 0xf8,
	0xb6, 0x63, 0xad, 0x48, 0x6c, 0x27, 0x45, 0xe4, 0xb0, 0x31, 0xc9, 0xae, 0x73, 0x2a, 0x57, 0x4f,
	0xbd, 0x47, 0xe7, 0xfd, 0xaf, 0xeb, 0xd8, 0xfb, 0xb6, 0x8e, 0xbd, 0x1f, 0xeb, 0xd8, 0xfb, 0xfc,
	0x33, 0xfe, 0xef, 0x55, 0x68, 0x9e, 0xdb, 0x74, 0xc7, 0xbe, 0x9e, 0xc7, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x30, 0x66, 0xb1, 0xfe, 0x8f, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PassClient is the client API for Pass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PassClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	GetRewards(ctx context.Context, in *GetRewardsReq, opts ...grpc.CallOption) (*GetRewardsResp, error)
	UsePointBox(ctx context.Context, in *UsePointBoxReq, opts ...grpc.CallOption) (*UsePointBoxResp, error)
}

type passClient struct {
	cc *grpc.ClientConn
}

func NewPassClient(cc *grpc.ClientConn) PassClient {
	return &passClient{cc}
}

func (c *passClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.pass.Pass/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) GetRewards(ctx context.Context, in *GetRewardsReq, opts ...grpc.CallOption) (*GetRewardsResp, error) {
	out := new(GetRewardsResp)
	err := c.cc.Invoke(ctx, "/ncs.game.pass.Pass/GetRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) UsePointBox(ctx context.Context, in *UsePointBoxReq, opts ...grpc.CallOption) (*UsePointBoxResp, error) {
	out := new(UsePointBoxResp)
	err := c.cc.Invoke(ctx, "/ncs.game.pass.Pass/UsePointBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassServer is the server API for Pass service.
type PassServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	GetRewards(context.Context, *GetRewardsReq) (*GetRewardsResp, error)
	UsePointBox(context.Context, *UsePointBoxReq) (*UsePointBoxResp, error)
}

// UnimplementedPassServer can be embedded to have forward compatible implementations.
type UnimplementedPassServer struct {
}

func (*UnimplementedPassServer) Info(ctx context.Context, req *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedPassServer) GetRewards(ctx context.Context, req *GetRewardsReq) (*GetRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewards not implemented")
}
func (*UnimplementedPassServer) UsePointBox(ctx context.Context, req *UsePointBoxReq) (*UsePointBoxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePointBox not implemented")
}

func RegisterPassServer(s *grpc.Server, srv PassServer) {
	s.RegisterService(&_Pass_serviceDesc, srv)
}

func _Pass_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.pass.Pass/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_GetRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).GetRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.pass.Pass/GetRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).GetRewards(ctx, req.(*GetRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_UsePointBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsePointBoxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).UsePointBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.pass.Pass/UsePointBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).UsePointBox(ctx, req.(*UsePointBoxReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pass_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.pass.Pass",
	HandlerType: (*PassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Pass_Info_Handler,
		},
		{
			MethodName: "GetRewards",
			Handler:    _Pass_GetRewards_Handler,
		},
		{
			MethodName: "UsePointBox",
			Handler:    _Pass_UsePointBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/pass/api/grpc/pass.proto",
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPass(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Level != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetRewardsReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRewardsReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRewardsReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *GetRewardsResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRewardsResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetRewardsResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AdvRewards) > 0 {
		for iNdEx := len(m.AdvRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AdvRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FreeRewards) > 0 {
		for iNdEx := len(m.FreeRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FreeRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Season != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Season))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsePointBoxReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsePointBoxReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsePointBoxReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.All {
		i--
		if m.All {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsePointBoxResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsePointBoxResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsePointBoxResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.BoxAmount != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.BoxAmount))
		i--
		dAtA[i] = 0x20
	}
	if m.Point != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintPass(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPass(dAtA []byte, offset int, v uint64) int {
	offset -= sovPass(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPass(uint64(m.Id))
	}
	if m.Level != 0 {
		n += 1 + sovPass(uint64(m.Level))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPass(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovPass(uint64(m.Amount))
	}
	if m.Length != 0 {
		n += 1 + sovPass(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRewardsReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetRewardsResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Season != 0 {
		n += 1 + sovPass(uint64(m.Season))
	}
	if len(m.FreeRewards) > 0 {
		for _, e := range m.FreeRewards {
			l = e.Size()
			n += 1 + l + sovPass(uint64(l))
		}
	}
	if len(m.AdvRewards) > 0 {
		for _, e := range m.AdvRewards {
			l = e.Size()
			n += 1 + l + sovPass(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UsePointBoxReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPass(uint64(m.Uid))
	}
	if m.All {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UsePointBoxResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPass(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovPass(uint64(m.Uid))
	}
	if m.Type != 0 {
		n += 1 + sovPass(uint64(m.Type))
	}
	if m.Point != 0 {
		n += 1 + sovPass(uint64(m.Point))
	}
	if m.BoxAmount != 0 {
		n += 1 + sovPass(uint64(m.BoxAmount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPass(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPass(x uint64) (n int) {
	return sovPass(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRewardsReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRewardsReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRewardsReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRewardsResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRewardsResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRewardsResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Season", wireType)
			}
			m.Season = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Season |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FreeRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FreeRewards = append(m.FreeRewards, &Item{})
			if err := m.FreeRewards[len(m.FreeRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdvRewards = append(m.AdvRewards, &Item{})
			if err := m.AdvRewards[len(m.AdvRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsePointBoxReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsePointBoxReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsePointBoxReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field All", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.All = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsePointBoxResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsePointBoxResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsePointBoxResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxAmount", wireType)
			}
			m.BoxAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxAmount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPass(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPass
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPass
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPass
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPass
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPass        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPass          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPass = fmt.Errorf("proto: unexpected end of group")
)
