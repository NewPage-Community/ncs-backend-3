// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PassClient is the client API for Pass service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PassClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	GetRewards(ctx context.Context, in *GetRewardsReq, opts ...grpc.CallOption) (*GetRewardsResp, error)
	UsePointBox(ctx context.Context, in *UsePointBoxReq, opts ...grpc.CallOption) (*UsePointBoxResp, error)
}

type passClient struct {
	cc grpc.ClientConnInterface
}

func NewPassClient(cc grpc.ClientConnInterface) PassClient {
	return &passClient{cc}
}

func (c *passClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.game.pass.v1.Pass/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) GetRewards(ctx context.Context, in *GetRewardsReq, opts ...grpc.CallOption) (*GetRewardsResp, error) {
	out := new(GetRewardsResp)
	err := c.cc.Invoke(ctx, "/ncs.game.pass.v1.Pass/GetRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passClient) UsePointBox(ctx context.Context, in *UsePointBoxReq, opts ...grpc.CallOption) (*UsePointBoxResp, error) {
	out := new(UsePointBoxResp)
	err := c.cc.Invoke(ctx, "/ncs.game.pass.v1.Pass/UsePointBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PassServer is the server API for Pass service.
// All implementations must embed UnimplementedPassServer
// for forward compatibility
type PassServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	GetRewards(context.Context, *GetRewardsReq) (*GetRewardsResp, error)
	UsePointBox(context.Context, *UsePointBoxReq) (*UsePointBoxResp, error)
	mustEmbedUnimplementedPassServer()
}

// UnimplementedPassServer must be embedded to have forward compatible implementations.
type UnimplementedPassServer struct {
}

func (UnimplementedPassServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedPassServer) GetRewards(context.Context, *GetRewardsReq) (*GetRewardsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewards not implemented")
}
func (UnimplementedPassServer) UsePointBox(context.Context, *UsePointBoxReq) (*UsePointBoxResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsePointBox not implemented")
}
func (UnimplementedPassServer) mustEmbedUnimplementedPassServer() {}

// UnsafePassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PassServer will
// result in compilation errors.
type UnsafePassServer interface {
	mustEmbedUnimplementedPassServer()
}

func RegisterPassServer(s grpc.ServiceRegistrar, srv PassServer) {
	s.RegisterService(&Pass_ServiceDesc, srv)
}

func _Pass_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.pass.v1.Pass/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_GetRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).GetRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.pass.v1.Pass/GetRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).GetRewards(ctx, req.(*GetRewardsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pass_UsePointBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsePointBoxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PassServer).UsePointBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.pass.v1.Pass/UsePointBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PassServer).UsePointBox(ctx, req.(*UsePointBoxReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Pass_ServiceDesc is the grpc.ServiceDesc for Pass service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pass_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.pass.v1.Pass",
	HandlerType: (*PassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Pass_Info_Handler,
		},
		{
			MethodName: "GetRewards",
			Handler:    _Pass_GetRewards_Handler,
		},
		{
			MethodName: "UsePointBox",
			Handler:    _Pass_UsePointBox_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/pass/api/grpc/v1/pass.proto",
}
