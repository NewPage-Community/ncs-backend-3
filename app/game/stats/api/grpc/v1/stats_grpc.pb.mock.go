// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/stats/api/grpc/v1/stats_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStatsClient is a mock of StatsClient interface.
type MockStatsClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatsClientMockRecorder
}

// MockStatsClientMockRecorder is the mock recorder for MockStatsClient.
type MockStatsClientMockRecorder struct {
	mock *MockStatsClient
}

// NewMockStatsClient creates a new mock instance.
func NewMockStatsClient(ctrl *gomock.Controller) *MockStatsClient {
	mock := &MockStatsClient{ctrl: ctrl}
	mock.recorder = &MockStatsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsClient) EXPECT() *MockStatsClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStatsClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStatsClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStatsClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockStatsClient) GetAll(ctx context.Context, in *GetAllReq, opts ...grpc.CallOption) (*GetAllResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*GetAllResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStatsClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStatsClient)(nil).GetAll), varargs...)
}

// GetGlobal mocks base method.
func (m *MockStatsClient) GetGlobal(ctx context.Context, in *GetGlobalReq, opts ...grpc.CallOption) (*GetGlobalResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetGlobal", varargs...)
	ret0, _ := ret[0].(*GetGlobalResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobal indicates an expected call of GetGlobal.
func (mr *MockStatsClientMockRecorder) GetGlobal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobal", reflect.TypeOf((*MockStatsClient)(nil).GetGlobal), varargs...)
}

// Gets mocks base method.
func (m *MockStatsClient) Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gets", varargs...)
	ret0, _ := ret[0].(*GetsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockStatsClientMockRecorder) Gets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockStatsClient)(nil).Gets), varargs...)
}

// Incr mocks base method.
func (m *MockStatsClient) Incr(ctx context.Context, in *IncrReq, opts ...grpc.CallOption) (*IncrResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Incr", varargs...)
	ret0, _ := ret[0].(*IncrResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockStatsClientMockRecorder) Incr(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockStatsClient)(nil).Incr), varargs...)
}

// IncrGlobal mocks base method.
func (m *MockStatsClient) IncrGlobal(ctx context.Context, in *IncrGlobalReq, opts ...grpc.CallOption) (*IncrGlobalResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IncrGlobal", varargs...)
	ret0, _ := ret[0].(*IncrGlobalResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrGlobal indicates an expected call of IncrGlobal.
func (mr *MockStatsClientMockRecorder) IncrGlobal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrGlobal", reflect.TypeOf((*MockStatsClient)(nil).IncrGlobal), varargs...)
}

// Incrs mocks base method.
func (m *MockStatsClient) Incrs(ctx context.Context, in *IncrsReq, opts ...grpc.CallOption) (*IncrResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Incrs", varargs...)
	ret0, _ := ret[0].(*IncrResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incrs indicates an expected call of Incrs.
func (mr *MockStatsClientMockRecorder) Incrs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incrs", reflect.TypeOf((*MockStatsClient)(nil).Incrs), varargs...)
}

// Set mocks base method.
func (m *MockStatsClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*SetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStatsClientMockRecorder) Set(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStatsClient)(nil).Set), varargs...)
}

// SetGlobal mocks base method.
func (m *MockStatsClient) SetGlobal(ctx context.Context, in *SetGlobalReq, opts ...grpc.CallOption) (*SetGlobalResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetGlobal", varargs...)
	ret0, _ := ret[0].(*SetGlobalResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGlobal indicates an expected call of SetGlobal.
func (mr *MockStatsClientMockRecorder) SetGlobal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobal", reflect.TypeOf((*MockStatsClient)(nil).SetGlobal), varargs...)
}

// Sets mocks base method.
func (m *MockStatsClient) Sets(ctx context.Context, in *SetsReq, opts ...grpc.CallOption) (*SetResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sets", varargs...)
	ret0, _ := ret[0].(*SetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sets indicates an expected call of Sets.
func (mr *MockStatsClientMockRecorder) Sets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sets", reflect.TypeOf((*MockStatsClient)(nil).Sets), varargs...)
}

// MockStatsServer is a mock of StatsServer interface.
type MockStatsServer struct {
	ctrl     *gomock.Controller
	recorder *MockStatsServerMockRecorder
}

// MockStatsServerMockRecorder is the mock recorder for MockStatsServer.
type MockStatsServerMockRecorder struct {
	mock *MockStatsServer
}

// NewMockStatsServer creates a new mock instance.
func NewMockStatsServer(ctrl *gomock.Controller) *MockStatsServer {
	mock := &MockStatsServer{ctrl: ctrl}
	mock.recorder = &MockStatsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatsServer) EXPECT() *MockStatsServerMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStatsServer) Get(arg0 context.Context, arg1 *GetReq) (*GetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStatsServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStatsServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockStatsServer) GetAll(arg0 context.Context, arg1 *GetAllReq) (*GetAllResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*GetAllResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockStatsServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockStatsServer)(nil).GetAll), arg0, arg1)
}

// GetGlobal mocks base method.
func (m *MockStatsServer) GetGlobal(arg0 context.Context, arg1 *GetGlobalReq) (*GetGlobalResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGlobal", arg0, arg1)
	ret0, _ := ret[0].(*GetGlobalResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGlobal indicates an expected call of GetGlobal.
func (mr *MockStatsServerMockRecorder) GetGlobal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGlobal", reflect.TypeOf((*MockStatsServer)(nil).GetGlobal), arg0, arg1)
}

// Gets mocks base method.
func (m *MockStatsServer) Gets(arg0 context.Context, arg1 *GetsReq) (*GetsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gets", arg0, arg1)
	ret0, _ := ret[0].(*GetsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Gets indicates an expected call of Gets.
func (mr *MockStatsServerMockRecorder) Gets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gets", reflect.TypeOf((*MockStatsServer)(nil).Gets), arg0, arg1)
}

// Incr mocks base method.
func (m *MockStatsServer) Incr(arg0 context.Context, arg1 *IncrReq) (*IncrResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", arg0, arg1)
	ret0, _ := ret[0].(*IncrResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incr indicates an expected call of Incr.
func (mr *MockStatsServerMockRecorder) Incr(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockStatsServer)(nil).Incr), arg0, arg1)
}

// IncrGlobal mocks base method.
func (m *MockStatsServer) IncrGlobal(arg0 context.Context, arg1 *IncrGlobalReq) (*IncrGlobalResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrGlobal", arg0, arg1)
	ret0, _ := ret[0].(*IncrGlobalResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrGlobal indicates an expected call of IncrGlobal.
func (mr *MockStatsServerMockRecorder) IncrGlobal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrGlobal", reflect.TypeOf((*MockStatsServer)(nil).IncrGlobal), arg0, arg1)
}

// Incrs mocks base method.
func (m *MockStatsServer) Incrs(arg0 context.Context, arg1 *IncrsReq) (*IncrResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incrs", arg0, arg1)
	ret0, _ := ret[0].(*IncrResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Incrs indicates an expected call of Incrs.
func (mr *MockStatsServerMockRecorder) Incrs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incrs", reflect.TypeOf((*MockStatsServer)(nil).Incrs), arg0, arg1)
}

// Set mocks base method.
func (m *MockStatsServer) Set(arg0 context.Context, arg1 *SetReq) (*SetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*SetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockStatsServerMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStatsServer)(nil).Set), arg0, arg1)
}

// SetGlobal mocks base method.
func (m *MockStatsServer) SetGlobal(arg0 context.Context, arg1 *SetGlobalReq) (*SetGlobalResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGlobal", arg0, arg1)
	ret0, _ := ret[0].(*SetGlobalResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetGlobal indicates an expected call of SetGlobal.
func (mr *MockStatsServerMockRecorder) SetGlobal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGlobal", reflect.TypeOf((*MockStatsServer)(nil).SetGlobal), arg0, arg1)
}

// Sets mocks base method.
func (m *MockStatsServer) Sets(arg0 context.Context, arg1 *SetsReq) (*SetResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sets", arg0, arg1)
	ret0, _ := ret[0].(*SetResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sets indicates an expected call of Sets.
func (mr *MockStatsServerMockRecorder) Sets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sets", reflect.TypeOf((*MockStatsServer)(nil).Sets), arg0, arg1)
}

// mustEmbedUnimplementedStatsServer mocks base method.
func (m *MockStatsServer) mustEmbedUnimplementedStatsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStatsServer")
}

// mustEmbedUnimplementedStatsServer indicates an expected call of mustEmbedUnimplementedStatsServer.
func (mr *MockStatsServerMockRecorder) mustEmbedUnimplementedStatsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStatsServer", reflect.TypeOf((*MockStatsServer)(nil).mustEmbedUnimplementedStatsServer))
}

// MockUnsafeStatsServer is a mock of UnsafeStatsServer interface.
type MockUnsafeStatsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeStatsServerMockRecorder
}

// MockUnsafeStatsServerMockRecorder is the mock recorder for MockUnsafeStatsServer.
type MockUnsafeStatsServerMockRecorder struct {
	mock *MockUnsafeStatsServer
}

// NewMockUnsafeStatsServer creates a new mock instance.
func NewMockUnsafeStatsServer(ctrl *gomock.Controller) *MockUnsafeStatsServer {
	mock := &MockUnsafeStatsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeStatsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeStatsServer) EXPECT() *MockUnsafeStatsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedStatsServer mocks base method.
func (m *MockUnsafeStatsServer) mustEmbedUnimplementedStatsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedStatsServer")
}

// mustEmbedUnimplementedStatsServer indicates an expected call of mustEmbedUnimplementedStatsServer.
func (mr *MockUnsafeStatsServerMockRecorder) mustEmbedUnimplementedStatsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedStatsServer", reflect.TypeOf((*MockUnsafeStatsServer)(nil).mustEmbedUnimplementedStatsServer))
}
