// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsPublicClient is the client API for StatsPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsPublicClient interface {
	GetPartly(ctx context.Context, in *GetPartlyReq, opts ...grpc.CallOption) (*GetPartlyResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type statsPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsPublicClient(cc grpc.ClientConnInterface) StatsPublicClient {
	return &statsPublicClient{cc}
}

func (c *statsPublicClient) GetPartly(ctx context.Context, in *GetPartlyReq, opts ...grpc.CallOption) (*GetPartlyResp, error) {
	out := new(GetPartlyResp)
	err := c.cc.Invoke(ctx, "/ncs.game.stats.v1.StatsPublic/GetPartly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsPublicClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/ncs.game.stats.v1.StatsPublic/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsPublicServer is the server API for StatsPublic service.
// All implementations must embed UnimplementedStatsPublicServer
// for forward compatibility
type StatsPublicServer interface {
	GetPartly(context.Context, *GetPartlyReq) (*GetPartlyResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	mustEmbedUnimplementedStatsPublicServer()
}

// UnimplementedStatsPublicServer must be embedded to have forward compatible implementations.
type UnimplementedStatsPublicServer struct {
}

func (UnimplementedStatsPublicServer) GetPartly(context.Context, *GetPartlyReq) (*GetPartlyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartly not implemented")
}
func (UnimplementedStatsPublicServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStatsPublicServer) mustEmbedUnimplementedStatsPublicServer() {}

// UnsafeStatsPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsPublicServer will
// result in compilation errors.
type UnsafeStatsPublicServer interface {
	mustEmbedUnimplementedStatsPublicServer()
}

func RegisterStatsPublicServer(s grpc.ServiceRegistrar, srv StatsPublicServer) {
	s.RegisterService(&StatsPublic_ServiceDesc, srv)
}

func _StatsPublic_GetPartly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsPublicServer).GetPartly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.stats.v1.StatsPublic/GetPartly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsPublicServer).GetPartly(ctx, req.(*GetPartlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsPublic_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsPublicServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.stats.v1.StatsPublic/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsPublicServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsPublic_ServiceDesc is the grpc.ServiceDesc for StatsPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.stats.v1.StatsPublic",
	HandlerType: (*StatsPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPartly",
			Handler:    _StatsPublic_GetPartly_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StatsPublic_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/stats/api/grpc/v1/public.proto",
}
