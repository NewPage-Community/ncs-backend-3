// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StoreClient is the client API for Store service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreClient interface {
	BuyItem(ctx context.Context, in *BuyItemReq, opts ...grpc.CallOption) (*BuyItemResp, error)
	HotSaleList(ctx context.Context, in *HotSaleListReq, opts ...grpc.CallOption) (*HotSaleListResp, error)
	SaleList(ctx context.Context, in *SaleListReq, opts ...grpc.CallOption) (*SaleListResp, error)
	BuyPass(ctx context.Context, in *BuyPassReq, opts ...grpc.CallOption) (*BuyPassResp, error)
	BuyVIP(ctx context.Context, in *BuyVIPReq, opts ...grpc.CallOption) (*BuyVIPResp, error)
}

type storeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreClient(cc grpc.ClientConnInterface) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) BuyItem(ctx context.Context, in *BuyItemReq, opts ...grpc.CallOption) (*BuyItemResp, error) {
	out := new(BuyItemResp)
	err := c.cc.Invoke(ctx, "/ncs.game.store.v1.Store/BuyItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) HotSaleList(ctx context.Context, in *HotSaleListReq, opts ...grpc.CallOption) (*HotSaleListResp, error) {
	out := new(HotSaleListResp)
	err := c.cc.Invoke(ctx, "/ncs.game.store.v1.Store/HotSaleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) SaleList(ctx context.Context, in *SaleListReq, opts ...grpc.CallOption) (*SaleListResp, error) {
	out := new(SaleListResp)
	err := c.cc.Invoke(ctx, "/ncs.game.store.v1.Store/SaleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) BuyPass(ctx context.Context, in *BuyPassReq, opts ...grpc.CallOption) (*BuyPassResp, error) {
	out := new(BuyPassResp)
	err := c.cc.Invoke(ctx, "/ncs.game.store.v1.Store/BuyPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) BuyVIP(ctx context.Context, in *BuyVIPReq, opts ...grpc.CallOption) (*BuyVIPResp, error) {
	out := new(BuyVIPResp)
	err := c.cc.Invoke(ctx, "/ncs.game.store.v1.Store/BuyVIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreServer is the server API for Store service.
// All implementations must embed UnimplementedStoreServer
// for forward compatibility
type StoreServer interface {
	BuyItem(context.Context, *BuyItemReq) (*BuyItemResp, error)
	HotSaleList(context.Context, *HotSaleListReq) (*HotSaleListResp, error)
	SaleList(context.Context, *SaleListReq) (*SaleListResp, error)
	BuyPass(context.Context, *BuyPassReq) (*BuyPassResp, error)
	BuyVIP(context.Context, *BuyVIPReq) (*BuyVIPResp, error)
	mustEmbedUnimplementedStoreServer()
}

// UnimplementedStoreServer must be embedded to have forward compatible implementations.
type UnimplementedStoreServer struct {
}

func (UnimplementedStoreServer) BuyItem(context.Context, *BuyItemReq) (*BuyItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyItem not implemented")
}
func (UnimplementedStoreServer) HotSaleList(context.Context, *HotSaleListReq) (*HotSaleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotSaleList not implemented")
}
func (UnimplementedStoreServer) SaleList(context.Context, *SaleListReq) (*SaleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaleList not implemented")
}
func (UnimplementedStoreServer) BuyPass(context.Context, *BuyPassReq) (*BuyPassResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyPass not implemented")
}
func (UnimplementedStoreServer) BuyVIP(context.Context, *BuyVIPReq) (*BuyVIPResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyVIP not implemented")
}
func (UnimplementedStoreServer) mustEmbedUnimplementedStoreServer() {}

// UnsafeStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreServer will
// result in compilation errors.
type UnsafeStoreServer interface {
	mustEmbedUnimplementedStoreServer()
}

func RegisterStoreServer(s grpc.ServiceRegistrar, srv StoreServer) {
	s.RegisterService(&Store_ServiceDesc, srv)
}

func _Store_BuyItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BuyItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.store.v1.Store/BuyItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BuyItem(ctx, req.(*BuyItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_HotSaleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotSaleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).HotSaleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.store.v1.Store/HotSaleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).HotSaleList(ctx, req.(*HotSaleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_SaleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).SaleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.store.v1.Store/SaleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).SaleList(ctx, req.(*SaleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_BuyPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyPassReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BuyPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.store.v1.Store/BuyPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BuyPass(ctx, req.(*BuyPassReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_BuyVIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyVIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).BuyVIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.store.v1.Store/BuyVIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).BuyVIP(ctx, req.(*BuyVIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Store_ServiceDesc is the grpc.ServiceDesc for Store service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Store_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.store.v1.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuyItem",
			Handler:    _Store_BuyItem_Handler,
		},
		{
			MethodName: "HotSaleList",
			Handler:    _Store_HotSaleList_Handler,
		},
		{
			MethodName: "SaleList",
			Handler:    _Store_SaleList_Handler,
		},
		{
			MethodName: "BuyPass",
			Handler:    _Store_BuyPass_Handler,
		},
		{
			MethodName: "BuyVIP",
			Handler:    _Store_BuyVIP_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/store/api/grpc/v1/store.proto",
}
