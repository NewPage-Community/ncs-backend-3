// Code generated by MockGen. DO NOT EDIT.
// Source: app/game/store/api/grpc/store.pb.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockStoreClient is a mock of StoreClient interface
type MockStoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockStoreClientMockRecorder
}

// MockStoreClientMockRecorder is the mock recorder for MockStoreClient
type MockStoreClientMockRecorder struct {
	mock *MockStoreClient
}

// NewMockStoreClient creates a new mock instance
func NewMockStoreClient(ctrl *gomock.Controller) *MockStoreClient {
	mock := &MockStoreClient{ctrl: ctrl}
	mock.recorder = &MockStoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreClient) EXPECT() *MockStoreClientMockRecorder {
	return m.recorder
}

// BuyItem mocks base method
func (m *MockStoreClient) BuyItem(ctx context.Context, in *BuyItemReq, opts ...grpc.CallOption) (*BuyItemResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuyItem", varargs...)
	ret0, _ := ret[0].(*BuyItemResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyItem indicates an expected call of BuyItem
func (mr *MockStoreClientMockRecorder) BuyItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockStoreClient)(nil).BuyItem), varargs...)
}

// HotSaleList mocks base method
func (m *MockStoreClient) HotSaleList(ctx context.Context, in *HotSaleListReq, opts ...grpc.CallOption) (*HotSaleListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HotSaleList", varargs...)
	ret0, _ := ret[0].(*HotSaleListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HotSaleList indicates an expected call of HotSaleList
func (mr *MockStoreClientMockRecorder) HotSaleList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotSaleList", reflect.TypeOf((*MockStoreClient)(nil).HotSaleList), varargs...)
}

// MockStoreServer is a mock of StoreServer interface
type MockStoreServer struct {
	ctrl     *gomock.Controller
	recorder *MockStoreServerMockRecorder
}

// MockStoreServerMockRecorder is the mock recorder for MockStoreServer
type MockStoreServerMockRecorder struct {
	mock *MockStoreServer
}

// NewMockStoreServer creates a new mock instance
func NewMockStoreServer(ctrl *gomock.Controller) *MockStoreServer {
	mock := &MockStoreServer{ctrl: ctrl}
	mock.recorder = &MockStoreServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStoreServer) EXPECT() *MockStoreServerMockRecorder {
	return m.recorder
}

// BuyItem mocks base method
func (m *MockStoreServer) BuyItem(arg0 context.Context, arg1 *BuyItemReq) (*BuyItemResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", arg0, arg1)
	ret0, _ := ret[0].(*BuyItemResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyItem indicates an expected call of BuyItem
func (mr *MockStoreServerMockRecorder) BuyItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockStoreServer)(nil).BuyItem), arg0, arg1)
}

// HotSaleList mocks base method
func (m *MockStoreServer) HotSaleList(arg0 context.Context, arg1 *HotSaleListReq) (*HotSaleListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HotSaleList", arg0, arg1)
	ret0, _ := ret[0].(*HotSaleListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HotSaleList indicates an expected call of HotSaleList
func (mr *MockStoreServerMockRecorder) HotSaleList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HotSaleList", reflect.TypeOf((*MockStoreServer)(nil).HotSaleList), arg0, arg1)
}
