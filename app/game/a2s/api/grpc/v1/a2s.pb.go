// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/game/a2s/api/grpc/v1/a2s.proto

package v1

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type A2SInfo struct {
	Protocol             int32    `protobuf:"varint,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Map                  string   `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
	Folder               string   `protobuf:"bytes,3,opt,name=folder,proto3" json:"folder,omitempty"`
	Game                 string   `protobuf:"bytes,4,opt,name=game,proto3" json:"game,omitempty"`
	Id                   int32    `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	Players              int32    `protobuf:"varint,6,opt,name=players,proto3" json:"players,omitempty"`
	MaxPlayers           int32    `protobuf:"varint,7,opt,name=max_players,json=maxPlayers,proto3" json:"max_players,omitempty"`
	Bots                 int32    `protobuf:"varint,8,opt,name=bots,proto3" json:"bots,omitempty"`
	ServerType           int32    `protobuf:"varint,9,opt,name=server_type,json=serverType,proto3" json:"server_type,omitempty"`
	Environment          int32    `protobuf:"varint,10,opt,name=environment,proto3" json:"environment,omitempty"`
	Visibility           int32    `protobuf:"varint,11,opt,name=visibility,proto3" json:"visibility,omitempty"`
	Vac                  int32    `protobuf:"varint,12,opt,name=vac,proto3" json:"vac,omitempty"`
	Version              string   `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
	Port                 int32    `protobuf:"varint,14,opt,name=port,proto3" json:"port,omitempty"`
	SteamId              int64    `protobuf:"varint,15,opt,name=steam_id,json=steamId,proto3" json:"steam_id,omitempty"`
	SourceTvPort         int32    `protobuf:"varint,16,opt,name=source_tv_port,json=sourceTvPort,proto3" json:"source_tv_port,omitempty"`
	SourceTvName         string   `protobuf:"bytes,17,opt,name=source_tv_name,json=sourceTvName,proto3" json:"source_tv_name,omitempty"`
	Keywords             string   `protobuf:"bytes,18,opt,name=keywords,proto3" json:"keywords,omitempty"`
	GameId               int64    `protobuf:"varint,19,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty"`
	Hostname             string   `protobuf:"bytes,20,opt,name=hostname,proto3" json:"hostname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *A2SInfo) Reset()         { *m = A2SInfo{} }
func (m *A2SInfo) String() string { return proto.CompactTextString(m) }
func (*A2SInfo) ProtoMessage()    {}
func (*A2SInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e52e54edde1764, []int{0}
}
func (m *A2SInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A2SInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A2SInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A2SInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A2SInfo.Merge(m, src)
}
func (m *A2SInfo) XXX_Size() int {
	return m.Size()
}
func (m *A2SInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_A2SInfo.DiscardUnknown(m)
}

var xxx_messageInfo_A2SInfo proto.InternalMessageInfo

func (m *A2SInfo) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *A2SInfo) GetMap() string {
	if m != nil {
		return m.Map
	}
	return ""
}

func (m *A2SInfo) GetFolder() string {
	if m != nil {
		return m.Folder
	}
	return ""
}

func (m *A2SInfo) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

func (m *A2SInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *A2SInfo) GetPlayers() int32 {
	if m != nil {
		return m.Players
	}
	return 0
}

func (m *A2SInfo) GetMaxPlayers() int32 {
	if m != nil {
		return m.MaxPlayers
	}
	return 0
}

func (m *A2SInfo) GetBots() int32 {
	if m != nil {
		return m.Bots
	}
	return 0
}

func (m *A2SInfo) GetServerType() int32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *A2SInfo) GetEnvironment() int32 {
	if m != nil {
		return m.Environment
	}
	return 0
}

func (m *A2SInfo) GetVisibility() int32 {
	if m != nil {
		return m.Visibility
	}
	return 0
}

func (m *A2SInfo) GetVac() int32 {
	if m != nil {
		return m.Vac
	}
	return 0
}

func (m *A2SInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *A2SInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *A2SInfo) GetSteamId() int64 {
	if m != nil {
		return m.SteamId
	}
	return 0
}

func (m *A2SInfo) GetSourceTvPort() int32 {
	if m != nil {
		return m.SourceTvPort
	}
	return 0
}

func (m *A2SInfo) GetSourceTvName() string {
	if m != nil {
		return m.SourceTvName
	}
	return ""
}

func (m *A2SInfo) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *A2SInfo) GetGameId() int64 {
	if m != nil {
		return m.GameId
	}
	return 0
}

func (m *A2SInfo) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type A2SPlayer struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Score                int32    `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	Duration             float32  `protobuf:"fixed32,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *A2SPlayer) Reset()         { *m = A2SPlayer{} }
func (m *A2SPlayer) String() string { return proto.CompactTextString(m) }
func (*A2SPlayer) ProtoMessage()    {}
func (*A2SPlayer) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e52e54edde1764, []int{1}
}
func (m *A2SPlayer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A2SPlayer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A2SPlayer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A2SPlayer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A2SPlayer.Merge(m, src)
}
func (m *A2SPlayer) XXX_Size() int {
	return m.Size()
}
func (m *A2SPlayer) XXX_DiscardUnknown() {
	xxx_messageInfo_A2SPlayer.DiscardUnknown(m)
}

var xxx_messageInfo_A2SPlayer proto.InternalMessageInfo

func (m *A2SPlayer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *A2SPlayer) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *A2SPlayer) GetDuration() float32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

type ServerInfo struct {
	Address              string       `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Info                 *A2SInfo     `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Player               []*A2SPlayer `protobuf:"bytes,3,rep,name=player,proto3" json:"player,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ServerInfo) Reset()         { *m = ServerInfo{} }
func (m *ServerInfo) String() string { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()    {}
func (*ServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e52e54edde1764, []int{2}
}
func (m *ServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerInfo.Merge(m, src)
}
func (m *ServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *ServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ServerInfo proto.InternalMessageInfo

func (m *ServerInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ServerInfo) GetInfo() *A2SInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *ServerInfo) GetPlayer() []*A2SPlayer {
	if m != nil {
		return m.Player
	}
	return nil
}

type A2SQueryReq struct {
	Address              []string `protobuf:"bytes,1,rep,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *A2SQueryReq) Reset()         { *m = A2SQueryReq{} }
func (m *A2SQueryReq) String() string { return proto.CompactTextString(m) }
func (*A2SQueryReq) ProtoMessage()    {}
func (*A2SQueryReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e52e54edde1764, []int{3}
}
func (m *A2SQueryReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A2SQueryReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A2SQueryReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A2SQueryReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A2SQueryReq.Merge(m, src)
}
func (m *A2SQueryReq) XXX_Size() int {
	return m.Size()
}
func (m *A2SQueryReq) XXX_DiscardUnknown() {
	xxx_messageInfo_A2SQueryReq.DiscardUnknown(m)
}

var xxx_messageInfo_A2SQueryReq proto.InternalMessageInfo

func (m *A2SQueryReq) GetAddress() []string {
	if m != nil {
		return m.Address
	}
	return nil
}

type A2SQueryResp struct {
	Servers              []*ServerInfo `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *A2SQueryResp) Reset()         { *m = A2SQueryResp{} }
func (m *A2SQueryResp) String() string { return proto.CompactTextString(m) }
func (*A2SQueryResp) ProtoMessage()    {}
func (*A2SQueryResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_67e52e54edde1764, []int{4}
}
func (m *A2SQueryResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *A2SQueryResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_A2SQueryResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *A2SQueryResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_A2SQueryResp.Merge(m, src)
}
func (m *A2SQueryResp) XXX_Size() int {
	return m.Size()
}
func (m *A2SQueryResp) XXX_DiscardUnknown() {
	xxx_messageInfo_A2SQueryResp.DiscardUnknown(m)
}

var xxx_messageInfo_A2SQueryResp proto.InternalMessageInfo

func (m *A2SQueryResp) GetServers() []*ServerInfo {
	if m != nil {
		return m.Servers
	}
	return nil
}

func init() {
	proto.RegisterType((*A2SInfo)(nil), "ncs.game.a2s.v1.A2SInfo")
	proto.RegisterType((*A2SPlayer)(nil), "ncs.game.a2s.v1.A2SPlayer")
	proto.RegisterType((*ServerInfo)(nil), "ncs.game.a2s.v1.ServerInfo")
	proto.RegisterType((*A2SQueryReq)(nil), "ncs.game.a2s.v1.A2SQueryReq")
	proto.RegisterType((*A2SQueryResp)(nil), "ncs.game.a2s.v1.A2SQueryResp")
}

func init() {
	proto.RegisterFile("app/game/a2s/api/grpc/v1/a2s.proto", fileDescriptor_67e52e54edde1764)
}

var fileDescriptor_67e52e54edde1764 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xfe, 0x1d, 0x27, 0x71, 0x3a, 0xee, 0xdf, 0x96, 0xa5, 0x82, 0x25, 0x40, 0xb0, 0x2c, 0x24,
	0x72, 0x40, 0xb1, 0x6a, 0xc4, 0x03, 0x04, 0x09, 0xa1, 0x5e, 0xaa, 0xd6, 0xe9, 0x89, 0x4b, 0xb4,
	0xb1, 0xb7, 0xc5, 0x6a, 0xec, 0x5d, 0x76, 0x5d, 0x53, 0xbf, 0x01, 0x8f, 0xc0, 0x85, 0xf7, 0xe1,
	0xc8, 0x23, 0xa0, 0xf2, 0x22, 0x68, 0x67, 0xe3, 0xa4, 0x85, 0xc2, 0x6d, 0xbe, 0x99, 0x6f, 0xbe,
	0xfd, 0x66, 0x77, 0x6c, 0x08, 0x99, 0x94, 0xd1, 0x39, 0x2b, 0x78, 0xc4, 0x62, 0x1d, 0x31, 0x99,
	0x47, 0xe7, 0x4a, 0xa6, 0x51, 0x7d, 0x60, 0xf0, 0x44, 0x2a, 0x51, 0x09, 0xb2, 0x5b, 0xa6, 0x7a,
	0x62, 0x38, 0x13, 0x93, 0xab, 0x0f, 0xc2, 0xaf, 0x5d, 0xf0, 0xa6, 0xf1, 0xec, 0xb0, 0x3c, 0x13,
	0x64, 0x08, 0x03, 0x64, 0xa5, 0x62, 0x49, 0x9d, 0xc0, 0x19, 0xf7, 0x92, 0x35, 0x26, 0x7b, 0xe0,
	0x16, 0x4c, 0xd2, 0x4e, 0xe0, 0x8c, 0xb7, 0x12, 0x13, 0x92, 0x07, 0xd0, 0x3f, 0x13, 0xcb, 0x8c,
	0x2b, 0xea, 0x62, 0x72, 0x85, 0x08, 0x81, 0xae, 0x39, 0x80, 0x76, 0x31, 0x8b, 0x31, 0xd9, 0x81,
	0x4e, 0x9e, 0xd1, 0x1e, 0x6a, 0x76, 0xf2, 0x8c, 0x50, 0xf0, 0xe4, 0x92, 0x35, 0x5c, 0x69, 0xda,
	0xc7, 0x64, 0x0b, 0xc9, 0x33, 0xf0, 0x0b, 0x76, 0x35, 0x6f, 0xab, 0x1e, 0x56, 0xa1, 0x60, 0x57,
	0xc7, 0x2b, 0x02, 0x81, 0xee, 0x42, 0x54, 0x9a, 0x0e, 0xb0, 0x82, 0xb1, 0x69, 0xd2, 0x5c, 0xd5,
	0x5c, 0xcd, 0xab, 0x46, 0x72, 0xba, 0x65, 0x9b, 0x6c, 0xea, 0xb4, 0x91, 0x9c, 0x04, 0xe0, 0xf3,
	0xb2, 0xce, 0x95, 0x28, 0x0b, 0x5e, 0x56, 0x14, 0x90, 0x70, 0x33, 0x45, 0x46, 0x00, 0x75, 0xae,
	0xf3, 0x45, 0xbe, 0xcc, 0xab, 0x86, 0xfa, 0x56, 0x61, 0x93, 0x31, 0xf3, 0xd7, 0x2c, 0xa5, 0xdb,
	0x58, 0x30, 0xa1, 0x99, 0xa1, 0xe6, 0x4a, 0xe7, 0xa2, 0xa4, 0xff, 0xe3, 0xa8, 0x2d, 0x34, 0x16,
	0xa5, 0x50, 0x15, 0xdd, 0xb1, 0x16, 0x4d, 0x4c, 0x1e, 0xc1, 0x40, 0x57, 0x9c, 0x15, 0xf3, 0x3c,
	0xa3, 0xbb, 0x81, 0x33, 0x76, 0x13, 0x0f, 0xf1, 0x61, 0x46, 0x9e, 0xc3, 0x8e, 0x16, 0x97, 0x2a,
	0xe5, 0xf3, 0xaa, 0x9e, 0x63, 0xe3, 0x1e, 0x36, 0x6e, 0xdb, 0xec, 0x69, 0x7d, 0x6c, 0x04, 0x6e,
	0xb1, 0x4a, 0x73, 0xc1, 0xf7, 0xf0, 0xd4, 0x35, 0xeb, 0xc8, 0x5c, 0xf4, 0x10, 0x06, 0x17, 0xbc,
	0xf9, 0x24, 0x54, 0xa6, 0x29, 0xc1, 0xfa, 0x1a, 0x93, 0x87, 0xe0, 0x99, 0xc7, 0x30, 0x0e, 0xee,
	0xa3, 0x83, 0xbe, 0x81, 0x87, 0x99, 0x69, 0xfa, 0x20, 0x74, 0x85, 0xa2, 0xfb, 0xb6, 0xa9, 0xc5,
	0xe1, 0x09, 0x6c, 0x4d, 0xe3, 0x99, 0xbd, 0x7c, 0x33, 0x18, 0x92, 0x1c, 0xfb, 0xb4, 0x26, 0x26,
	0xfb, 0xd0, 0xd3, 0xa9, 0x50, 0x1c, 0x57, 0xa3, 0x97, 0x58, 0x60, 0x24, 0xb3, 0x4b, 0xc5, 0x2a,
	0x73, 0x3b, 0x66, 0x3d, 0x3a, 0xc9, 0x1a, 0x87, 0x9f, 0x1d, 0x80, 0x19, 0xbe, 0x0d, 0x6e, 0x1d,
	0x05, 0x8f, 0x65, 0x99, 0xe2, 0x5a, 0xaf, 0x74, 0x5b, 0x48, 0x5e, 0x42, 0x37, 0x2f, 0xcf, 0x04,
	0x2a, 0xfb, 0x31, 0x9d, 0xfc, 0xb6, 0xbb, 0x93, 0xd5, 0xde, 0x26, 0xc8, 0x22, 0x31, 0xf4, 0xed,
	0xd6, 0x50, 0x37, 0x70, 0xc7, 0x7e, 0x3c, 0xbc, 0x8b, 0x6f, 0x07, 0x49, 0x56, 0xcc, 0xf0, 0x05,
	0xf8, 0xd3, 0x78, 0x76, 0x72, 0xc9, 0x55, 0x93, 0xf0, 0x8f, 0xb7, 0xad, 0xb8, 0x37, 0xac, 0x84,
	0x6f, 0x61, 0x7b, 0x43, 0xd4, 0x92, 0xbc, 0x06, 0xcf, 0xae, 0x97, 0x65, 0xfa, 0xf1, 0xe3, 0x3f,
	0x4e, 0xdb, 0x8c, 0x98, 0xb4, 0xdc, 0xf8, 0x08, 0xdc, 0x69, 0x3c, 0x23, 0xef, 0x60, 0xd0, 0xaa,
	0x91, 0x27, 0x77, 0xd9, 0x6c, 0x1d, 0x0d, 0x9f, 0xfe, 0xa3, 0xaa, 0xe5, 0x9b, 0xf8, 0xdb, 0xf5,
	0xc8, 0xf9, 0x7e, 0x3d, 0x72, 0x7e, 0x5c, 0x8f, 0x9c, 0x2f, 0x3f, 0x47, 0xff, 0xbd, 0x0f, 0x16,
	0x2c, 0xbd, 0xe0, 0x65, 0x16, 0xfd, 0xed, 0x67, 0xb0, 0xe8, 0xe3, 0x37, 0xfd, 0xea, 0x57, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xcd, 0xe2, 0x6c, 0xb5, 0x2f, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// A2SClient is the client API for A2S service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type A2SClient interface {
	A2SQuery(ctx context.Context, in *A2SQueryReq, opts ...grpc.CallOption) (*A2SQueryResp, error)
}

type a2SClient struct {
	cc *grpc.ClientConn
}

func NewA2SClient(cc *grpc.ClientConn) A2SClient {
	return &a2SClient{cc}
}

func (c *a2SClient) A2SQuery(ctx context.Context, in *A2SQueryReq, opts ...grpc.CallOption) (*A2SQueryResp, error) {
	out := new(A2SQueryResp)
	err := c.cc.Invoke(ctx, "/ncs.game.a2s.v1.A2S/A2SQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// A2SServer is the server API for A2S service.
type A2SServer interface {
	A2SQuery(context.Context, *A2SQueryReq) (*A2SQueryResp, error)
}

// UnimplementedA2SServer can be embedded to have forward compatible implementations.
type UnimplementedA2SServer struct {
}

func (*UnimplementedA2SServer) A2SQuery(ctx context.Context, req *A2SQueryReq) (*A2SQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method A2SQuery not implemented")
}

func RegisterA2SServer(s *grpc.Server, srv A2SServer) {
	s.RegisterService(&_A2S_serviceDesc, srv)
}

func _A2S_A2SQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(A2SQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(A2SServer).A2SQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.game.a2s.v1.A2S/A2SQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(A2SServer).A2SQuery(ctx, req.(*A2SQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _A2S_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.game.a2s.v1.A2S",
	HandlerType: (*A2SServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "A2SQuery",
			Handler:    _A2S_A2SQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/game/a2s/api/grpc/v1/a2s.proto",
}

func (m *A2SInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A2SInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A2SInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.GameId != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.GameId))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Keywords) > 0 {
		i -= len(m.Keywords)
		copy(dAtA[i:], m.Keywords)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Keywords)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.SourceTvName) > 0 {
		i -= len(m.SourceTvName)
		copy(dAtA[i:], m.SourceTvName)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.SourceTvName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.SourceTvPort != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.SourceTvPort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SteamId != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.SteamId))
		i--
		dAtA[i] = 0x78
	}
	if m.Port != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Vac != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Vac))
		i--
		dAtA[i] = 0x60
	}
	if m.Visibility != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Visibility))
		i--
		dAtA[i] = 0x58
	}
	if m.Environment != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Environment))
		i--
		dAtA[i] = 0x50
	}
	if m.ServerType != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.ServerType))
		i--
		dAtA[i] = 0x48
	}
	if m.Bots != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Bots))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxPlayers != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.MaxPlayers))
		i--
		dAtA[i] = 0x38
	}
	if m.Players != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Players))
		i--
		dAtA[i] = 0x30
	}
	if m.Id != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Game) > 0 {
		i -= len(m.Game)
		copy(dAtA[i:], m.Game)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Game)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Folder) > 0 {
		i -= len(m.Folder)
		copy(dAtA[i:], m.Folder)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Folder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Map) > 0 {
		i -= len(m.Map)
		copy(dAtA[i:], m.Map)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Map)))
		i--
		dAtA[i] = 0x12
	}
	if m.Protocol != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Protocol))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *A2SPlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A2SPlayer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A2SPlayer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Duration != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Duration))))
		i--
		dAtA[i] = 0x1d
	}
	if m.Score != 0 {
		i = encodeVarintA2S(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Player) > 0 {
		for iNdEx := len(m.Player) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Player[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2S(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA2S(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintA2S(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *A2SQueryReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A2SQueryReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A2SQueryReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Address) > 0 {
		for iNdEx := len(m.Address) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Address[iNdEx])
			copy(dAtA[i:], m.Address[iNdEx])
			i = encodeVarintA2S(dAtA, i, uint64(len(m.Address[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *A2SQueryResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *A2SQueryResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *A2SQueryResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Servers) > 0 {
		for iNdEx := len(m.Servers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Servers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA2S(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintA2S(dAtA []byte, offset int, v uint64) int {
	offset -= sovA2S(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *A2SInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Protocol != 0 {
		n += 1 + sovA2S(uint64(m.Protocol))
	}
	l = len(m.Map)
	if l > 0 {
		n += 1 + l + sovA2S(uint64(l))
	}
	l = len(m.Folder)
	if l > 0 {
		n += 1 + l + sovA2S(uint64(l))
	}
	l = len(m.Game)
	if l > 0 {
		n += 1 + l + sovA2S(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovA2S(uint64(m.Id))
	}
	if m.Players != 0 {
		n += 1 + sovA2S(uint64(m.Players))
	}
	if m.MaxPlayers != 0 {
		n += 1 + sovA2S(uint64(m.MaxPlayers))
	}
	if m.Bots != 0 {
		n += 1 + sovA2S(uint64(m.Bots))
	}
	if m.ServerType != 0 {
		n += 1 + sovA2S(uint64(m.ServerType))
	}
	if m.Environment != 0 {
		n += 1 + sovA2S(uint64(m.Environment))
	}
	if m.Visibility != 0 {
		n += 1 + sovA2S(uint64(m.Visibility))
	}
	if m.Vac != 0 {
		n += 1 + sovA2S(uint64(m.Vac))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovA2S(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovA2S(uint64(m.Port))
	}
	if m.SteamId != 0 {
		n += 1 + sovA2S(uint64(m.SteamId))
	}
	if m.SourceTvPort != 0 {
		n += 2 + sovA2S(uint64(m.SourceTvPort))
	}
	l = len(m.SourceTvName)
	if l > 0 {
		n += 2 + l + sovA2S(uint64(l))
	}
	l = len(m.Keywords)
	if l > 0 {
		n += 2 + l + sovA2S(uint64(l))
	}
	if m.GameId != 0 {
		n += 2 + sovA2S(uint64(m.GameId))
	}
	l = len(m.Hostname)
	if l > 0 {
		n += 2 + l + sovA2S(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *A2SPlayer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovA2S(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovA2S(uint64(m.Score))
	}
	if m.Duration != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovA2S(uint64(l))
	}
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovA2S(uint64(l))
	}
	if len(m.Player) > 0 {
		for _, e := range m.Player {
			l = e.Size()
			n += 1 + l + sovA2S(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *A2SQueryReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Address) > 0 {
		for _, s := range m.Address {
			l = len(s)
			n += 1 + l + sovA2S(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *A2SQueryResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Servers) > 0 {
		for _, e := range m.Servers {
			l = e.Size()
			n += 1 + l + sovA2S(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovA2S(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozA2S(x uint64) (n int) {
	return sovA2S(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *A2SInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2S
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A2SInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A2SInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Protocol", wireType)
			}
			m.Protocol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Protocol |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Map", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Map = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Folder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Folder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Game = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			m.Players = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Players |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPlayers", wireType)
			}
			m.MaxPlayers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPlayers |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bots", wireType)
			}
			m.Bots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bots |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerType", wireType)
			}
			m.ServerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServerType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			m.Environment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Environment |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Visibility", wireType)
			}
			m.Visibility = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Visibility |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vac", wireType)
			}
			m.Vac = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vac |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SteamId", wireType)
			}
			m.SteamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SteamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTvPort", wireType)
			}
			m.SourceTvPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceTvPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTvName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTvName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			m.GameId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2S(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A2SPlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2S
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A2SPlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A2SPlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Duration = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipA2S(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2S
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &A2SInfo{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Player = append(m.Player, &A2SPlayer{})
			if err := m.Player[len(m.Player)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2S(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A2SQueryReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2S
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A2SQueryReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A2SQueryReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2S(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *A2SQueryResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA2S
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: A2SQueryResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: A2SQueryResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA2S
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA2S
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servers = append(m.Servers, &ServerInfo{})
			if err := m.Servers[len(m.Servers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA2S(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA2S
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipA2S(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowA2S
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA2S
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthA2S
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupA2S
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthA2S
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthA2S        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowA2S          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupA2S = fmt.Errorf("proto: unexpected end of group")
)
