// Code generated by MockGen. DO NOT EDIT.
// Source: app/bot/kaiheila/api/grpc/v1/kaiheila_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockKaiheilaClient is a mock of KaiheilaClient interface.
type MockKaiheilaClient struct {
	ctrl     *gomock.Controller
	recorder *MockKaiheilaClientMockRecorder
}

// MockKaiheilaClientMockRecorder is the mock recorder for MockKaiheilaClient.
type MockKaiheilaClientMockRecorder struct {
	mock *MockKaiheilaClient
}

// NewMockKaiheilaClient creates a new mock instance.
func NewMockKaiheilaClient(ctrl *gomock.Controller) *MockKaiheilaClient {
	mock := &MockKaiheilaClient{ctrl: ctrl}
	mock.recorder = &MockKaiheilaClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaiheilaClient) EXPECT() *MockKaiheilaClientMockRecorder {
	return m.recorder
}

// SendChannelMsg mocks base method.
func (m *MockKaiheilaClient) SendChannelMsg(ctx context.Context, in *SendMessageReq, opts ...grpc.CallOption) (*SendMessageResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendChannelMsg", varargs...)
	ret0, _ := ret[0].(*SendMessageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelMsg indicates an expected call of SendChannelMsg.
func (mr *MockKaiheilaClientMockRecorder) SendChannelMsg(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMsg", reflect.TypeOf((*MockKaiheilaClient)(nil).SendChannelMsg), varargs...)
}

// MockKaiheilaServer is a mock of KaiheilaServer interface.
type MockKaiheilaServer struct {
	ctrl     *gomock.Controller
	recorder *MockKaiheilaServerMockRecorder
}

// MockKaiheilaServerMockRecorder is the mock recorder for MockKaiheilaServer.
type MockKaiheilaServerMockRecorder struct {
	mock *MockKaiheilaServer
}

// NewMockKaiheilaServer creates a new mock instance.
func NewMockKaiheilaServer(ctrl *gomock.Controller) *MockKaiheilaServer {
	mock := &MockKaiheilaServer{ctrl: ctrl}
	mock.recorder = &MockKaiheilaServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaiheilaServer) EXPECT() *MockKaiheilaServerMockRecorder {
	return m.recorder
}

// SendChannelMsg mocks base method.
func (m *MockKaiheilaServer) SendChannelMsg(arg0 context.Context, arg1 *SendMessageReq) (*SendMessageResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendChannelMsg", arg0, arg1)
	ret0, _ := ret[0].(*SendMessageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendChannelMsg indicates an expected call of SendChannelMsg.
func (mr *MockKaiheilaServerMockRecorder) SendChannelMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendChannelMsg", reflect.TypeOf((*MockKaiheilaServer)(nil).SendChannelMsg), arg0, arg1)
}

// mustEmbedUnimplementedKaiheilaServer mocks base method.
func (m *MockKaiheilaServer) mustEmbedUnimplementedKaiheilaServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKaiheilaServer")
}

// mustEmbedUnimplementedKaiheilaServer indicates an expected call of mustEmbedUnimplementedKaiheilaServer.
func (mr *MockKaiheilaServerMockRecorder) mustEmbedUnimplementedKaiheilaServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKaiheilaServer", reflect.TypeOf((*MockKaiheilaServer)(nil).mustEmbedUnimplementedKaiheilaServer))
}

// MockUnsafeKaiheilaServer is a mock of UnsafeKaiheilaServer interface.
type MockUnsafeKaiheilaServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeKaiheilaServerMockRecorder
}

// MockUnsafeKaiheilaServerMockRecorder is the mock recorder for MockUnsafeKaiheilaServer.
type MockUnsafeKaiheilaServerMockRecorder struct {
	mock *MockUnsafeKaiheilaServer
}

// NewMockUnsafeKaiheilaServer creates a new mock instance.
func NewMockUnsafeKaiheilaServer(ctrl *gomock.Controller) *MockUnsafeKaiheilaServer {
	mock := &MockUnsafeKaiheilaServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeKaiheilaServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeKaiheilaServer) EXPECT() *MockUnsafeKaiheilaServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedKaiheilaServer mocks base method.
func (m *MockUnsafeKaiheilaServer) mustEmbedUnimplementedKaiheilaServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedKaiheilaServer")
}

// mustEmbedUnimplementedKaiheilaServer indicates an expected call of mustEmbedUnimplementedKaiheilaServer.
func (mr *MockUnsafeKaiheilaServerMockRecorder) mustEmbedUnimplementedKaiheilaServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedKaiheilaServer", reflect.TypeOf((*MockUnsafeKaiheilaServer)(nil).mustEmbedUnimplementedKaiheilaServer))
}
