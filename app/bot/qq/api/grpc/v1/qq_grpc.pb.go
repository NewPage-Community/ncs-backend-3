// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QQClient is the client API for QQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QQClient interface {
	SendGroupMessage(ctx context.Context, in *SendGroupMessageReq, opts ...grpc.CallOption) (*SendGroupMessageResp, error)
}

type qQClient struct {
	cc grpc.ClientConnInterface
}

func NewQQClient(cc grpc.ClientConnInterface) QQClient {
	return &qQClient{cc}
}

func (c *qQClient) SendGroupMessage(ctx context.Context, in *SendGroupMessageReq, opts ...grpc.CallOption) (*SendGroupMessageResp, error) {
	out := new(SendGroupMessageResp)
	err := c.cc.Invoke(ctx, "/ncs.bot.qq.v1.QQ/SendGroupMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QQServer is the server API for QQ service.
// All implementations must embed UnimplementedQQServer
// for forward compatibility
type QQServer interface {
	SendGroupMessage(context.Context, *SendGroupMessageReq) (*SendGroupMessageResp, error)
	mustEmbedUnimplementedQQServer()
}

// UnimplementedQQServer must be embedded to have forward compatible implementations.
type UnimplementedQQServer struct {
}

func (UnimplementedQQServer) SendGroupMessage(context.Context, *SendGroupMessageReq) (*SendGroupMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGroupMessage not implemented")
}
func (UnimplementedQQServer) mustEmbedUnimplementedQQServer() {}

// UnsafeQQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QQServer will
// result in compilation errors.
type UnsafeQQServer interface {
	mustEmbedUnimplementedQQServer()
}

func RegisterQQServer(s grpc.ServiceRegistrar, srv QQServer) {
	s.RegisterService(&QQ_ServiceDesc, srv)
}

func _QQ_SendGroupMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGroupMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QQServer).SendGroupMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.bot.qq.v1.QQ/SendGroupMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QQServer).SendGroupMessage(ctx, req.(*SendGroupMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QQ_ServiceDesc is the grpc.ServiceDesc for QQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.bot.qq.v1.QQ",
	HandlerType: (*QQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendGroupMessage",
			Handler:    _QQ_SendGroupMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/bot/qq/api/grpc/v1/qq.proto",
}
