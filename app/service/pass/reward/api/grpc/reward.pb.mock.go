// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/pass/reward/api/grpc/reward.pb.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockRewardClient is a mock of RewardClient interface
type MockRewardClient struct {
	ctrl     *gomock.Controller
	recorder *MockRewardClientMockRecorder
}

// MockRewardClientMockRecorder is the mock recorder for MockRewardClient
type MockRewardClientMockRecorder struct {
	mock *MockRewardClient
}

// NewMockRewardClient creates a new mock instance
func NewMockRewardClient(ctrl *gomock.Controller) *MockRewardClient {
	mock := &MockRewardClient{ctrl: ctrl}
	mock.recorder = &MockRewardClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRewardClient) EXPECT() *MockRewardClientMockRecorder {
	return m.recorder
}

// GetRewards mocks base method
func (m *MockRewardClient) GetRewards(ctx context.Context, in *GetRewardsReq, opts ...grpc.CallOption) (*GetRewardsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRewards", varargs...)
	ret0, _ := ret[0].(*GetRewardsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewards indicates an expected call of GetRewards
func (mr *MockRewardClientMockRecorder) GetRewards(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewards", reflect.TypeOf((*MockRewardClient)(nil).GetRewards), varargs...)
}

// MockRewardServer is a mock of RewardServer interface
type MockRewardServer struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServerMockRecorder
}

// MockRewardServerMockRecorder is the mock recorder for MockRewardServer
type MockRewardServerMockRecorder struct {
	mock *MockRewardServer
}

// NewMockRewardServer creates a new mock instance
func NewMockRewardServer(ctrl *gomock.Controller) *MockRewardServer {
	mock := &MockRewardServer{ctrl: ctrl}
	mock.recorder = &MockRewardServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRewardServer) EXPECT() *MockRewardServerMockRecorder {
	return m.recorder
}

// GetRewards mocks base method
func (m *MockRewardServer) GetRewards(arg0 context.Context, arg1 *GetRewardsReq) (*GetRewardsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewards", arg0, arg1)
	ret0, _ := ret[0].(*GetRewardsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewards indicates an expected call of GetRewards
func (mr *MockRewardServerMockRecorder) GetRewards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewards", reflect.TypeOf((*MockRewardServer)(nil).GetRewards), arg0, arg1)
}
