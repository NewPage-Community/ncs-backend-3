// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/donate/api/grpc/donate.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PAY_TYPE int32

const (
	PAY_TYPE_NULL   PAY_TYPE = 0
	PAY_TYPE_ALIPAY PAY_TYPE = 1
	PAY_TYPE_WEPAY  PAY_TYPE = 2
)

var PAY_TYPE_name = map[int32]string{
	0: "NULL",
	1: "ALIPAY",
	2: "WEPAY",
}

var PAY_TYPE_value = map[string]int32{
	"NULL":   0,
	"ALIPAY": 1,
	"WEPAY":  2,
}

func (x PAY_TYPE) String() string {
	return proto.EnumName(PAY_TYPE_name, int32(x))
}

func (PAY_TYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{0}
}

type CreateDonateReq struct {
	SteamId              int64    `protobuf:"varint,1,opt,name=steam_id,json=steamId,proto3" json:"steam_id,omitempty"`
	Amount               int32    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Payment              PAY_TYPE `protobuf:"varint,3,opt,name=payment,proto3,enum=ncs.donate.PAY_TYPE" json:"payment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDonateReq) Reset()         { *m = CreateDonateReq{} }
func (m *CreateDonateReq) String() string { return proto.CompactTextString(m) }
func (*CreateDonateReq) ProtoMessage()    {}
func (*CreateDonateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{0}
}
func (m *CreateDonateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDonateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDonateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDonateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDonateReq.Merge(m, src)
}
func (m *CreateDonateReq) XXX_Size() int {
	return m.Size()
}
func (m *CreateDonateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDonateReq.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDonateReq proto.InternalMessageInfo

func (m *CreateDonateReq) GetSteamId() int64 {
	if m != nil {
		return m.SteamId
	}
	return 0
}

func (m *CreateDonateReq) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *CreateDonateReq) GetPayment() PAY_TYPE {
	if m != nil {
		return m.Payment
	}
	return PAY_TYPE_NULL
}

type CreateDonateResp struct {
	OutTradeNo           string   `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	QrCode               string   `protobuf:"bytes,2,opt,name=qr_code,json=qrCode,proto3" json:"qr_code,omitempty"`
	Payment              PAY_TYPE `protobuf:"varint,3,opt,name=payment,proto3,enum=ncs.donate.PAY_TYPE" json:"payment,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateDonateResp) Reset()         { *m = CreateDonateResp{} }
func (m *CreateDonateResp) String() string { return proto.CompactTextString(m) }
func (*CreateDonateResp) ProtoMessage()    {}
func (*CreateDonateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{1}
}
func (m *CreateDonateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDonateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDonateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDonateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDonateResp.Merge(m, src)
}
func (m *CreateDonateResp) XXX_Size() int {
	return m.Size()
}
func (m *CreateDonateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDonateResp.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDonateResp proto.InternalMessageInfo

func (m *CreateDonateResp) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *CreateDonateResp) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *CreateDonateResp) GetPayment() PAY_TYPE {
	if m != nil {
		return m.Payment
	}
	return PAY_TYPE_NULL
}

type QueryDonateReq struct {
	OutTradeNo           string   `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryDonateReq) Reset()         { *m = QueryDonateReq{} }
func (m *QueryDonateReq) String() string { return proto.CompactTextString(m) }
func (*QueryDonateReq) ProtoMessage()    {}
func (*QueryDonateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{2}
}
func (m *QueryDonateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDonateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDonateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDonateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDonateReq.Merge(m, src)
}
func (m *QueryDonateReq) XXX_Size() int {
	return m.Size()
}
func (m *QueryDonateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDonateReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDonateReq proto.InternalMessageInfo

func (m *QueryDonateReq) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

type QueryDonateResp struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Amount               int32    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Status               int32    `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
	CreateAt             int64    `protobuf:"varint,4,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryDonateResp) Reset()         { *m = QueryDonateResp{} }
func (m *QueryDonateResp) String() string { return proto.CompactTextString(m) }
func (*QueryDonateResp) ProtoMessage()    {}
func (*QueryDonateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{3}
}
func (m *QueryDonateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDonateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDonateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDonateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDonateResp.Merge(m, src)
}
func (m *QueryDonateResp) XXX_Size() int {
	return m.Size()
}
func (m *QueryDonateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDonateResp.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDonateResp proto.InternalMessageInfo

func (m *QueryDonateResp) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *QueryDonateResp) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *QueryDonateResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *QueryDonateResp) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

type GetDonateListReq struct {
	StartTime            int64    `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              int64    `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetDonateListReq) Reset()         { *m = GetDonateListReq{} }
func (m *GetDonateListReq) String() string { return proto.CompactTextString(m) }
func (*GetDonateListReq) ProtoMessage()    {}
func (*GetDonateListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{4}
}
func (m *GetDonateListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDonateListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDonateListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDonateListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDonateListReq.Merge(m, src)
}
func (m *GetDonateListReq) XXX_Size() int {
	return m.Size()
}
func (m *GetDonateListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDonateListReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetDonateListReq proto.InternalMessageInfo

func (m *GetDonateListReq) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *GetDonateListReq) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type GetDonateListResp struct {
	List                 []*QueryDonateResp `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetDonateListResp) Reset()         { *m = GetDonateListResp{} }
func (m *GetDonateListResp) String() string { return proto.CompactTextString(m) }
func (*GetDonateListResp) ProtoMessage()    {}
func (*GetDonateListResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{5}
}
func (m *GetDonateListResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDonateListResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDonateListResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDonateListResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDonateListResp.Merge(m, src)
}
func (m *GetDonateListResp) XXX_Size() int {
	return m.Size()
}
func (m *GetDonateListResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDonateListResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetDonateListResp proto.InternalMessageInfo

func (m *GetDonateListResp) GetList() []*QueryDonateResp {
	if m != nil {
		return m.List
	}
	return nil
}

type AddDonateReq struct {
	SteamId              int64    `protobuf:"varint,1,opt,name=steam_id,json=steamId,proto3" json:"steam_id,omitempty"`
	Amount               int32    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDonateReq) Reset()         { *m = AddDonateReq{} }
func (m *AddDonateReq) String() string { return proto.CompactTextString(m) }
func (*AddDonateReq) ProtoMessage()    {}
func (*AddDonateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{6}
}
func (m *AddDonateReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDonateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDonateReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDonateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDonateReq.Merge(m, src)
}
func (m *AddDonateReq) XXX_Size() int {
	return m.Size()
}
func (m *AddDonateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDonateReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddDonateReq proto.InternalMessageInfo

func (m *AddDonateReq) GetSteamId() int64 {
	if m != nil {
		return m.SteamId
	}
	return 0
}

func (m *AddDonateReq) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type AddDonateResp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddDonateResp) Reset()         { *m = AddDonateResp{} }
func (m *AddDonateResp) String() string { return proto.CompactTextString(m) }
func (*AddDonateResp) ProtoMessage()    {}
func (*AddDonateResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d25c9edf5f686f9e, []int{7}
}
func (m *AddDonateResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddDonateResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddDonateResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddDonateResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddDonateResp.Merge(m, src)
}
func (m *AddDonateResp) XXX_Size() int {
	return m.Size()
}
func (m *AddDonateResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddDonateResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddDonateResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ncs.donate.PAY_TYPE", PAY_TYPE_name, PAY_TYPE_value)
	proto.RegisterType((*CreateDonateReq)(nil), "ncs.donate.CreateDonateReq")
	proto.RegisterType((*CreateDonateResp)(nil), "ncs.donate.CreateDonateResp")
	proto.RegisterType((*QueryDonateReq)(nil), "ncs.donate.QueryDonateReq")
	proto.RegisterType((*QueryDonateResp)(nil), "ncs.donate.QueryDonateResp")
	proto.RegisterType((*GetDonateListReq)(nil), "ncs.donate.GetDonateListReq")
	proto.RegisterType((*GetDonateListResp)(nil), "ncs.donate.GetDonateListResp")
	proto.RegisterType((*AddDonateReq)(nil), "ncs.donate.AddDonateReq")
	proto.RegisterType((*AddDonateResp)(nil), "ncs.donate.AddDonateResp")
}

func init() {
	proto.RegisterFile("app/service/donate/api/grpc/donate.proto", fileDescriptor_d25c9edf5f686f9e)
}

var fileDescriptor_d25c9edf5f686f9e = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x8a, 0xda, 0x40,
	0x14, 0xde, 0xa8, 0x9b, 0x35, 0x67, 0x7f, 0xb4, 0xd3, 0x62, 0x63, 0x74, 0x45, 0xc2, 0x5e, 0xc8,
	0x16, 0x0c, 0xd8, 0xbb, 0x5e, 0x35, 0x75, 0x97, 0x22, 0xc8, 0x62, 0x83, 0xa5, 0xb8, 0x37, 0x61,
	0x6a, 0x06, 0x09, 0x68, 0x66, 0xcc, 0x4c, 0x0a, 0x8b, 0x78, 0xd3, 0x57, 0xe8, 0x45, 0xfb, 0x28,
	0x7d, 0x84, 0x5e, 0x16, 0xfa, 0x02, 0xc5, 0xf6, 0x41, 0x4a, 0x26, 0x66, 0x8d, 0x82, 0x5b, 0x4a,
	0xef, 0x72, 0xce, 0xf9, 0x32, 0xdf, 0xc9, 0xf7, 0x7d, 0x19, 0x68, 0x61, 0xc6, 0x2c, 0x4e, 0xc2,
	0x0f, 0xfe, 0x98, 0x58, 0x1e, 0x0d, 0xb0, 0x20, 0x16, 0x66, 0xbe, 0x35, 0x09, 0xd9, 0x78, 0x5d,
	0xb7, 0x59, 0x48, 0x05, 0x45, 0x10, 0x8c, 0x79, 0x3b, 0xe9, 0x18, 0xf5, 0x09, 0xa5, 0x93, 0x69,
	0x82, 0xc4, 0x41, 0x40, 0x05, 0x16, 0x3e, 0x0d, 0x78, 0x82, 0x34, 0x05, 0x94, 0xba, 0x21, 0xc1,
	0x82, 0x5c, 0x49, 0xb4, 0x43, 0xe6, 0xa8, 0x0a, 0x45, 0x2e, 0x08, 0x9e, 0xb9, 0xbe, 0xa7, 0x2b,
	0x4d, 0xa5, 0x95, 0x77, 0x8e, 0x64, 0xdd, 0xf3, 0x50, 0x05, 0x54, 0x3c, 0xa3, 0x51, 0x20, 0xf4,
	0x5c, 0x53, 0x69, 0x1d, 0x3a, 0xeb, 0x0a, 0xb5, 0xe1, 0x88, 0xe1, 0xbb, 0x19, 0x09, 0x84, 0x9e,
	0x6f, 0x2a, 0xad, 0xb3, 0xce, 0x93, 0xf6, 0x66, 0x83, 0xf6, 0xc0, 0x1e, 0xb9, 0xc3, 0xd1, 0xe0,
	0xda, 0x49, 0x41, 0xe6, 0x12, 0xca, 0xdb, 0xac, 0x9c, 0xa1, 0x26, 0x9c, 0xd0, 0x48, 0xb8, 0x22,
	0xc4, 0x1e, 0x71, 0x03, 0x2a, 0xa9, 0x35, 0x07, 0x68, 0x24, 0x86, 0x71, 0xeb, 0x86, 0xa2, 0xa7,
	0x70, 0x34, 0x0f, 0xdd, 0x31, 0xf5, 0x88, 0xa4, 0xd7, 0x1c, 0x75, 0x1e, 0x76, 0xa9, 0x47, 0xfe,
	0x99, 0xbe, 0x03, 0x67, 0x6f, 0x22, 0x12, 0xde, 0x6d, 0xbe, 0xf9, 0xaf, 0xe4, 0x26, 0x83, 0xd2,
	0xd6, 0x3b, 0x9c, 0xa1, 0x32, 0xe4, 0xa3, 0x7b, 0x8d, 0xe2, 0xc7, 0xbd, 0xfa, 0x54, 0x40, 0xe5,
	0x02, 0x8b, 0x88, 0xcb, 0xfd, 0x0e, 0x9d, 0x75, 0x85, 0x6a, 0xa0, 0x8d, 0xa5, 0x0e, 0x2e, 0x16,
	0x7a, 0x41, 0x9e, 0x53, 0x4c, 0x1a, 0xb6, 0x30, 0xfb, 0x50, 0x7e, 0x4d, 0x44, 0xc2, 0xd7, 0xf7,
	0xb9, 0x88, 0xf7, 0x3c, 0x07, 0xe0, 0x02, 0x87, 0xc2, 0x15, 0xfe, 0x8c, 0xac, 0x99, 0x35, 0xd9,
	0x19, 0xfa, 0x33, 0x12, 0x5b, 0x47, 0x02, 0x2f, 0x19, 0xe6, 0x12, 0xeb, 0x48, 0xe0, 0xc5, 0x23,
	0xf3, 0x0a, 0x1e, 0xed, 0x9c, 0xc6, 0x19, 0xb2, 0xa0, 0x30, 0xf5, 0xb9, 0xd0, 0x95, 0x66, 0xbe,
	0x75, 0xdc, 0xa9, 0x65, 0x55, 0xdb, 0xf9, 0x58, 0x47, 0x02, 0x4d, 0x1b, 0x4e, 0x6c, 0xcf, 0xfb,
	0x9f, 0xac, 0x98, 0x25, 0x38, 0xcd, 0x1c, 0xc1, 0xd9, 0xe5, 0x33, 0x28, 0xa6, 0x16, 0xa1, 0x22,
	0x14, 0x6e, 0xde, 0xf6, 0xfb, 0xe5, 0x03, 0x04, 0xa0, 0xda, 0xfd, 0xde, 0xc0, 0x1e, 0x95, 0x15,
	0xa4, 0xc1, 0xe1, 0xbb, 0xeb, 0xf8, 0x31, 0xd7, 0xf9, 0x9a, 0x07, 0x35, 0x79, 0x17, 0x79, 0x70,
	0x92, 0x0d, 0x11, 0xda, 0x5a, 0x7f, 0x27, 0xd4, 0x46, 0x7d, 0xff, 0x90, 0x33, 0xb3, 0xfa, 0xf1,
	0xc7, 0xef, 0x4f, 0xb9, 0xc7, 0xe6, 0x59, 0xfa, 0x5b, 0x25, 0x26, 0xbc, 0x50, 0x2e, 0xd1, 0x14,
	0x8e, 0x33, 0x52, 0x20, 0x63, 0xaf, 0x46, 0x73, 0xe3, 0x21, 0xfd, 0xcc, 0x0b, 0x49, 0xd1, 0x40,
	0xf5, 0x94, 0x62, 0x1e, 0x03, 0xac, 0x45, 0x36, 0x76, 0x4b, 0xf4, 0x59, 0x81, 0xd3, 0x2d, 0x9b,
	0xd0, 0xd6, 0xe2, 0xbb, 0x79, 0x30, 0xce, 0x1f, 0x98, 0x72, 0x66, 0xf6, 0x24, 0x69, 0x17, 0x5d,
	0xa4, 0xa4, 0xb1, 0x89, 0xd6, 0x62, 0x13, 0xa1, 0xa5, 0xb5, 0x48, 0x03, 0xb3, 0xbc, 0xad, 0xa1,
	0xea, 0x5e, 0x1c, 0x7a, 0x09, 0xda, 0xbd, 0x6d, 0x48, 0xcf, 0xd2, 0x66, 0x03, 0x61, 0x54, 0xf7,
	0x4c, 0x38, 0x7b, 0x55, 0xf9, 0xb6, 0x6a, 0x28, 0xdf, 0x57, 0x0d, 0xe5, 0xe7, 0xaa, 0xa1, 0x7c,
	0xf9, 0xd5, 0x38, 0xb8, 0x2d, 0xc4, 0x37, 0xd7, 0x7b, 0x55, 0xde, 0x44, 0xcf, 0xff, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xeb, 0x57, 0xc9, 0x3c, 0xdf, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DonateClient is the client API for Donate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DonateClient interface {
	CreateDonate(ctx context.Context, in *CreateDonateReq, opts ...grpc.CallOption) (*CreateDonateResp, error)
	QueryDonate(ctx context.Context, in *QueryDonateReq, opts ...grpc.CallOption) (*QueryDonateResp, error)
	GetDonateList(ctx context.Context, in *GetDonateListReq, opts ...grpc.CallOption) (*GetDonateListResp, error)
	AddDonate(ctx context.Context, in *AddDonateReq, opts ...grpc.CallOption) (*AddDonateResp, error)
}

type donateClient struct {
	cc *grpc.ClientConn
}

func NewDonateClient(cc *grpc.ClientConn) DonateClient {
	return &donateClient{cc}
}

func (c *donateClient) CreateDonate(ctx context.Context, in *CreateDonateReq, opts ...grpc.CallOption) (*CreateDonateResp, error) {
	out := new(CreateDonateResp)
	err := c.cc.Invoke(ctx, "/ncs.donate.Donate/CreateDonate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donateClient) QueryDonate(ctx context.Context, in *QueryDonateReq, opts ...grpc.CallOption) (*QueryDonateResp, error) {
	out := new(QueryDonateResp)
	err := c.cc.Invoke(ctx, "/ncs.donate.Donate/QueryDonate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donateClient) GetDonateList(ctx context.Context, in *GetDonateListReq, opts ...grpc.CallOption) (*GetDonateListResp, error) {
	out := new(GetDonateListResp)
	err := c.cc.Invoke(ctx, "/ncs.donate.Donate/GetDonateList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *donateClient) AddDonate(ctx context.Context, in *AddDonateReq, opts ...grpc.CallOption) (*AddDonateResp, error) {
	out := new(AddDonateResp)
	err := c.cc.Invoke(ctx, "/ncs.donate.Donate/AddDonate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DonateServer is the server API for Donate service.
type DonateServer interface {
	CreateDonate(context.Context, *CreateDonateReq) (*CreateDonateResp, error)
	QueryDonate(context.Context, *QueryDonateReq) (*QueryDonateResp, error)
	GetDonateList(context.Context, *GetDonateListReq) (*GetDonateListResp, error)
	AddDonate(context.Context, *AddDonateReq) (*AddDonateResp, error)
}

// UnimplementedDonateServer can be embedded to have forward compatible implementations.
type UnimplementedDonateServer struct {
}

func (*UnimplementedDonateServer) CreateDonate(ctx context.Context, req *CreateDonateReq) (*CreateDonateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDonate not implemented")
}
func (*UnimplementedDonateServer) QueryDonate(ctx context.Context, req *QueryDonateReq) (*QueryDonateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDonate not implemented")
}
func (*UnimplementedDonateServer) GetDonateList(ctx context.Context, req *GetDonateListReq) (*GetDonateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDonateList not implemented")
}
func (*UnimplementedDonateServer) AddDonate(ctx context.Context, req *AddDonateReq) (*AddDonateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDonate not implemented")
}

func RegisterDonateServer(s *grpc.Server, srv DonateServer) {
	s.RegisterService(&_Donate_serviceDesc, srv)
}

func _Donate_CreateDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDonateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonateServer).CreateDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.donate.Donate/CreateDonate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonateServer).CreateDonate(ctx, req.(*CreateDonateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Donate_QueryDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDonateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonateServer).QueryDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.donate.Donate/QueryDonate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonateServer).QueryDonate(ctx, req.(*QueryDonateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Donate_GetDonateList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDonateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonateServer).GetDonateList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.donate.Donate/GetDonateList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonateServer).GetDonateList(ctx, req.(*GetDonateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Donate_AddDonate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDonateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DonateServer).AddDonate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.donate.Donate/AddDonate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DonateServer).AddDonate(ctx, req.(*AddDonateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Donate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.donate.Donate",
	HandlerType: (*DonateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDonate",
			Handler:    _Donate_CreateDonate_Handler,
		},
		{
			MethodName: "QueryDonate",
			Handler:    _Donate_QueryDonate_Handler,
		},
		{
			MethodName: "GetDonateList",
			Handler:    _Donate_GetDonateList_Handler,
		},
		{
			MethodName: "AddDonate",
			Handler:    _Donate_AddDonate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/donate/api/grpc/donate.proto",
}

func (m *CreateDonateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDonateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDonateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payment != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Payment))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.SteamId != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.SteamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateDonateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDonateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDonateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Payment != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Payment))
		i--
		dAtA[i] = 0x18
	}
	if len(m.QrCode) > 0 {
		i -= len(m.QrCode)
		copy(dAtA[i:], m.QrCode)
		i = encodeVarintDonate(dAtA, i, uint64(len(m.QrCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutTradeNo) > 0 {
		i -= len(m.OutTradeNo)
		copy(dAtA[i:], m.OutTradeNo)
		i = encodeVarintDonate(dAtA, i, uint64(len(m.OutTradeNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDonateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDonateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDonateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OutTradeNo) > 0 {
		i -= len(m.OutTradeNo)
		copy(dAtA[i:], m.OutTradeNo)
		i = encodeVarintDonate(dAtA, i, uint64(len(m.OutTradeNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDonateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDonateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDonateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CreateAt != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.CreateAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Status != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Amount != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDonateListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDonateListReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDonateListReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTime != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.EndTime))
		i--
		dAtA[i] = 0x10
	}
	if m.StartTime != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetDonateListResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDonateListResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDonateListResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDonate(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddDonateReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDonateReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDonateReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Amount != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if m.SteamId != 0 {
		i = encodeVarintDonate(dAtA, i, uint64(m.SteamId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddDonateResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddDonateResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddDonateResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintDonate(dAtA []byte, offset int, v uint64) int {
	offset -= sovDonate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateDonateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SteamId != 0 {
		n += 1 + sovDonate(uint64(m.SteamId))
	}
	if m.Amount != 0 {
		n += 1 + sovDonate(uint64(m.Amount))
	}
	if m.Payment != 0 {
		n += 1 + sovDonate(uint64(m.Payment))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateDonateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutTradeNo)
	if l > 0 {
		n += 1 + l + sovDonate(uint64(l))
	}
	l = len(m.QrCode)
	if l > 0 {
		n += 1 + l + sovDonate(uint64(l))
	}
	if m.Payment != 0 {
		n += 1 + sovDonate(uint64(m.Payment))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryDonateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutTradeNo)
	if l > 0 {
		n += 1 + l + sovDonate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *QueryDonateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovDonate(uint64(m.Uid))
	}
	if m.Amount != 0 {
		n += 1 + sovDonate(uint64(m.Amount))
	}
	if m.Status != 0 {
		n += 1 + sovDonate(uint64(m.Status))
	}
	if m.CreateAt != 0 {
		n += 1 + sovDonate(uint64(m.CreateAt))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDonateListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartTime != 0 {
		n += 1 + sovDonate(uint64(m.StartTime))
	}
	if m.EndTime != 0 {
		n += 1 + sovDonate(uint64(m.EndTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetDonateListResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovDonate(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddDonateReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SteamId != 0 {
		n += 1 + sovDonate(uint64(m.SteamId))
	}
	if m.Amount != 0 {
		n += 1 + sovDonate(uint64(m.Amount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddDonateResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDonate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDonate(x uint64) (n int) {
	return sovDonate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateDonateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDonateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDonateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SteamId", wireType)
			}
			m.SteamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SteamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= PAY_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDonateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDonateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDonateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDonate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDonate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QrCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payment", wireType)
			}
			m.Payment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Payment |= PAY_TYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDonateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDonateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDonateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDonate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDonateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDonateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDonateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateAt", wireType)
			}
			m.CreateAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDonateListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDonateListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDonateListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			m.EndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDonateListResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDonateListResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDonateListResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDonate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDonate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &QueryDonateResp{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDonateReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDonateReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDonateReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SteamId", wireType)
			}
			m.SteamId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SteamId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddDonateResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddDonateResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddDonateResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDonate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthDonate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDonate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDonate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDonate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDonate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDonate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDonate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDonate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDonate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDonate = fmt.Errorf("proto: unexpected end of group")
)
