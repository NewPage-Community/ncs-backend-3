// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/auth/steam/api/grpc/v1/steam.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockSteamClient is a mock of SteamClient interface
type MockSteamClient struct {
	ctrl     *gomock.Controller
	recorder *MockSteamClientMockRecorder
}

// MockSteamClientMockRecorder is the mock recorder for MockSteamClient
type MockSteamClientMockRecorder struct {
	mock *MockSteamClient
}

// NewMockSteamClient creates a new mock instance
func NewMockSteamClient(ctrl *gomock.Controller) *MockSteamClient {
	mock := &MockSteamClient{ctrl: ctrl}
	mock.recorder = &MockSteamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSteamClient) EXPECT() *MockSteamClientMockRecorder {
	return m.recorder
}

// SignInWithSteam mocks base method
func (m *MockSteamClient) SignInWithSteam(ctx context.Context, in *SignInWithSteamReq, opts ...grpc.CallOption) (*SignInWithSteamResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SignInWithSteam", varargs...)
	ret0, _ := ret[0].(*SignInWithSteamResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInWithSteam indicates an expected call of SignInWithSteam
func (mr *MockSteamClientMockRecorder) SignInWithSteam(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInWithSteam", reflect.TypeOf((*MockSteamClient)(nil).SignInWithSteam), varargs...)
}

// GetSteamToken mocks base method
func (m *MockSteamClient) GetSteamToken(ctx context.Context, in *GetSteamTokenReq, opts ...grpc.CallOption) (*GetSteamTokenResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSteamToken", varargs...)
	ret0, _ := ret[0].(*GetSteamTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSteamToken indicates an expected call of GetSteamToken
func (mr *MockSteamClientMockRecorder) GetSteamToken(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSteamToken", reflect.TypeOf((*MockSteamClient)(nil).GetSteamToken), varargs...)
}

// GetUID mocks base method
func (m *MockSteamClient) GetUID(ctx context.Context, in *GetUIDReq, opts ...grpc.CallOption) (*GetUIDResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUID", varargs...)
	ret0, _ := ret[0].(*GetUIDResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUID indicates an expected call of GetUID
func (mr *MockSteamClientMockRecorder) GetUID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockSteamClient)(nil).GetUID), varargs...)
}

// MockSteamServer is a mock of SteamServer interface
type MockSteamServer struct {
	ctrl     *gomock.Controller
	recorder *MockSteamServerMockRecorder
}

// MockSteamServerMockRecorder is the mock recorder for MockSteamServer
type MockSteamServerMockRecorder struct {
	mock *MockSteamServer
}

// NewMockSteamServer creates a new mock instance
func NewMockSteamServer(ctrl *gomock.Controller) *MockSteamServer {
	mock := &MockSteamServer{ctrl: ctrl}
	mock.recorder = &MockSteamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSteamServer) EXPECT() *MockSteamServerMockRecorder {
	return m.recorder
}

// SignInWithSteam mocks base method
func (m *MockSteamServer) SignInWithSteam(arg0 context.Context, arg1 *SignInWithSteamReq) (*SignInWithSteamResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignInWithSteam", arg0, arg1)
	ret0, _ := ret[0].(*SignInWithSteamResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignInWithSteam indicates an expected call of SignInWithSteam
func (mr *MockSteamServerMockRecorder) SignInWithSteam(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignInWithSteam", reflect.TypeOf((*MockSteamServer)(nil).SignInWithSteam), arg0, arg1)
}

// GetSteamToken mocks base method
func (m *MockSteamServer) GetSteamToken(arg0 context.Context, arg1 *GetSteamTokenReq) (*GetSteamTokenResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSteamToken", arg0, arg1)
	ret0, _ := ret[0].(*GetSteamTokenResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSteamToken indicates an expected call of GetSteamToken
func (mr *MockSteamServerMockRecorder) GetSteamToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSteamToken", reflect.TypeOf((*MockSteamServer)(nil).GetSteamToken), arg0, arg1)
}

// GetUID mocks base method
func (m *MockSteamServer) GetUID(arg0 context.Context, arg1 *GetUIDReq) (*GetUIDResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID", arg0, arg1)
	ret0, _ := ret[0].(*GetUIDResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUID indicates an expected call of GetUID
func (mr *MockSteamServerMockRecorder) GetUID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockSteamServer)(nil).GetUID), arg0, arg1)
}
