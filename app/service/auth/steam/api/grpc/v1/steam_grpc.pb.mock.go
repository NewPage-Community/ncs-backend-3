// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/auth/steam/api/grpc/v1/steam_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockWebClient is a mock of WebClient interface.
type MockWebClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebClientMockRecorder
}

// MockWebClientMockRecorder is the mock recorder for MockWebClient.
type MockWebClientMockRecorder struct {
	mock *MockWebClient
}

// NewMockWebClient creates a new mock instance.
func NewMockWebClient(ctrl *gomock.Controller) *MockWebClient {
	mock := &MockWebClient{ctrl: ctrl}
	mock.recorder = &MockWebClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebClient) EXPECT() *MockWebClientMockRecorder {
	return m.recorder
}

// SteamCallback mocks base method.
func (m *MockWebClient) SteamCallback(ctx context.Context, in *SteamCallbackReq, opts ...grpc.CallOption) (*SteamCallbackResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SteamCallback", varargs...)
	ret0, _ := ret[0].(*SteamCallbackResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SteamCallback indicates an expected call of SteamCallback.
func (mr *MockWebClientMockRecorder) SteamCallback(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SteamCallback", reflect.TypeOf((*MockWebClient)(nil).SteamCallback), varargs...)
}

// SteamLogin mocks base method.
func (m *MockWebClient) SteamLogin(ctx context.Context, in *SteamLoginReq, opts ...grpc.CallOption) (*SteamLoginResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SteamLogin", varargs...)
	ret0, _ := ret[0].(*SteamLoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SteamLogin indicates an expected call of SteamLogin.
func (mr *MockWebClientMockRecorder) SteamLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SteamLogin", reflect.TypeOf((*MockWebClient)(nil).SteamLogin), varargs...)
}

// MockWebServer is a mock of WebServer interface.
type MockWebServer struct {
	ctrl     *gomock.Controller
	recorder *MockWebServerMockRecorder
}

// MockWebServerMockRecorder is the mock recorder for MockWebServer.
type MockWebServerMockRecorder struct {
	mock *MockWebServer
}

// NewMockWebServer creates a new mock instance.
func NewMockWebServer(ctrl *gomock.Controller) *MockWebServer {
	mock := &MockWebServer{ctrl: ctrl}
	mock.recorder = &MockWebServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebServer) EXPECT() *MockWebServerMockRecorder {
	return m.recorder
}

// SteamCallback mocks base method.
func (m *MockWebServer) SteamCallback(arg0 context.Context, arg1 *SteamCallbackReq) (*SteamCallbackResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SteamCallback", arg0, arg1)
	ret0, _ := ret[0].(*SteamCallbackResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SteamCallback indicates an expected call of SteamCallback.
func (mr *MockWebServerMockRecorder) SteamCallback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SteamCallback", reflect.TypeOf((*MockWebServer)(nil).SteamCallback), arg0, arg1)
}

// SteamLogin mocks base method.
func (m *MockWebServer) SteamLogin(arg0 context.Context, arg1 *SteamLoginReq) (*SteamLoginResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SteamLogin", arg0, arg1)
	ret0, _ := ret[0].(*SteamLoginResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SteamLogin indicates an expected call of SteamLogin.
func (mr *MockWebServerMockRecorder) SteamLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SteamLogin", reflect.TypeOf((*MockWebServer)(nil).SteamLogin), arg0, arg1)
}

// mustEmbedUnimplementedWebServer mocks base method.
func (m *MockWebServer) mustEmbedUnimplementedWebServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWebServer")
}

// mustEmbedUnimplementedWebServer indicates an expected call of mustEmbedUnimplementedWebServer.
func (mr *MockWebServerMockRecorder) mustEmbedUnimplementedWebServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWebServer", reflect.TypeOf((*MockWebServer)(nil).mustEmbedUnimplementedWebServer))
}

// MockUnsafeWebServer is a mock of UnsafeWebServer interface.
type MockUnsafeWebServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWebServerMockRecorder
}

// MockUnsafeWebServerMockRecorder is the mock recorder for MockUnsafeWebServer.
type MockUnsafeWebServerMockRecorder struct {
	mock *MockUnsafeWebServer
}

// NewMockUnsafeWebServer creates a new mock instance.
func NewMockUnsafeWebServer(ctrl *gomock.Controller) *MockUnsafeWebServer {
	mock := &MockUnsafeWebServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWebServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWebServer) EXPECT() *MockUnsafeWebServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWebServer mocks base method.
func (m *MockUnsafeWebServer) mustEmbedUnimplementedWebServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWebServer")
}

// mustEmbedUnimplementedWebServer indicates an expected call of mustEmbedUnimplementedWebServer.
func (mr *MockUnsafeWebServerMockRecorder) mustEmbedUnimplementedWebServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWebServer", reflect.TypeOf((*MockUnsafeWebServer)(nil).mustEmbedUnimplementedWebServer))
}
