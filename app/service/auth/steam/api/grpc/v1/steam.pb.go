// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/auth/steam/api/grpc/v1/steam.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SignInWithSteamReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInWithSteamReq) Reset()         { *m = SignInWithSteamReq{} }
func (m *SignInWithSteamReq) String() string { return proto.CompactTextString(m) }
func (*SignInWithSteamReq) ProtoMessage()    {}
func (*SignInWithSteamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{0}
}
func (m *SignInWithSteamReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInWithSteamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInWithSteamReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInWithSteamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInWithSteamReq.Merge(m, src)
}
func (m *SignInWithSteamReq) XXX_Size() int {
	return m.Size()
}
func (m *SignInWithSteamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInWithSteamReq.DiscardUnknown(m)
}

var xxx_messageInfo_SignInWithSteamReq proto.InternalMessageInfo

type SignInWithSteamResp struct {
	AuthUrl              string   `protobuf:"bytes,1,opt,name=auth_url,json=authUrl,proto3" json:"auth_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignInWithSteamResp) Reset()         { *m = SignInWithSteamResp{} }
func (m *SignInWithSteamResp) String() string { return proto.CompactTextString(m) }
func (*SignInWithSteamResp) ProtoMessage()    {}
func (*SignInWithSteamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{1}
}
func (m *SignInWithSteamResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInWithSteamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInWithSteamResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInWithSteamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInWithSteamResp.Merge(m, src)
}
func (m *SignInWithSteamResp) XXX_Size() int {
	return m.Size()
}
func (m *SignInWithSteamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInWithSteamResp.DiscardUnknown(m)
}

var xxx_messageInfo_SignInWithSteamResp proto.InternalMessageInfo

func (m *SignInWithSteamResp) GetAuthUrl() string {
	if m != nil {
		return m.AuthUrl
	}
	return ""
}

type GetSteamTokenReq struct {
	AuthorizationCode    string   `protobuf:"bytes,1,opt,name=authorization_code,json=authorizationCode,proto3" json:"authorization_code,omitempty"`
	JwtString            string   `protobuf:"bytes,2,opt,name=jwt_string,json=jwtString,proto3" json:"jwt_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSteamTokenReq) Reset()         { *m = GetSteamTokenReq{} }
func (m *GetSteamTokenReq) String() string { return proto.CompactTextString(m) }
func (*GetSteamTokenReq) ProtoMessage()    {}
func (*GetSteamTokenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{2}
}
func (m *GetSteamTokenReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSteamTokenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSteamTokenReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSteamTokenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSteamTokenReq.Merge(m, src)
}
func (m *GetSteamTokenReq) XXX_Size() int {
	return m.Size()
}
func (m *GetSteamTokenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSteamTokenReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetSteamTokenReq proto.InternalMessageInfo

func (m *GetSteamTokenReq) GetAuthorizationCode() string {
	if m != nil {
		return m.AuthorizationCode
	}
	return ""
}

func (m *GetSteamTokenReq) GetJwtString() string {
	if m != nil {
		return m.JwtString
	}
	return ""
}

type GetSteamTokenResp struct {
	JwtString            string   `protobuf:"bytes,1,opt,name=jwt_string,json=jwtString,proto3" json:"jwt_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSteamTokenResp) Reset()         { *m = GetSteamTokenResp{} }
func (m *GetSteamTokenResp) String() string { return proto.CompactTextString(m) }
func (*GetSteamTokenResp) ProtoMessage()    {}
func (*GetSteamTokenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{3}
}
func (m *GetSteamTokenResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSteamTokenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSteamTokenResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSteamTokenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSteamTokenResp.Merge(m, src)
}
func (m *GetSteamTokenResp) XXX_Size() int {
	return m.Size()
}
func (m *GetSteamTokenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSteamTokenResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetSteamTokenResp proto.InternalMessageInfo

func (m *GetSteamTokenResp) GetJwtString() string {
	if m != nil {
		return m.JwtString
	}
	return ""
}

type GetUIDReq struct {
	JwtString            string   `protobuf:"bytes,1,opt,name=jwt_string,json=jwtString,proto3" json:"jwt_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUIDReq) Reset()         { *m = GetUIDReq{} }
func (m *GetUIDReq) String() string { return proto.CompactTextString(m) }
func (*GetUIDReq) ProtoMessage()    {}
func (*GetUIDReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{4}
}
func (m *GetUIDReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUIDReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUIDReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUIDReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUIDReq.Merge(m, src)
}
func (m *GetUIDReq) XXX_Size() int {
	return m.Size()
}
func (m *GetUIDReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUIDReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetUIDReq proto.InternalMessageInfo

func (m *GetUIDReq) GetJwtString() string {
	if m != nil {
		return m.JwtString
	}
	return ""
}

type GetUIDResp struct {
	JwtString            string   `protobuf:"bytes,1,opt,name=jwt_string,json=jwtString,proto3" json:"jwt_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetUIDResp) Reset()         { *m = GetUIDResp{} }
func (m *GetUIDResp) String() string { return proto.CompactTextString(m) }
func (*GetUIDResp) ProtoMessage()    {}
func (*GetUIDResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{5}
}
func (m *GetUIDResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUIDResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUIDResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUIDResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUIDResp.Merge(m, src)
}
func (m *GetUIDResp) XXX_Size() int {
	return m.Size()
}
func (m *GetUIDResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUIDResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetUIDResp proto.InternalMessageInfo

func (m *GetUIDResp) GetJwtString() string {
	if m != nil {
		return m.JwtString
	}
	return ""
}

func init() {
	proto.RegisterType((*SignInWithSteamReq)(nil), "ncs.service.auth.steam.v1.SignInWithSteamReq")
	proto.RegisterType((*SignInWithSteamResp)(nil), "ncs.service.auth.steam.v1.SignInWithSteamResp")
	proto.RegisterType((*GetSteamTokenReq)(nil), "ncs.service.auth.steam.v1.GetSteamTokenReq")
	proto.RegisterType((*GetSteamTokenResp)(nil), "ncs.service.auth.steam.v1.GetSteamTokenResp")
	proto.RegisterType((*GetUIDReq)(nil), "ncs.service.auth.steam.v1.GetUIDReq")
	proto.RegisterType((*GetUIDResp)(nil), "ncs.service.auth.steam.v1.GetUIDResp")
}

func init() {
	proto.RegisterFile("app/service/auth/steam/api/grpc/v1/steam.proto", fileDescriptor_af9d73826b7f6f79)
}

var fileDescriptor_af9d73826b7f6f79 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x6b, 0x1a, 0x41,
	0x14, 0xc7, 0x3b, 0x96, 0xda, 0xfa, 0xa0, 0xe8, 0x8e, 0x85, 0xea, 0xd2, 0x2e, 0x65, 0x68, 0xa1,
	0xd4, 0x3a, 0x5b, 0x6d, 0x3f, 0x41, 0x5b, 0x10, 0xaf, 0x5a, 0x29, 0xf4, 0x62, 0xb7, 0xeb, 0xb0,
	0x8e, 0x35, 0x33, 0xe3, 0xce, 0xa8, 0x90, 0x63, 0x20, 0x97, 0x90, 0x5b, 0x2e, 0xf9, 0x48, 0x39,
	0x06, 0xf2, 0x05, 0x82, 0xc9, 0x07, 0x09, 0x3b, 0x6b, 0x40, 0x57, 0xa2, 0xe6, 0xb8, 0xef, 0xfd,
	0xfe, 0xef, 0xff, 0xf8, 0xbf, 0x1d, 0xa0, 0x81, 0x52, 0xbe, 0x66, 0xf1, 0x8c, 0x87, 0xcc, 0x0f,
	0xa6, 0x66, 0xe8, 0x6b, 0xc3, 0x82, 0x03, 0x3f, 0x50, 0xdc, 0x8f, 0x62, 0x15, 0xfa, 0xb3, 0x46,
	0x5a, 0xa1, 0x2a, 0x96, 0x46, 0xe2, 0xaa, 0x08, 0x35, 0x5d, 0xf2, 0x34, 0xe1, 0x69, 0xda, 0x9d,
	0x35, 0xdc, 0x37, 0x91, 0x94, 0xd1, 0x98, 0x59, 0x69, 0x20, 0x84, 0x34, 0x81, 0xe1, 0x52, 0xe8,
	0x54, 0x48, 0x5e, 0x01, 0xee, 0xf2, 0x48, 0xb4, 0xc5, 0x6f, 0x6e, 0x86, 0xdd, 0x44, 0xd3, 0x61,
	0x13, 0xf2, 0x05, 0xca, 0x1b, 0x55, 0xad, 0x70, 0x15, 0x5e, 0x24, 0xb3, 0xfb, 0xd3, 0x78, 0x5c,
	0x41, 0xef, 0xd0, 0xc7, 0x42, 0xe7, 0x79, 0xf2, 0xdd, 0x8b, 0xc7, 0xe4, 0x2f, 0x94, 0x5a, 0xcc,
	0x58, 0xf4, 0x97, 0xfc, 0xcf, 0x44, 0x87, 0x4d, 0x70, 0x1d, 0x70, 0xd2, 0x96, 0x31, 0x3f, 0xb4,
	0x9e, 0xfd, 0x50, 0x0e, 0xd8, 0x52, 0xe8, 0xac, 0x75, 0x7e, 0xc8, 0x01, 0xc3, 0x6f, 0x01, 0x46,
	0x73, 0xd3, 0xd7, 0x26, 0xe6, 0x22, 0xaa, 0xe4, 0x2c, 0x56, 0x18, 0xcd, 0x4d, 0xd7, 0x16, 0x48,
	0x13, 0x9c, 0x8c, 0x83, 0x56, 0x19, 0x0d, 0xca, 0x6a, 0x3e, 0x41, 0xa1, 0xc5, 0x4c, 0xaf, 0xfd,
	0x33, 0x59, 0x67, 0x07, 0x5b, 0x03, 0xb8, 0x67, 0x77, 0x0e, 0x6e, 0x9e, 0x3e, 0x85, 0x67, 0x76,
	0x15, 0x7c, 0x82, 0xa0, 0x98, 0xc9, 0x0a, 0xd7, 0xe9, 0x83, 0xe7, 0xa0, 0x9b, 0x69, 0xbb, 0xf4,
	0x31, 0xb8, 0x56, 0xa4, 0x72, 0x74, 0x75, 0x7b, 0x96, 0xc3, 0xb8, 0xb4, 0xfa, 0x67, 0x68, 0x1e,
	0x09, 0x7c, 0x8c, 0xe0, 0xe5, 0x5a, 0x48, 0xb8, 0xb6, 0x65, 0x76, 0xf6, 0x60, 0xee, 0xe7, 0xfd,
	0x61, 0xad, 0x48, 0xd5, 0xae, 0x51, 0x26, 0xce, 0xea, 0x1a, 0xc6, 0xba, 0x0a, 0xc8, 0xa7, 0x59,
	0xe2, 0xf7, 0xdb, 0x47, 0xa6, 0xa7, 0x71, 0x3f, 0xec, 0x41, 0x69, 0x45, 0x5e, 0x5b, 0x47, 0x87,
	0x14, 0x57, 0x1d, 0xa7, 0x7c, 0xf0, 0xfd, 0xdb, 0xc5, 0xc2, 0x43, 0x97, 0x0b, 0x0f, 0x5d, 0x2f,
	0x3c, 0x74, 0x7e, 0xe3, 0x3d, 0xf9, 0x43, 0x76, 0x3f, 0xa0, 0x7f, 0x79, 0xfb, 0x04, 0xbe, 0xde,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x66, 0x4d, 0xb4, 0x3f, 0x6d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SteamClient is the client API for Steam service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SteamClient interface {
	SignInWithSteam(ctx context.Context, in *SignInWithSteamReq, opts ...grpc.CallOption) (*SignInWithSteamResp, error)
	GetSteamToken(ctx context.Context, in *GetSteamTokenReq, opts ...grpc.CallOption) (*GetSteamTokenResp, error)
	GetUID(ctx context.Context, in *GetUIDReq, opts ...grpc.CallOption) (*GetUIDResp, error)
}

type steamClient struct {
	cc *grpc.ClientConn
}

func NewSteamClient(cc *grpc.ClientConn) SteamClient {
	return &steamClient{cc}
}

func (c *steamClient) SignInWithSteam(ctx context.Context, in *SignInWithSteamReq, opts ...grpc.CallOption) (*SignInWithSteamResp, error) {
	out := new(SignInWithSteamResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.steam.v1.Steam/SignInWithSteam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamClient) GetSteamToken(ctx context.Context, in *GetSteamTokenReq, opts ...grpc.CallOption) (*GetSteamTokenResp, error) {
	out := new(GetSteamTokenResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.steam.v1.Steam/GetSteamToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *steamClient) GetUID(ctx context.Context, in *GetUIDReq, opts ...grpc.CallOption) (*GetUIDResp, error) {
	out := new(GetUIDResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.steam.v1.Steam/GetUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SteamServer is the server API for Steam service.
type SteamServer interface {
	SignInWithSteam(context.Context, *SignInWithSteamReq) (*SignInWithSteamResp, error)
	GetSteamToken(context.Context, *GetSteamTokenReq) (*GetSteamTokenResp, error)
	GetUID(context.Context, *GetUIDReq) (*GetUIDResp, error)
}

// UnimplementedSteamServer can be embedded to have forward compatible implementations.
type UnimplementedSteamServer struct {
}

func (*UnimplementedSteamServer) SignInWithSteam(ctx context.Context, req *SignInWithSteamReq) (*SignInWithSteamResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInWithSteam not implemented")
}
func (*UnimplementedSteamServer) GetSteamToken(ctx context.Context, req *GetSteamTokenReq) (*GetSteamTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSteamToken not implemented")
}
func (*UnimplementedSteamServer) GetUID(ctx context.Context, req *GetUIDReq) (*GetUIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUID not implemented")
}

func RegisterSteamServer(s *grpc.Server, srv SteamServer) {
	s.RegisterService(&_Steam_serviceDesc, srv)
}

func _Steam_SignInWithSteam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInWithSteamReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamServer).SignInWithSteam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.steam.v1.Steam/SignInWithSteam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamServer).SignInWithSteam(ctx, req.(*SignInWithSteamReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Steam_GetSteamToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSteamTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamServer).GetSteamToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.steam.v1.Steam/GetSteamToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamServer).GetSteamToken(ctx, req.(*GetSteamTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Steam_GetUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SteamServer).GetUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.steam.v1.Steam/GetUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SteamServer).GetUID(ctx, req.(*GetUIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Steam_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.auth.steam.v1.Steam",
	HandlerType: (*SteamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignInWithSteam",
			Handler:    _Steam_SignInWithSteam_Handler,
		},
		{
			MethodName: "GetSteamToken",
			Handler:    _Steam_GetSteamToken_Handler,
		},
		{
			MethodName: "GetUID",
			Handler:    _Steam_GetUID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/auth/steam/api/grpc/v1/steam.proto",
}

func (m *SignInWithSteamReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInWithSteamReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInWithSteamReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SignInWithSteamResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInWithSteamResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInWithSteamResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AuthUrl) > 0 {
		i -= len(m.AuthUrl)
		copy(dAtA[i:], m.AuthUrl)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.AuthUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSteamTokenReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSteamTokenReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSteamTokenReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JwtString) > 0 {
		i -= len(m.JwtString)
		copy(dAtA[i:], m.JwtString)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.JwtString)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuthorizationCode) > 0 {
		i -= len(m.AuthorizationCode)
		copy(dAtA[i:], m.AuthorizationCode)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.AuthorizationCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSteamTokenResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSteamTokenResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSteamTokenResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JwtString) > 0 {
		i -= len(m.JwtString)
		copy(dAtA[i:], m.JwtString)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.JwtString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUIDReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUIDReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUIDReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JwtString) > 0 {
		i -= len(m.JwtString)
		copy(dAtA[i:], m.JwtString)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.JwtString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUIDResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUIDResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUIDResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JwtString) > 0 {
		i -= len(m.JwtString)
		copy(dAtA[i:], m.JwtString)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.JwtString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSteam(dAtA []byte, offset int, v uint64) int {
	offset -= sovSteam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SignInWithSteamReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignInWithSteamResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthUrl)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSteamTokenReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AuthorizationCode)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.JwtString)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetSteamTokenResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JwtString)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUIDReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JwtString)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetUIDResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JwtString)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSteam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSteam(x uint64) (n int) {
	return sovSteam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SignInWithSteamReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInWithSteamReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInWithSteamReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInWithSteamResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInWithSteamResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInWithSteamResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSteamTokenReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSteamTokenReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSteamTokenReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSteamTokenResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSteamTokenResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSteamTokenResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUIDReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUIDReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUIDReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUIDResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUIDResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUIDResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSteam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSteam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSteam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSteam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSteam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSteam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSteam = fmt.Errorf("proto: unexpected end of group")
)
