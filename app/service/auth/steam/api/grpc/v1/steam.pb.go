// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/auth/steam/api/grpc/v1/steam.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SteamLoginReq struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteamLoginReq) Reset()         { *m = SteamLoginReq{} }
func (m *SteamLoginReq) String() string { return proto.CompactTextString(m) }
func (*SteamLoginReq) ProtoMessage()    {}
func (*SteamLoginReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{0}
}
func (m *SteamLoginReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteamLoginReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteamLoginReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteamLoginReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteamLoginReq.Merge(m, src)
}
func (m *SteamLoginReq) XXX_Size() int {
	return m.Size()
}
func (m *SteamLoginReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SteamLoginReq.DiscardUnknown(m)
}

var xxx_messageInfo_SteamLoginReq proto.InternalMessageInfo

type SteamLoginResp struct {
	Redirect             string   `protobuf:"bytes,1,opt,name=redirect,proto3" json:"redirect,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteamLoginResp) Reset()         { *m = SteamLoginResp{} }
func (m *SteamLoginResp) String() string { return proto.CompactTextString(m) }
func (*SteamLoginResp) ProtoMessage()    {}
func (*SteamLoginResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{1}
}
func (m *SteamLoginResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteamLoginResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteamLoginResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteamLoginResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteamLoginResp.Merge(m, src)
}
func (m *SteamLoginResp) XXX_Size() int {
	return m.Size()
}
func (m *SteamLoginResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SteamLoginResp.DiscardUnknown(m)
}

var xxx_messageInfo_SteamLoginResp proto.InternalMessageInfo

func (m *SteamLoginResp) GetRedirect() string {
	if m != nil {
		return m.Redirect
	}
	return ""
}

type SteamCallbackReq struct {
	Openid               *SteamCallbackReq_OpenID `protobuf:"bytes,1,opt,name=openid,proto3" json:"openid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SteamCallbackReq) Reset()         { *m = SteamCallbackReq{} }
func (m *SteamCallbackReq) String() string { return proto.CompactTextString(m) }
func (*SteamCallbackReq) ProtoMessage()    {}
func (*SteamCallbackReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{2}
}
func (m *SteamCallbackReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteamCallbackReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteamCallbackReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteamCallbackReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteamCallbackReq.Merge(m, src)
}
func (m *SteamCallbackReq) XXX_Size() int {
	return m.Size()
}
func (m *SteamCallbackReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SteamCallbackReq.DiscardUnknown(m)
}

var xxx_messageInfo_SteamCallbackReq proto.InternalMessageInfo

func (m *SteamCallbackReq) GetOpenid() *SteamCallbackReq_OpenID {
	if m != nil {
		return m.Openid
	}
	return nil
}

type SteamCallbackReq_OpenID struct {
	Ns                   string   `protobuf:"bytes,1,opt,name=ns,proto3" json:"ns,omitempty"`
	Mode                 string   `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	OpEndpoint           string   `protobuf:"bytes,3,opt,name=op_endpoint,json=opEndpoint,proto3" json:"op_endpoint,omitempty"`
	ClaimedId            string   `protobuf:"bytes,4,opt,name=claimed_id,json=claimedId,proto3" json:"claimed_id,omitempty"`
	Identity             string   `protobuf:"bytes,5,opt,name=identity,proto3" json:"identity,omitempty"`
	ReturnTo             string   `protobuf:"bytes,6,opt,name=return_to,json=returnTo,proto3" json:"return_to,omitempty"`
	ResponseNonce        string   `protobuf:"bytes,7,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	AssocHandle          string   `protobuf:"bytes,8,opt,name=assoc_handle,json=assocHandle,proto3" json:"assoc_handle,omitempty"`
	Signed               string   `protobuf:"bytes,9,opt,name=signed,proto3" json:"signed,omitempty"`
	Sig                  string   `protobuf:"bytes,10,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteamCallbackReq_OpenID) Reset()         { *m = SteamCallbackReq_OpenID{} }
func (m *SteamCallbackReq_OpenID) String() string { return proto.CompactTextString(m) }
func (*SteamCallbackReq_OpenID) ProtoMessage()    {}
func (*SteamCallbackReq_OpenID) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{2, 0}
}
func (m *SteamCallbackReq_OpenID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteamCallbackReq_OpenID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteamCallbackReq_OpenID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteamCallbackReq_OpenID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteamCallbackReq_OpenID.Merge(m, src)
}
func (m *SteamCallbackReq_OpenID) XXX_Size() int {
	return m.Size()
}
func (m *SteamCallbackReq_OpenID) XXX_DiscardUnknown() {
	xxx_messageInfo_SteamCallbackReq_OpenID.DiscardUnknown(m)
}

var xxx_messageInfo_SteamCallbackReq_OpenID proto.InternalMessageInfo

func (m *SteamCallbackReq_OpenID) GetNs() string {
	if m != nil {
		return m.Ns
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetOpEndpoint() string {
	if m != nil {
		return m.OpEndpoint
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetClaimedId() string {
	if m != nil {
		return m.ClaimedId
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetReturnTo() string {
	if m != nil {
		return m.ReturnTo
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetResponseNonce() string {
	if m != nil {
		return m.ResponseNonce
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetAssocHandle() string {
	if m != nil {
		return m.AssocHandle
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetSigned() string {
	if m != nil {
		return m.Signed
	}
	return ""
}

func (m *SteamCallbackReq_OpenID) GetSig() string {
	if m != nil {
		return m.Sig
	}
	return ""
}

type SteamCallbackResp struct {
	JwtString            string   `protobuf:"bytes,1,opt,name=jwt_string,json=jwtString,proto3" json:"jwt_string,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SteamCallbackResp) Reset()         { *m = SteamCallbackResp{} }
func (m *SteamCallbackResp) String() string { return proto.CompactTextString(m) }
func (*SteamCallbackResp) ProtoMessage()    {}
func (*SteamCallbackResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_af9d73826b7f6f79, []int{3}
}
func (m *SteamCallbackResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteamCallbackResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteamCallbackResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteamCallbackResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteamCallbackResp.Merge(m, src)
}
func (m *SteamCallbackResp) XXX_Size() int {
	return m.Size()
}
func (m *SteamCallbackResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SteamCallbackResp.DiscardUnknown(m)
}

var xxx_messageInfo_SteamCallbackResp proto.InternalMessageInfo

func (m *SteamCallbackResp) GetJwtString() string {
	if m != nil {
		return m.JwtString
	}
	return ""
}

func init() {
	proto.RegisterType((*SteamLoginReq)(nil), "ncs.service.auth.steam.v1.SteamLoginReq")
	proto.RegisterType((*SteamLoginResp)(nil), "ncs.service.auth.steam.v1.SteamLoginResp")
	proto.RegisterType((*SteamCallbackReq)(nil), "ncs.service.auth.steam.v1.SteamCallbackReq")
	proto.RegisterType((*SteamCallbackReq_OpenID)(nil), "ncs.service.auth.steam.v1.SteamCallbackReq.OpenID")
	proto.RegisterType((*SteamCallbackResp)(nil), "ncs.service.auth.steam.v1.SteamCallbackResp")
}

func init() {
	proto.RegisterFile("app/service/auth/steam/api/grpc/v1/steam.proto", fileDescriptor_af9d73826b7f6f79)
}

var fileDescriptor_af9d73826b7f6f79 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6b, 0x14, 0x4d,
	0x10, 0xc6, 0xdf, 0x99, 0xcd, 0xbb, 0x66, 0x6b, 0xcd, 0x9a, 0xb4, 0x12, 0x3a, 0x6b, 0x5c, 0x75,
	0x40, 0x88, 0x1a, 0x66, 0xc8, 0x7a, 0xf5, 0xe4, 0x1f, 0x30, 0x22, 0x0a, 0x1b, 0x41, 0xf0, 0x32,
	0xf4, 0x4e, 0x17, 0x93, 0x8e, 0xb3, 0xd5, 0x9d, 0xe9, 0xce, 0x06, 0xc1, 0x93, 0x27, 0x4f, 0x5e,
	0xbc, 0xe8, 0x37, 0xf2, 0x28, 0xf8, 0x05, 0x64, 0xf5, 0x53, 0x78, 0x92, 0xe9, 0x9d, 0xd1, 0x25,
	0x20, 0x89, 0xb7, 0xae, 0x5f, 0x3d, 0x35, 0xf3, 0x54, 0x75, 0x35, 0xc4, 0xc2, 0x98, 0xc4, 0x62,
	0x39, 0x55, 0x19, 0x26, 0xe2, 0xc8, 0xed, 0x27, 0xd6, 0xa1, 0x98, 0x24, 0xc2, 0xa8, 0x24, 0x2f,
	0x4d, 0x96, 0x4c, 0x77, 0xe6, 0x24, 0x36, 0xa5, 0x76, 0x9a, 0x6d, 0x50, 0x66, 0xe3, 0x5a, 0x1f,
	0x57, 0xfa, 0x78, 0x9e, 0x9d, 0xee, 0xf4, 0x37, 0x73, 0xad, 0xf3, 0x02, 0x7d, 0xa9, 0x20, 0xd2,
	0x4e, 0x38, 0xa5, 0xc9, 0xce, 0x0b, 0xa3, 0x0b, 0xb0, 0xb2, 0x57, 0x29, 0x9f, 0xe8, 0x5c, 0xd1,
	0x08, 0x0f, 0xa3, 0x6d, 0xe8, 0x2d, 0x02, 0x6b, 0x58, 0x1f, 0x96, 0x4b, 0x94, 0xaa, 0xc4, 0xcc,
	0xf1, 0xe0, 0x5a, 0xb0, 0xd5, 0x19, 0xfd, 0x8e, 0xa3, 0x9f, 0x21, 0xac, 0x7a, 0xf9, 0x7d, 0x51,
	0x14, 0x63, 0x91, 0xbd, 0x1a, 0xe1, 0x21, 0x7b, 0x0c, 0x6d, 0x6d, 0x90, 0x94, 0xf4, 0xf2, 0xee,
	0x70, 0x18, 0xff, 0xd5, 0x5d, 0x7c, 0xb2, 0x38, 0x7e, 0x66, 0x90, 0x76, 0x1f, 0x8c, 0xea, 0x2f,
	0xf4, 0x3f, 0x85, 0xd0, 0x9e, 0x23, 0xd6, 0x83, 0x90, 0x6c, 0xed, 0x20, 0x24, 0xcb, 0x18, 0x2c,
	0x4d, 0xb4, 0x44, 0x1e, 0x7a, 0xe2, 0xcf, 0xec, 0x2a, 0x74, 0xb5, 0x49, 0x91, 0xa4, 0xd1, 0x8a,
	0x1c, 0x6f, 0xf9, 0x14, 0x68, 0xf3, 0xb0, 0x26, 0xec, 0x0a, 0x40, 0x56, 0x08, 0x35, 0x41, 0x99,
	0x2a, 0xc9, 0x97, 0x7c, 0xbe, 0x53, 0x93, 0x5d, 0x59, 0xf5, 0xaa, 0x24, 0x92, 0x53, 0xee, 0x35,
	0xff, 0x7f, 0xde, 0x6b, 0x13, 0xb3, 0xcb, 0xd0, 0x29, 0xd1, 0x1d, 0x95, 0x94, 0x3a, 0xcd, 0xdb,
	0xcd, 0x20, 0x2a, 0xf0, 0x5c, 0xb3, 0x1b, 0xd0, 0x2b, 0xd1, 0x1a, 0x4d, 0x16, 0x53, 0xd2, 0x94,
	0x21, 0x3f, 0xe7, 0x15, 0x2b, 0x0d, 0x7d, 0x5a, 0x41, 0x76, 0x1d, 0xce, 0x0b, 0x6b, 0x75, 0x96,
	0xee, 0x0b, 0x92, 0x05, 0xf2, 0x65, 0x2f, 0xea, 0x7a, 0xf6, 0xc8, 0x23, 0xb6, 0x0e, 0x6d, 0xab,
	0x72, 0x42, 0xc9, 0x3b, 0x3e, 0x59, 0x47, 0x6c, 0x15, 0x5a, 0x56, 0xe5, 0x1c, 0x3c, 0xac, 0x8e,
	0xd1, 0x10, 0xd6, 0x4e, 0x8c, 0xcf, 0x9a, 0xaa, 0xc1, 0x83, 0x63, 0x97, 0x5a, 0x57, 0x2a, 0xca,
	0xeb, 0x69, 0x75, 0x0e, 0x8e, 0xdd, 0x9e, 0x07, 0xc3, 0xf7, 0x21, 0xb4, 0x5e, 0xe0, 0x98, 0xbd,
	0x01, 0xf8, 0x73, 0xcd, 0x6c, 0xeb, 0xb4, 0x1b, 0x6a, 0xd6, 0xa3, 0x7f, 0xf3, 0x8c, 0x4a, 0x6b,
	0xa2, 0x8d, 0xb7, 0x5f, 0x7f, 0x7c, 0x08, 0x2f, 0xb2, 0xb5, 0xc5, 0x05, 0x2e, 0xfc, 0xff, 0xde,
	0x05, 0xf5, 0xda, 0x35, 0xd6, 0xd9, 0xed, 0x7f, 0xd8, 0x91, 0xfe, 0xf6, 0xd9, 0xc5, 0xd6, 0x44,
	0x9b, 0xde, 0xc7, 0x3a, 0xbb, 0xb4, 0xe8, 0x23, 0xab, 0x15, 0xf7, 0xee, 0x7e, 0x9e, 0x0d, 0x82,
	0x2f, 0xb3, 0x41, 0xf0, 0x6d, 0x36, 0x08, 0x3e, 0x7e, 0x1f, 0xfc, 0xf7, 0xf2, 0x56, 0xc5, 0x91,
	0x64, 0x72, 0xfa, 0x1b, 0x1c, 0xb7, 0xfd, 0x2b, 0xba, 0xf3, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x64,
	0x96, 0x2b, 0xdc, 0xb0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebClient interface {
	SteamLogin(ctx context.Context, in *SteamLoginReq, opts ...grpc.CallOption) (*SteamLoginResp, error)
	SteamCallback(ctx context.Context, in *SteamCallbackReq, opts ...grpc.CallOption) (*SteamCallbackResp, error)
}

type webClient struct {
	cc *grpc.ClientConn
}

func NewWebClient(cc *grpc.ClientConn) WebClient {
	return &webClient{cc}
}

func (c *webClient) SteamLogin(ctx context.Context, in *SteamLoginReq, opts ...grpc.CallOption) (*SteamLoginResp, error) {
	out := new(SteamLoginResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.steam.v1.Web/SteamLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) SteamCallback(ctx context.Context, in *SteamCallbackReq, opts ...grpc.CallOption) (*SteamCallbackResp, error) {
	out := new(SteamCallbackResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.steam.v1.Web/SteamCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
type WebServer interface {
	SteamLogin(context.Context, *SteamLoginReq) (*SteamLoginResp, error)
	SteamCallback(context.Context, *SteamCallbackReq) (*SteamCallbackResp, error)
}

// UnimplementedWebServer can be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (*UnimplementedWebServer) SteamLogin(ctx context.Context, req *SteamLoginReq) (*SteamLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamLogin not implemented")
}
func (*UnimplementedWebServer) SteamCallback(ctx context.Context, req *SteamCallbackReq) (*SteamCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SteamCallback not implemented")
}

func RegisterWebServer(s *grpc.Server, srv WebServer) {
	s.RegisterService(&_Web_serviceDesc, srv)
}

func _Web_SteamLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteamLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).SteamLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.steam.v1.Web/SteamLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).SteamLogin(ctx, req.(*SteamLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_SteamCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SteamCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).SteamCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.steam.v1.Web/SteamCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).SteamCallback(ctx, req.(*SteamCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Web_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.auth.steam.v1.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SteamLogin",
			Handler:    _Web_SteamLogin_Handler,
		},
		{
			MethodName: "SteamCallback",
			Handler:    _Web_SteamCallback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/auth/steam/api/grpc/v1/steam.proto",
}

func (m *SteamLoginReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteamLoginReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteamLoginReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SteamLoginResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteamLoginResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteamLoginResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Redirect) > 0 {
		i -= len(m.Redirect)
		copy(dAtA[i:], m.Redirect)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.Redirect)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SteamCallbackReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteamCallbackReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteamCallbackReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Openid != nil {
		{
			size, err := m.Openid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSteam(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SteamCallbackReq_OpenID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteamCallbackReq_OpenID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteamCallbackReq_OpenID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sig) > 0 {
		i -= len(m.Sig)
		copy(dAtA[i:], m.Sig)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.Sig)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Signed) > 0 {
		i -= len(m.Signed)
		copy(dAtA[i:], m.Signed)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.Signed)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AssocHandle) > 0 {
		i -= len(m.AssocHandle)
		copy(dAtA[i:], m.AssocHandle)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.AssocHandle)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ResponseNonce) > 0 {
		i -= len(m.ResponseNonce)
		copy(dAtA[i:], m.ResponseNonce)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.ResponseNonce)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReturnTo) > 0 {
		i -= len(m.ReturnTo)
		copy(dAtA[i:], m.ReturnTo)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.ReturnTo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ClaimedId) > 0 {
		i -= len(m.ClaimedId)
		copy(dAtA[i:], m.ClaimedId)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.ClaimedId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OpEndpoint) > 0 {
		i -= len(m.OpEndpoint)
		copy(dAtA[i:], m.OpEndpoint)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.OpEndpoint)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mode) > 0 {
		i -= len(m.Mode)
		copy(dAtA[i:], m.Mode)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.Mode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Ns) > 0 {
		i -= len(m.Ns)
		copy(dAtA[i:], m.Ns)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.Ns)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SteamCallbackResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteamCallbackResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteamCallbackResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.JwtString) > 0 {
		i -= len(m.JwtString)
		copy(dAtA[i:], m.JwtString)
		i = encodeVarintSteam(dAtA, i, uint64(len(m.JwtString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSteam(dAtA []byte, offset int, v uint64) int {
	offset -= sovSteam(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SteamLoginReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteamLoginResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Redirect)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteamCallbackReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Openid != nil {
		l = m.Openid.Size()
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteamCallbackReq_OpenID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ns)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.Mode)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.OpEndpoint)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.ClaimedId)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.ReturnTo)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.ResponseNonce)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.AssocHandle)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.Signed)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SteamCallbackResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JwtString)
	if l > 0 {
		n += 1 + l + sovSteam(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSteam(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSteam(x uint64) (n int) {
	return sovSteam(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SteamLoginReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteamLoginReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteamLoginReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteamLoginResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteamLoginResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteamLoginResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Redirect", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Redirect = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteamCallbackReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteamCallbackReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteamCallbackReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Openid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Openid == nil {
				m.Openid = &SteamCallbackReq_OpenID{}
			}
			if err := m.Openid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteamCallbackReq_OpenID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ns", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ns = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpEndpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpEndpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseNonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseNonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssocHandle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssocHandle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteamCallbackResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteamCallbackResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteamCallbackResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JwtString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSteam
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSteam
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JwtString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSteam(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSteam
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSteam(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSteam
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSteam
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSteam
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSteam
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSteam
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSteam        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSteam          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSteam = fmt.Errorf("proto: unexpected end of group")
)
