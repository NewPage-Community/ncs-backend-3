// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClient interface {
	AuthQQ(ctx context.Context, in *AuthQQReq, opts ...grpc.CallOption) (*AuthQQResp, error)
	BindQQ(ctx context.Context, in *BindQQReq, opts ...grpc.CallOption) (*BindQQResp, error)
	UnbindQQ(ctx context.Context, in *UnbindQQReq, opts ...grpc.CallOption) (*UnbindQQResp, error)
	QQStatus(ctx context.Context, in *QQStatusReq, opts ...grpc.CallOption) (*QQStatusResp, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) AuthQQ(ctx context.Context, in *AuthQQReq, opts ...grpc.CallOption) (*AuthQQResp, error) {
	out := new(AuthQQResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.qq.v1.Web/AuthQQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) BindQQ(ctx context.Context, in *BindQQReq, opts ...grpc.CallOption) (*BindQQResp, error) {
	out := new(BindQQResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.qq.v1.Web/BindQQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) UnbindQQ(ctx context.Context, in *UnbindQQReq, opts ...grpc.CallOption) (*UnbindQQResp, error) {
	out := new(UnbindQQResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.qq.v1.Web/UnbindQQ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webClient) QQStatus(ctx context.Context, in *QQStatusReq, opts ...grpc.CallOption) (*QQStatusResp, error) {
	out := new(QQStatusResp)
	err := c.cc.Invoke(ctx, "/ncs.service.auth.qq.v1.Web/QQStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
// All implementations must embed UnimplementedWebServer
// for forward compatibility
type WebServer interface {
	AuthQQ(context.Context, *AuthQQReq) (*AuthQQResp, error)
	BindQQ(context.Context, *BindQQReq) (*BindQQResp, error)
	UnbindQQ(context.Context, *UnbindQQReq) (*UnbindQQResp, error)
	QQStatus(context.Context, *QQStatusReq) (*QQStatusResp, error)
	mustEmbedUnimplementedWebServer()
}

// UnimplementedWebServer must be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (UnimplementedWebServer) AuthQQ(context.Context, *AuthQQReq) (*AuthQQResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthQQ not implemented")
}
func (UnimplementedWebServer) BindQQ(context.Context, *BindQQReq) (*BindQQResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindQQ not implemented")
}
func (UnimplementedWebServer) UnbindQQ(context.Context, *UnbindQQReq) (*UnbindQQResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindQQ not implemented")
}
func (UnimplementedWebServer) QQStatus(context.Context, *QQStatusReq) (*QQStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QQStatus not implemented")
}
func (UnimplementedWebServer) mustEmbedUnimplementedWebServer() {}

// UnsafeWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServer will
// result in compilation errors.
type UnsafeWebServer interface {
	mustEmbedUnimplementedWebServer()
}

func RegisterWebServer(s grpc.ServiceRegistrar, srv WebServer) {
	s.RegisterService(&Web_ServiceDesc, srv)
}

func _Web_AuthQQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthQQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).AuthQQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.qq.v1.Web/AuthQQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).AuthQQ(ctx, req.(*AuthQQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_BindQQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindQQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).BindQQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.qq.v1.Web/BindQQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).BindQQ(ctx, req.(*BindQQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_UnbindQQ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindQQReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).UnbindQQ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.qq.v1.Web/UnbindQQ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).UnbindQQ(ctx, req.(*UnbindQQReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Web_QQStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QQStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).QQStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.auth.qq.v1.Web/QQStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).QQStatus(ctx, req.(*QQStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Web_ServiceDesc is the grpc.ServiceDesc for Web service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.auth.qq.v1.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthQQ",
			Handler:    _Web_AuthQQ_Handler,
		},
		{
			MethodName: "BindQQ",
			Handler:    _Web_BindQQ_Handler,
		},
		{
			MethodName: "UnbindQQ",
			Handler:    _Web_UnbindQQ_Handler,
		},
		{
			MethodName: "QQStatus",
			Handler:    _Web_QQStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/auth/qq/api/grpc/v1/qq.proto",
}
