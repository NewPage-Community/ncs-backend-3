// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/user/money/dao/dao.go

// Package dao is a generated GoMock package.
package dao

import (
	model "backend/app/service/user/money/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDao) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDaoMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDao)(nil).Close))
}

// Get mocks base method.
func (m *MockDao) Get(uid int64) (*model.Money, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uid)
	ret0, _ := ret[0].(*model.Money)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDaoMockRecorder) Get(uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDao)(nil).Get), uid)
}

// GetRecords mocks base method.
func (m *MockDao) GetRecords(uid int64, days uint32) (*model.Records, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", uid, days)
	ret0, _ := ret[0].(*model.Records)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords.
func (mr *MockDaoMockRecorder) GetRecords(uid, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockDao)(nil).GetRecords), uid, days)
}

// Gift mocks base method.
func (m *MockDao) Gift(uid, target uint64, money uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gift", uid, target, money)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gift indicates an expected call of Gift.
func (mr *MockDaoMockRecorder) Gift(uid, target, money interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gift", reflect.TypeOf((*MockDao)(nil).Gift), uid, target, money)
}

// Give mocks base method.
func (m *MockDao) Give(uid int64, money uint32, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Give", uid, money, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// Give indicates an expected call of Give.
func (mr *MockDaoMockRecorder) Give(uid, money, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Give", reflect.TypeOf((*MockDao)(nil).Give), uid, money, reason)
}

// Healthy mocks base method.
func (m *MockDao) Healthy() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Healthy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Healthy indicates an expected call of Healthy.
func (mr *MockDaoMockRecorder) Healthy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Healthy", reflect.TypeOf((*MockDao)(nil).Healthy))
}

// Pay mocks base method.
func (m *MockDao) Pay(uid int64, price uint32, reason string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pay", uid, price, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pay indicates an expected call of Pay.
func (mr *MockDaoMockRecorder) Pay(uid, price, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pay", reflect.TypeOf((*MockDao)(nil).Pay), uid, price, reason)
}
