// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MoneyClient is the client API for Money service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MoneyClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	Pay(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PayResp, error)
	Give(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*GiveResp, error)
	Records(ctx context.Context, in *RecordsReq, opts ...grpc.CallOption) (*RecordsResp, error)
	Gift(ctx context.Context, in *GiftReq, opts ...grpc.CallOption) (*GiftResp, error)
}

type moneyClient struct {
	cc grpc.ClientConnInterface
}

func NewMoneyClient(cc grpc.ClientConnInterface) MoneyClient {
	return &moneyClient{cc}
}

func (c *moneyClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.money.v1.Money/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyClient) Pay(ctx context.Context, in *PayReq, opts ...grpc.CallOption) (*PayResp, error) {
	out := new(PayResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.money.v1.Money/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyClient) Give(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*GiveResp, error) {
	out := new(GiveResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.money.v1.Money/Give", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyClient) Records(ctx context.Context, in *RecordsReq, opts ...grpc.CallOption) (*RecordsResp, error) {
	out := new(RecordsResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.money.v1.Money/Records", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moneyClient) Gift(ctx context.Context, in *GiftReq, opts ...grpc.CallOption) (*GiftResp, error) {
	out := new(GiftResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.money.v1.Money/Gift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoneyServer is the server API for Money service.
// All implementations must embed UnimplementedMoneyServer
// for forward compatibility
type MoneyServer interface {
	Get(context.Context, *GetReq) (*GetResp, error)
	Pay(context.Context, *PayReq) (*PayResp, error)
	Give(context.Context, *GiveReq) (*GiveResp, error)
	Records(context.Context, *RecordsReq) (*RecordsResp, error)
	Gift(context.Context, *GiftReq) (*GiftResp, error)
	mustEmbedUnimplementedMoneyServer()
}

// UnimplementedMoneyServer must be embedded to have forward compatible implementations.
type UnimplementedMoneyServer struct {
}

func (UnimplementedMoneyServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMoneyServer) Pay(context.Context, *PayReq) (*PayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedMoneyServer) Give(context.Context, *GiveReq) (*GiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Give not implemented")
}
func (UnimplementedMoneyServer) Records(context.Context, *RecordsReq) (*RecordsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Records not implemented")
}
func (UnimplementedMoneyServer) Gift(context.Context, *GiftReq) (*GiftResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gift not implemented")
}
func (UnimplementedMoneyServer) mustEmbedUnimplementedMoneyServer() {}

// UnsafeMoneyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MoneyServer will
// result in compilation errors.
type UnsafeMoneyServer interface {
	mustEmbedUnimplementedMoneyServer()
}

func RegisterMoneyServer(s grpc.ServiceRegistrar, srv MoneyServer) {
	s.RegisterService(&Money_ServiceDesc, srv)
}

func _Money_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.money.v1.Money/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Money_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.money.v1.Money/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).Pay(ctx, req.(*PayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Money_Give_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).Give(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.money.v1.Money/Give",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).Give(ctx, req.(*GiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Money_Records_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).Records(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.money.v1.Money/Records",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).Records(ctx, req.(*RecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Money_Gift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoneyServer).Gift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.money.v1.Money/Gift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoneyServer).Gift(ctx, req.(*GiftReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Money_ServiceDesc is the grpc.ServiceDesc for Money service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Money_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.user.money.v1.Money",
	HandlerType: (*MoneyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Money_Get_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _Money_Pay_Handler,
		},
		{
			MethodName: "Give",
			Handler:    _Money_Give_Handler,
		},
		{
			MethodName: "Records",
			Handler:    _Money_Records_Handler,
		},
		{
			MethodName: "Gift",
			Handler:    _Money_Gift_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/user/money/api/grpc/v1/money.proto",
}
