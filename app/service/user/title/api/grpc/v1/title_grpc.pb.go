// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TitleClient is the client API for Title service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TitleClient interface {
	GetTitle(ctx context.Context, in *GetTitleReq, opts ...grpc.CallOption) (*GetTitleResp, error)
	SetTitle(ctx context.Context, in *SetTitleReq, opts ...grpc.CallOption) (*SetTitleResp, error)
}

type titleClient struct {
	cc grpc.ClientConnInterface
}

func NewTitleClient(cc grpc.ClientConnInterface) TitleClient {
	return &titleClient{cc}
}

func (c *titleClient) GetTitle(ctx context.Context, in *GetTitleReq, opts ...grpc.CallOption) (*GetTitleResp, error) {
	out := new(GetTitleResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.title.v1.Title/GetTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titleClient) SetTitle(ctx context.Context, in *SetTitleReq, opts ...grpc.CallOption) (*SetTitleResp, error) {
	out := new(SetTitleResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.title.v1.Title/SetTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TitleServer is the server API for Title service.
// All implementations must embed UnimplementedTitleServer
// for forward compatibility
type TitleServer interface {
	GetTitle(context.Context, *GetTitleReq) (*GetTitleResp, error)
	SetTitle(context.Context, *SetTitleReq) (*SetTitleResp, error)
	mustEmbedUnimplementedTitleServer()
}

// UnimplementedTitleServer must be embedded to have forward compatible implementations.
type UnimplementedTitleServer struct {
}

func (UnimplementedTitleServer) GetTitle(context.Context, *GetTitleReq) (*GetTitleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTitle not implemented")
}
func (UnimplementedTitleServer) SetTitle(context.Context, *SetTitleReq) (*SetTitleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTitle not implemented")
}
func (UnimplementedTitleServer) mustEmbedUnimplementedTitleServer() {}

// UnsafeTitleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitleServer will
// result in compilation errors.
type UnsafeTitleServer interface {
	mustEmbedUnimplementedTitleServer()
}

func RegisterTitleServer(s grpc.ServiceRegistrar, srv TitleServer) {
	s.RegisterService(&Title_ServiceDesc, srv)
}

func _Title_GetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServer).GetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.title.v1.Title/GetTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServer).GetTitle(ctx, req.(*GetTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Title_SetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTitleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitleServer).SetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.title.v1.Title/SetTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitleServer).SetTitle(ctx, req.(*SetTitleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Title_ServiceDesc is the grpc.ServiceDesc for Title service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Title_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.user.title.v1.Title",
	HandlerType: (*TitleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTitle",
			Handler:    _Title_GetTitle_Handler,
		},
		{
			MethodName: "SetTitle",
			Handler:    _Title_SetTitle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/user/title/api/grpc/v1/title.proto",
}
