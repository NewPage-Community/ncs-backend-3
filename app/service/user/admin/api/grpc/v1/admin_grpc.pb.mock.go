// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/user/admin/api/grpc/v1/admin_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAdminClient is a mock of AdminClient interface.
type MockAdminClient struct {
	ctrl     *gomock.Controller
	recorder *MockAdminClientMockRecorder
}

// MockAdminClientMockRecorder is the mock recorder for MockAdminClient.
type MockAdminClientMockRecorder struct {
	mock *MockAdminClient
}

// NewMockAdminClient creates a new mock instance.
func NewMockAdminClient(ctrl *gomock.Controller) *MockAdminClient {
	mock := &MockAdminClient{ctrl: ctrl}
	mock.recorder = &MockAdminClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminClient) EXPECT() *MockAdminClientMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockAdminClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockAdminClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAdminClient)(nil).Info), varargs...)
}

// MockAdminServer is a mock of AdminServer interface.
type MockAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServerMockRecorder
}

// MockAdminServerMockRecorder is the mock recorder for MockAdminServer.
type MockAdminServerMockRecorder struct {
	mock *MockAdminServer
}

// NewMockAdminServer creates a new mock instance.
func NewMockAdminServer(ctrl *gomock.Controller) *MockAdminServer {
	mock := &MockAdminServer{ctrl: ctrl}
	mock.recorder = &MockAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminServer) EXPECT() *MockAdminServerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockAdminServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockAdminServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAdminServer)(nil).Info), arg0, arg1)
}

// mustEmbedUnimplementedAdminServer mocks base method.
func (m *MockAdminServer) mustEmbedUnimplementedAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminServer")
}

// mustEmbedUnimplementedAdminServer indicates an expected call of mustEmbedUnimplementedAdminServer.
func (mr *MockAdminServerMockRecorder) mustEmbedUnimplementedAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminServer", reflect.TypeOf((*MockAdminServer)(nil).mustEmbedUnimplementedAdminServer))
}

// MockUnsafeAdminServer is a mock of UnsafeAdminServer interface.
type MockUnsafeAdminServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAdminServerMockRecorder
}

// MockUnsafeAdminServerMockRecorder is the mock recorder for MockUnsafeAdminServer.
type MockUnsafeAdminServerMockRecorder struct {
	mock *MockUnsafeAdminServer
}

// NewMockUnsafeAdminServer creates a new mock instance.
func NewMockUnsafeAdminServer(ctrl *gomock.Controller) *MockUnsafeAdminServer {
	mock := &MockUnsafeAdminServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAdminServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAdminServer) EXPECT() *MockUnsafeAdminServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAdminServer mocks base method.
func (m *MockUnsafeAdminServer) mustEmbedUnimplementedAdminServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAdminServer")
}

// mustEmbedUnimplementedAdminServer indicates an expected call of mustEmbedUnimplementedAdminServer.
func (mr *MockUnsafeAdminServerMockRecorder) mustEmbedUnimplementedAdminServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAdminServer", reflect.TypeOf((*MockUnsafeAdminServer)(nil).mustEmbedUnimplementedAdminServer))
}
