// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/user/vip/api/grpc/vip.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Info struct {
	Point                int32    `protobuf:"varint,1,opt,name=point,proto3" json:"point,omitempty"`
	Level                int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
	ExpireDate           int64    `protobuf:"varint,3,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}
func (*Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{0}
}
func (m *Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Info.Merge(m, src)
}
func (m *Info) XXX_Size() int {
	return m.Size()
}
func (m *Info) XXX_DiscardUnknown() {
	xxx_messageInfo_Info.DiscardUnknown(m)
}

var xxx_messageInfo_Info proto.InternalMessageInfo

func (m *Info) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func (m *Info) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Info) GetExpireDate() int64 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

type InfoReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{1}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

func (m *InfoReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type InfoResp struct {
	Info                 *Info    `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResp) Reset()         { *m = InfoResp{} }
func (m *InfoResp) String() string { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()    {}
func (*InfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{2}
}
func (m *InfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResp.Merge(m, src)
}
func (m *InfoResp) XXX_Size() int {
	return m.Size()
}
func (m *InfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResp proto.InternalMessageInfo

func (m *InfoResp) GetInfo() *Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type RenewalReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Length               int64    `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewalReq) Reset()         { *m = RenewalReq{} }
func (m *RenewalReq) String() string { return proto.CompactTextString(m) }
func (*RenewalReq) ProtoMessage()    {}
func (*RenewalReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{3}
}
func (m *RenewalReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewalReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewalReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewalReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewalReq.Merge(m, src)
}
func (m *RenewalReq) XXX_Size() int {
	return m.Size()
}
func (m *RenewalReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewalReq.DiscardUnknown(m)
}

var xxx_messageInfo_RenewalReq proto.InternalMessageInfo

func (m *RenewalReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *RenewalReq) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type RenewalResp struct {
	ExpireDate           int64    `protobuf:"varint,1,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RenewalResp) Reset()         { *m = RenewalResp{} }
func (m *RenewalResp) String() string { return proto.CompactTextString(m) }
func (*RenewalResp) ProtoMessage()    {}
func (*RenewalResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{4}
}
func (m *RenewalResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewalResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewalResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewalResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewalResp.Merge(m, src)
}
func (m *RenewalResp) XXX_Size() int {
	return m.Size()
}
func (m *RenewalResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewalResp.DiscardUnknown(m)
}

var xxx_messageInfo_RenewalResp proto.InternalMessageInfo

func (m *RenewalResp) GetExpireDate() int64 {
	if m != nil {
		return m.ExpireDate
	}
	return 0
}

type AddPointReq struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	AddPoint             int32    `protobuf:"varint,2,opt,name=add_point,json=addPoint,proto3" json:"add_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPointReq) Reset()         { *m = AddPointReq{} }
func (m *AddPointReq) String() string { return proto.CompactTextString(m) }
func (*AddPointReq) ProtoMessage()    {}
func (*AddPointReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{5}
}
func (m *AddPointReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPointReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPointReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPointReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPointReq.Merge(m, src)
}
func (m *AddPointReq) XXX_Size() int {
	return m.Size()
}
func (m *AddPointReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPointReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPointReq proto.InternalMessageInfo

func (m *AddPointReq) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *AddPointReq) GetAddPoint() int32 {
	if m != nil {
		return m.AddPoint
	}
	return 0
}

type AddPointResp struct {
	Point                int32    `protobuf:"varint,3,opt,name=point,proto3" json:"point,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPointResp) Reset()         { *m = AddPointResp{} }
func (m *AddPointResp) String() string { return proto.CompactTextString(m) }
func (*AddPointResp) ProtoMessage()    {}
func (*AddPointResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5961ecf57a17bca, []int{6}
}
func (m *AddPointResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPointResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPointResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPointResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPointResp.Merge(m, src)
}
func (m *AddPointResp) XXX_Size() int {
	return m.Size()
}
func (m *AddPointResp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPointResp.DiscardUnknown(m)
}

var xxx_messageInfo_AddPointResp proto.InternalMessageInfo

func (m *AddPointResp) GetPoint() int32 {
	if m != nil {
		return m.Point
	}
	return 0
}

func init() {
	proto.RegisterType((*Info)(nil), "ncs.user.vip.Info")
	proto.RegisterType((*InfoReq)(nil), "ncs.user.vip.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "ncs.user.vip.InfoResp")
	proto.RegisterType((*RenewalReq)(nil), "ncs.user.vip.RenewalReq")
	proto.RegisterType((*RenewalResp)(nil), "ncs.user.vip.RenewalResp")
	proto.RegisterType((*AddPointReq)(nil), "ncs.user.vip.AddPointReq")
	proto.RegisterType((*AddPointResp)(nil), "ncs.user.vip.AddPointResp")
}

func init() { proto.RegisterFile("app/user/vip/api/grpc/vip.proto", fileDescriptor_a5961ecf57a17bca) }

var fileDescriptor_a5961ecf57a17bca = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0x76, 0x9a, 0xee, 0x6e, 0x7d, 0x59, 0xd0, 0x1d, 0x34, 0xc6, 0xec, 0x9a, 0x5d, 0x46, 0x91,
	0xa5, 0x87, 0x04, 0x2a, 0x78, 0x28, 0x5e, 0x14, 0x2f, 0xbd, 0x48, 0x89, 0xe0, 0x41, 0x84, 0x32,
	0x76, 0xa6, 0x71, 0x20, 0xcc, 0x4c, 0x33, 0x69, 0x15, 0xc4, 0x8b, 0x7f, 0xc1, 0x8b, 0xe0, 0x1f,
	0xf2, 0x28, 0xf8, 0x07, 0xa4, 0xfa, 0x43, 0x24, 0x33, 0xd1, 0xd4, 0x9a, 0xde, 0xe6, 0xbd, 0xef,
	0xbd, 0x6f, 0xbe, 0xef, 0xe3, 0xc1, 0x39, 0xd5, 0x3a, 0x5d, 0x19, 0x5e, 0xa6, 0x6b, 0xa1, 0x53,
	0xaa, 0x45, 0x9a, 0x97, 0x7a, 0x5e, 0x17, 0x89, 0x2e, 0x55, 0xa5, 0xf0, 0xb1, 0x9c, 0x9b, 0xa4,
	0x1e, 0x48, 0xd6, 0x42, 0x47, 0x67, 0xb9, 0x52, 0x79, 0xc1, 0xed, 0x20, 0x95, 0x52, 0x55, 0xb4,
	0x12, 0x4a, 0x1a, 0x37, 0x4b, 0x9e, 0x43, 0x7f, 0x22, 0x17, 0x0a, 0xdf, 0x80, 0x03, 0xad, 0x84,
	0xac, 0x42, 0x74, 0x81, 0x2e, 0x0f, 0x32, 0x57, 0xd4, 0xdd, 0x82, 0xaf, 0x79, 0x11, 0xf6, 0x5c,
	0xd7, 0x16, 0xf8, 0x1c, 0x7c, 0xfe, 0x4e, 0x8b, 0x92, 0xcf, 0x18, 0xad, 0x78, 0xe8, 0x5d, 0xa0,
	0x4b, 0x2f, 0x03, 0xd7, 0x7a, 0x4a, 0x2b, 0x4e, 0x4e, 0xe1, 0xa8, 0x26, 0xcd, 0xf8, 0x12, 0x5f,
	0x07, 0x6f, 0x25, 0x98, 0x65, 0xf5, 0xb2, 0xfa, 0x49, 0x46, 0x30, 0x70, 0xa0, 0xd1, 0xf8, 0x3e,
	0xf4, 0x85, 0x5c, 0x28, 0x0b, 0xfb, 0x23, 0x9c, 0x6c, 0x0b, 0x4f, 0xec, 0x94, 0xc5, 0xc9, 0x43,
	0x80, 0x8c, 0x4b, 0xfe, 0x96, 0x16, 0x9d, 0x9c, 0x38, 0x80, 0xc3, 0x82, 0xcb, 0xbc, 0x7a, 0x63,
	0x85, 0x7a, 0x59, 0x53, 0x91, 0x04, 0xfc, 0xbf, 0x7b, 0x46, 0xef, 0x0a, 0x47, 0xff, 0x09, 0x7f,
	0x04, 0xfe, 0x63, 0xc6, 0xa6, 0xb5, 0xf7, 0xee, 0x8f, 0x4e, 0xe1, 0x2a, 0x65, 0x6c, 0xe6, 0xa2,
	0x72, 0xa1, 0x0c, 0x68, 0xb3, 0x41, 0xee, 0xc1, 0x71, 0xbb, 0x6d, 0x74, 0x9b, 0xa9, 0xb7, 0x95,
	0xe9, 0xe8, 0x4b, 0x0f, 0xbc, 0x17, 0x93, 0x29, 0x7e, 0xd6, 0x24, 0x7f, 0xb3, 0xc3, 0x35, 0x5f,
	0x46, 0x41, 0x57, 0xdb, 0x68, 0x72, 0xeb, 0xe3, 0xf7, 0x5f, 0x9f, 0x7a, 0x27, 0xf8, 0x5a, 0x7b,
	0x02, 0xef, 0x57, 0x82, 0x7d, 0xc0, 0xaf, 0xe0, 0xa8, 0xf1, 0x8a, 0xc3, 0x7f, 0x77, 0xdb, 0xe8,
	0xa2, 0xdb, 0x7b, 0x10, 0xa3, 0xc9, 0x99, 0x25, 0x0e, 0xc8, 0x49, 0x4b, 0x5c, 0x3a, 0x78, 0x8c,
	0x86, 0x78, 0x01, 0x83, 0x3f, 0xde, 0xf0, 0x0e, 0xc9, 0x56, 0x62, 0x51, 0xb4, 0x0f, 0x32, 0x9a,
	0xdc, 0xb5, 0x1f, 0xdc, 0x89, 0xc2, 0x1d, 0xe5, 0x29, 0x65, 0xcc, 0x46, 0x33, 0x46, 0xc3, 0x27,
	0xc1, 0xd7, 0x4d, 0x8c, 0xbe, 0x6d, 0x62, 0xf4, 0x63, 0x13, 0xa3, 0xcf, 0x3f, 0xe3, 0x2b, 0x2f,
	0xfb, 0xf5, 0x75, 0xbf, 0x3e, 0xb4, 0xe7, 0xfa, 0xe0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92,
	0x53, 0x66, 0x22, 0xfd, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// VIPClient is the client API for VIP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VIPClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	Renewal(ctx context.Context, in *RenewalReq, opts ...grpc.CallOption) (*RenewalResp, error)
	AddPoint(ctx context.Context, in *AddPointReq, opts ...grpc.CallOption) (*AddPointResp, error)
}

type vIPClient struct {
	cc *grpc.ClientConn
}

func NewVIPClient(cc *grpc.ClientConn) VIPClient {
	return &vIPClient{cc}
}

func (c *vIPClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.user.vip.VIP/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vIPClient) Renewal(ctx context.Context, in *RenewalReq, opts ...grpc.CallOption) (*RenewalResp, error) {
	out := new(RenewalResp)
	err := c.cc.Invoke(ctx, "/ncs.user.vip.VIP/Renewal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vIPClient) AddPoint(ctx context.Context, in *AddPointReq, opts ...grpc.CallOption) (*AddPointResp, error) {
	out := new(AddPointResp)
	err := c.cc.Invoke(ctx, "/ncs.user.vip.VIP/AddPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VIPServer is the server API for VIP service.
type VIPServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	Renewal(context.Context, *RenewalReq) (*RenewalResp, error)
	AddPoint(context.Context, *AddPointReq) (*AddPointResp, error)
}

// UnimplementedVIPServer can be embedded to have forward compatible implementations.
type UnimplementedVIPServer struct {
}

func (*UnimplementedVIPServer) Info(ctx context.Context, req *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedVIPServer) Renewal(ctx context.Context, req *RenewalReq) (*RenewalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renewal not implemented")
}
func (*UnimplementedVIPServer) AddPoint(ctx context.Context, req *AddPointReq) (*AddPointResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPoint not implemented")
}

func RegisterVIPServer(s *grpc.Server, srv VIPServer) {
	s.RegisterService(&_VIP_serviceDesc, srv)
}

func _VIP_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.user.vip.VIP/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VIP_Renewal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).Renewal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.user.vip.VIP/Renewal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).Renewal(ctx, req.(*RenewalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VIP_AddPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).AddPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.user.vip.VIP/AddPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).AddPoint(ctx, req.(*AddPointReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _VIP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.user.vip.VIP",
	HandlerType: (*VIPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _VIP_Info_Handler,
		},
		{
			MethodName: "Renewal",
			Handler:    _VIP_Renewal_Handler,
		},
		{
			MethodName: "AddPoint",
			Handler:    _VIP_AddPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/user/vip/api/grpc/vip.proto",
}

func (m *Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpireDate != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.ExpireDate))
		i--
		dAtA[i] = 0x18
	}
	if m.Level != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x10
	}
	if m.Point != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Uid != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Info != nil {
		{
			size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVip(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenewalReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewalReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewalReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Length != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RenewalResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewalResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewalResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExpireDate != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.ExpireDate))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPointReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPointReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPointReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AddPoint != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.AddPoint))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddPointResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPointResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPointResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Point != 0 {
		i = encodeVarintVip(dAtA, i, uint64(m.Point))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func encodeVarintVip(dAtA []byte, offset int, v uint64) int {
	offset -= sovVip(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != 0 {
		n += 1 + sovVip(uint64(m.Point))
	}
	if m.Level != 0 {
		n += 1 + sovVip(uint64(m.Level))
	}
	if m.ExpireDate != 0 {
		n += 1 + sovVip(uint64(m.ExpireDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovVip(uint64(m.Uid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovVip(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenewalReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovVip(uint64(m.Uid))
	}
	if m.Length != 0 {
		n += 1 + sovVip(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RenewalResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpireDate != 0 {
		n += 1 + sovVip(uint64(m.ExpireDate))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPointReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovVip(uint64(m.Uid))
	}
	if m.AddPoint != 0 {
		n += 1 + sovVip(uint64(m.AddPoint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddPointResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Point != 0 {
		n += 1 + sovVip(uint64(m.Point))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVip(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVip(x uint64) (n int) {
	return sovVip(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDate", wireType)
			}
			m.ExpireDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVip
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVip
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewalReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewalReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewalReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewalResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewalResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewalResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireDate", wireType)
			}
			m.ExpireDate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireDate |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPointReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPointReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPointReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddPoint", wireType)
			}
			m.AddPoint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddPoint |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPointResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVip
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPointResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPointResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			m.Point = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVip
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Point |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthVip
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVip(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVip
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVip
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVip
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVip
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVip
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVip        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVip          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVip = fmt.Errorf("proto: unexpected end of group")
)
