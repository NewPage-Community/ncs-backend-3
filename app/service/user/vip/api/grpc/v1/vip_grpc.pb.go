// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VIPClient is the client API for VIP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VIPClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	Renewal(ctx context.Context, in *RenewalReq, opts ...grpc.CallOption) (*RenewalResp, error)
	AddPoint(ctx context.Context, in *AddPointReq, opts ...grpc.CallOption) (*AddPointResp, error)
}

type vIPClient struct {
	cc grpc.ClientConnInterface
}

func NewVIPClient(cc grpc.ClientConnInterface) VIPClient {
	return &vIPClient{cc}
}

func (c *vIPClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.vip.v1.VIP/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vIPClient) Renewal(ctx context.Context, in *RenewalReq, opts ...grpc.CallOption) (*RenewalResp, error) {
	out := new(RenewalResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.vip.v1.VIP/Renewal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vIPClient) AddPoint(ctx context.Context, in *AddPointReq, opts ...grpc.CallOption) (*AddPointResp, error) {
	out := new(AddPointResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.vip.v1.VIP/AddPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VIPServer is the server API for VIP service.
// All implementations must embed UnimplementedVIPServer
// for forward compatibility
type VIPServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	Renewal(context.Context, *RenewalReq) (*RenewalResp, error)
	AddPoint(context.Context, *AddPointReq) (*AddPointResp, error)
	mustEmbedUnimplementedVIPServer()
}

// UnimplementedVIPServer must be embedded to have forward compatible implementations.
type UnimplementedVIPServer struct {
}

func (UnimplementedVIPServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedVIPServer) Renewal(context.Context, *RenewalReq) (*RenewalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Renewal not implemented")
}
func (UnimplementedVIPServer) AddPoint(context.Context, *AddPointReq) (*AddPointResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPoint not implemented")
}
func (UnimplementedVIPServer) mustEmbedUnimplementedVIPServer() {}

// UnsafeVIPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VIPServer will
// result in compilation errors.
type UnsafeVIPServer interface {
	mustEmbedUnimplementedVIPServer()
}

func RegisterVIPServer(s grpc.ServiceRegistrar, srv VIPServer) {
	s.RegisterService(&VIP_ServiceDesc, srv)
}

func _VIP_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.vip.v1.VIP/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VIP_Renewal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).Renewal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.vip.v1.VIP/Renewal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).Renewal(ctx, req.(*RenewalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VIP_AddPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPointReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VIPServer).AddPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.vip.v1.VIP/AddPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VIPServer).AddPoint(ctx, req.(*AddPointReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VIP_ServiceDesc is the grpc.ServiceDesc for VIP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VIP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.user.vip.v1.VIP",
	HandlerType: (*VIPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _VIP_Info_Handler,
		},
		{
			MethodName: "Renewal",
			Handler:    _VIP_Renewal_Handler,
		},
		{
			MethodName: "AddPoint",
			Handler:    _VIP_AddPoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/user/vip/api/grpc/v1/vip.proto",
}
