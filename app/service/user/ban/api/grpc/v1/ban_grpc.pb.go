// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BanClient is the client API for Ban service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BanClient interface {
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error)
	BanCheck(ctx context.Context, in *Info2Req, opts ...grpc.CallOption) (*InfoResp, error)
}

type banClient struct {
	cc grpc.ClientConnInterface
}

func NewBanClient(cc grpc.ClientConnInterface) BanClient {
	return &banClient{cc}
}

func (c *banClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.ban.v1.Ban/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	out := new(AddResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.ban.v1.Ban/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.ban.v1.Ban/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banClient) BanCheck(ctx context.Context, in *Info2Req, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.ban.v1.Ban/BanCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BanServer is the server API for Ban service.
// All implementations must embed UnimplementedBanServer
// for forward compatibility
type BanServer interface {
	Info(context.Context, *InfoReq) (*InfoResp, error)
	Add(context.Context, *AddReq) (*AddResp, error)
	Remove(context.Context, *RemoveReq) (*RemoveResp, error)
	BanCheck(context.Context, *Info2Req) (*InfoResp, error)
	mustEmbedUnimplementedBanServer()
}

// UnimplementedBanServer must be embedded to have forward compatible implementations.
type UnimplementedBanServer struct {
}

func (UnimplementedBanServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedBanServer) Add(context.Context, *AddReq) (*AddResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedBanServer) Remove(context.Context, *RemoveReq) (*RemoveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedBanServer) BanCheck(context.Context, *Info2Req) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanCheck not implemented")
}
func (UnimplementedBanServer) mustEmbedUnimplementedBanServer() {}

// UnsafeBanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BanServer will
// result in compilation errors.
type UnsafeBanServer interface {
	mustEmbedUnimplementedBanServer()
}

func RegisterBanServer(s grpc.ServiceRegistrar, srv BanServer) {
	s.RegisterService(&Ban_ServiceDesc, srv)
}

func _Ban_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.ban.v1.Ban/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ban_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.ban.v1.Ban/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanServer).Add(ctx, req.(*AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ban_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.ban.v1.Ban/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ban_BanCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Info2Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanServer).BanCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.ban.v1.Ban/BanCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanServer).BanCheck(ctx, req.(*Info2Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Ban_ServiceDesc is the grpc.ServiceDesc for Ban service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ban_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.user.ban.v1.Ban",
	HandlerType: (*BanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Ban_Info_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Ban_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _Ban_Remove_Handler,
		},
		{
			MethodName: "BanCheck",
			Handler:    _Ban_BanCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/user/ban/api/grpc/v1/ban.proto",
}
