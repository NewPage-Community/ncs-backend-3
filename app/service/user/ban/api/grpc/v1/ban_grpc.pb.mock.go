// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/user/ban/api/grpc/v1/ban_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockBanClient is a mock of BanClient interface.
type MockBanClient struct {
	ctrl     *gomock.Controller
	recorder *MockBanClientMockRecorder
}

// MockBanClientMockRecorder is the mock recorder for MockBanClient.
type MockBanClientMockRecorder struct {
	mock *MockBanClient
}

// NewMockBanClient creates a new mock instance.
func NewMockBanClient(ctrl *gomock.Controller) *MockBanClient {
	mock := &MockBanClient{ctrl: ctrl}
	mock.recorder = &MockBanClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanClient) EXPECT() *MockBanClientMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBanClient) Add(ctx context.Context, in *AddReq, opts ...grpc.CallOption) (*AddResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*AddResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockBanClientMockRecorder) Add(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBanClient)(nil).Add), varargs...)
}

// BanCheck mocks base method.
func (m *MockBanClient) BanCheck(ctx context.Context, in *Info2Req, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BanCheck", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BanCheck indicates an expected call of BanCheck.
func (mr *MockBanClientMockRecorder) BanCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanCheck", reflect.TypeOf((*MockBanClient)(nil).BanCheck), varargs...)
}

// Info mocks base method.
func (m *MockBanClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockBanClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBanClient)(nil).Info), varargs...)
}

// Remove mocks base method.
func (m *MockBanClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Remove", varargs...)
	ret0, _ := ret[0].(*RemoveResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockBanClientMockRecorder) Remove(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBanClient)(nil).Remove), varargs...)
}

// MockBanServer is a mock of BanServer interface.
type MockBanServer struct {
	ctrl     *gomock.Controller
	recorder *MockBanServerMockRecorder
}

// MockBanServerMockRecorder is the mock recorder for MockBanServer.
type MockBanServerMockRecorder struct {
	mock *MockBanServer
}

// NewMockBanServer creates a new mock instance.
func NewMockBanServer(ctrl *gomock.Controller) *MockBanServer {
	mock := &MockBanServer{ctrl: ctrl}
	mock.recorder = &MockBanServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanServer) EXPECT() *MockBanServerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBanServer) Add(arg0 context.Context, arg1 *AddReq) (*AddResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*AddResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockBanServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBanServer)(nil).Add), arg0, arg1)
}

// BanCheck mocks base method.
func (m *MockBanServer) BanCheck(arg0 context.Context, arg1 *Info2Req) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BanCheck", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BanCheck indicates an expected call of BanCheck.
func (mr *MockBanServerMockRecorder) BanCheck(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BanCheck", reflect.TypeOf((*MockBanServer)(nil).BanCheck), arg0, arg1)
}

// Info mocks base method.
func (m *MockBanServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockBanServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockBanServer)(nil).Info), arg0, arg1)
}

// Remove mocks base method.
func (m *MockBanServer) Remove(arg0 context.Context, arg1 *RemoveReq) (*RemoveResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(*RemoveResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockBanServerMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockBanServer)(nil).Remove), arg0, arg1)
}

// mustEmbedUnimplementedBanServer mocks base method.
func (m *MockBanServer) mustEmbedUnimplementedBanServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBanServer")
}

// mustEmbedUnimplementedBanServer indicates an expected call of mustEmbedUnimplementedBanServer.
func (mr *MockBanServerMockRecorder) mustEmbedUnimplementedBanServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBanServer", reflect.TypeOf((*MockBanServer)(nil).mustEmbedUnimplementedBanServer))
}

// MockUnsafeBanServer is a mock of UnsafeBanServer interface.
type MockUnsafeBanServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBanServerMockRecorder
}

// MockUnsafeBanServerMockRecorder is the mock recorder for MockUnsafeBanServer.
type MockUnsafeBanServerMockRecorder struct {
	mock *MockUnsafeBanServer
}

// NewMockUnsafeBanServer creates a new mock instance.
func NewMockUnsafeBanServer(ctrl *gomock.Controller) *MockUnsafeBanServer {
	mock := &MockUnsafeBanServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBanServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBanServer) EXPECT() *MockUnsafeBanServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBanServer mocks base method.
func (m *MockUnsafeBanServer) mustEmbedUnimplementedBanServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBanServer")
}

// mustEmbedUnimplementedBanServer indicates an expected call of mustEmbedUnimplementedBanServer.
func (mr *MockUnsafeBanServerMockRecorder) mustEmbedUnimplementedBanServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBanServer", reflect.TypeOf((*MockUnsafeBanServer)(nil).mustEmbedUnimplementedBanServer))
}

// MockWebClient is a mock of WebClient interface.
type MockWebClient struct {
	ctrl     *gomock.Controller
	recorder *MockWebClientMockRecorder
}

// MockWebClientMockRecorder is the mock recorder for MockWebClient.
type MockWebClientMockRecorder struct {
	mock *MockWebClient
}

// NewMockWebClient creates a new mock instance.
func NewMockWebClient(ctrl *gomock.Controller) *MockWebClient {
	mock := &MockWebClient{ctrl: ctrl}
	mock.recorder = &MockWebClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebClient) EXPECT() *MockWebClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockWebClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWebClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebClient)(nil).List), varargs...)
}

// MockWebServer is a mock of WebServer interface.
type MockWebServer struct {
	ctrl     *gomock.Controller
	recorder *MockWebServerMockRecorder
}

// MockWebServerMockRecorder is the mock recorder for MockWebServer.
type MockWebServerMockRecorder struct {
	mock *MockWebServer
}

// NewMockWebServer creates a new mock instance.
func NewMockWebServer(ctrl *gomock.Controller) *MockWebServer {
	mock := &MockWebServer{ctrl: ctrl}
	mock.recorder = &MockWebServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebServer) EXPECT() *MockWebServerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockWebServer) List(arg0 context.Context, arg1 *ListReq) (*ListResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*ListResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockWebServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockWebServer)(nil).List), arg0, arg1)
}

// mustEmbedUnimplementedWebServer mocks base method.
func (m *MockWebServer) mustEmbedUnimplementedWebServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWebServer")
}

// mustEmbedUnimplementedWebServer indicates an expected call of mustEmbedUnimplementedWebServer.
func (mr *MockWebServerMockRecorder) mustEmbedUnimplementedWebServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWebServer", reflect.TypeOf((*MockWebServer)(nil).mustEmbedUnimplementedWebServer))
}

// MockUnsafeWebServer is a mock of UnsafeWebServer interface.
type MockUnsafeWebServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeWebServerMockRecorder
}

// MockUnsafeWebServerMockRecorder is the mock recorder for MockUnsafeWebServer.
type MockUnsafeWebServerMockRecorder struct {
	mock *MockUnsafeWebServer
}

// NewMockUnsafeWebServer creates a new mock instance.
func NewMockUnsafeWebServer(ctrl *gomock.Controller) *MockUnsafeWebServer {
	mock := &MockUnsafeWebServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeWebServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeWebServer) EXPECT() *MockUnsafeWebServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedWebServer mocks base method.
func (m *MockUnsafeWebServer) mustEmbedUnimplementedWebServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedWebServer")
}

// mustEmbedUnimplementedWebServer indicates an expected call of mustEmbedUnimplementedWebServer.
func (mr *MockUnsafeWebServerMockRecorder) mustEmbedUnimplementedWebServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedWebServer", reflect.TypeOf((*MockUnsafeWebServer)(nil).mustEmbedUnimplementedWebServer))
}
