// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountPublicClient is the client API for AccountPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountPublicClient interface {
	UID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*UIDResp, error)
	Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
}

type accountPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountPublicClient(cc grpc.ClientConnInterface) AccountPublicClient {
	return &accountPublicClient{cc}
}

func (c *accountPublicClient) UID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*UIDResp, error) {
	out := new(UIDResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.account.v1.AccountPublic/UID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountPublicClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/ncs.service.user.account.v1.AccountPublic/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountPublicServer is the server API for AccountPublic service.
// All implementations must embed UnimplementedAccountPublicServer
// for forward compatibility
type AccountPublicServer interface {
	UID(context.Context, *UIDReq) (*UIDResp, error)
	Info(context.Context, *InfoReq) (*InfoResp, error)
	mustEmbedUnimplementedAccountPublicServer()
}

// UnimplementedAccountPublicServer must be embedded to have forward compatible implementations.
type UnimplementedAccountPublicServer struct {
}

func (UnimplementedAccountPublicServer) UID(context.Context, *UIDReq) (*UIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UID not implemented")
}
func (UnimplementedAccountPublicServer) Info(context.Context, *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedAccountPublicServer) mustEmbedUnimplementedAccountPublicServer() {}

// UnsafeAccountPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountPublicServer will
// result in compilation errors.
type UnsafeAccountPublicServer interface {
	mustEmbedUnimplementedAccountPublicServer()
}

func RegisterAccountPublicServer(s grpc.ServiceRegistrar, srv AccountPublicServer) {
	s.RegisterService(&AccountPublic_ServiceDesc, srv)
}

func _AccountPublic_UID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountPublicServer).UID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.account.v1.AccountPublic/UID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountPublicServer).UID(ctx, req.(*UIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountPublic_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountPublicServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.user.account.v1.AccountPublic/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountPublicServer).Info(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountPublic_ServiceDesc is the grpc.ServiceDesc for AccountPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.user.account.v1.AccountPublic",
	HandlerType: (*AccountPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UID",
			Handler:    _AccountPublic_UID_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _AccountPublic_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/user/account/api/grpc/v1/public.proto",
}
