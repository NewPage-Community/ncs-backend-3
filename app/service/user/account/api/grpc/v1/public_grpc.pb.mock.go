// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/user/account/api/grpc/v1/public_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAccountPublicClient is a mock of AccountPublicClient interface.
type MockAccountPublicClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPublicClientMockRecorder
}

// MockAccountPublicClientMockRecorder is the mock recorder for MockAccountPublicClient.
type MockAccountPublicClientMockRecorder struct {
	mock *MockAccountPublicClient
}

// NewMockAccountPublicClient creates a new mock instance.
func NewMockAccountPublicClient(ctrl *gomock.Controller) *MockAccountPublicClient {
	mock := &MockAccountPublicClient{ctrl: ctrl}
	mock.recorder = &MockAccountPublicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPublicClient) EXPECT() *MockAccountPublicClientMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockAccountPublicClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockAccountPublicClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAccountPublicClient)(nil).Info), varargs...)
}

// UID mocks base method.
func (m *MockAccountPublicClient) UID(ctx context.Context, in *UIDReq, opts ...grpc.CallOption) (*UIDResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UID", varargs...)
	ret0, _ := ret[0].(*UIDResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UID indicates an expected call of UID.
func (mr *MockAccountPublicClientMockRecorder) UID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UID", reflect.TypeOf((*MockAccountPublicClient)(nil).UID), varargs...)
}

// MockAccountPublicServer is a mock of AccountPublicServer interface.
type MockAccountPublicServer struct {
	ctrl     *gomock.Controller
	recorder *MockAccountPublicServerMockRecorder
}

// MockAccountPublicServerMockRecorder is the mock recorder for MockAccountPublicServer.
type MockAccountPublicServerMockRecorder struct {
	mock *MockAccountPublicServer
}

// NewMockAccountPublicServer creates a new mock instance.
func NewMockAccountPublicServer(ctrl *gomock.Controller) *MockAccountPublicServer {
	mock := &MockAccountPublicServer{ctrl: ctrl}
	mock.recorder = &MockAccountPublicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountPublicServer) EXPECT() *MockAccountPublicServerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockAccountPublicServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockAccountPublicServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockAccountPublicServer)(nil).Info), arg0, arg1)
}

// UID mocks base method.
func (m *MockAccountPublicServer) UID(arg0 context.Context, arg1 *UIDReq) (*UIDResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UID", arg0, arg1)
	ret0, _ := ret[0].(*UIDResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UID indicates an expected call of UID.
func (mr *MockAccountPublicServerMockRecorder) UID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UID", reflect.TypeOf((*MockAccountPublicServer)(nil).UID), arg0, arg1)
}

// mustEmbedUnimplementedAccountPublicServer mocks base method.
func (m *MockAccountPublicServer) mustEmbedUnimplementedAccountPublicServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountPublicServer")
}

// mustEmbedUnimplementedAccountPublicServer indicates an expected call of mustEmbedUnimplementedAccountPublicServer.
func (mr *MockAccountPublicServerMockRecorder) mustEmbedUnimplementedAccountPublicServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountPublicServer", reflect.TypeOf((*MockAccountPublicServer)(nil).mustEmbedUnimplementedAccountPublicServer))
}

// MockUnsafeAccountPublicServer is a mock of UnsafeAccountPublicServer interface.
type MockUnsafeAccountPublicServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAccountPublicServerMockRecorder
}

// MockUnsafeAccountPublicServerMockRecorder is the mock recorder for MockUnsafeAccountPublicServer.
type MockUnsafeAccountPublicServerMockRecorder struct {
	mock *MockUnsafeAccountPublicServer
}

// NewMockUnsafeAccountPublicServer creates a new mock instance.
func NewMockUnsafeAccountPublicServer(ctrl *gomock.Controller) *MockUnsafeAccountPublicServer {
	mock := &MockUnsafeAccountPublicServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAccountPublicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAccountPublicServer) EXPECT() *MockUnsafeAccountPublicServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAccountPublicServer mocks base method.
func (m *MockUnsafeAccountPublicServer) mustEmbedUnimplementedAccountPublicServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAccountPublicServer")
}

// mustEmbedUnimplementedAccountPublicServer indicates an expected call of mustEmbedUnimplementedAccountPublicServer.
func (mr *MockUnsafeAccountPublicServerMockRecorder) mustEmbedUnimplementedAccountPublicServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAccountPublicServer", reflect.TypeOf((*MockUnsafeAccountPublicServer)(nil).mustEmbedUnimplementedAccountPublicServer))
}
