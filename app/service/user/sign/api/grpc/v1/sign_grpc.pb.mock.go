// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/user/sign/api/grpc/v1/sign_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSignClient is a mock of SignClient interface.
type MockSignClient struct {
	ctrl     *gomock.Controller
	recorder *MockSignClientMockRecorder
}

// MockSignClientMockRecorder is the mock recorder for MockSignClient.
type MockSignClientMockRecorder struct {
	mock *MockSignClient
}

// NewMockSignClient creates a new mock instance.
func NewMockSignClient(ctrl *gomock.Controller) *MockSignClient {
	mock := &MockSignClient{ctrl: ctrl}
	mock.recorder = &MockSignClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignClient) EXPECT() *MockSignClientMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockSignClient) Info(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Info", varargs...)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockSignClientMockRecorder) Info(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSignClient)(nil).Info), varargs...)
}

// Sign mocks base method.
func (m *MockSignClient) Sign(ctx context.Context, in *SignReq, opts ...grpc.CallOption) (*SignResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Sign", varargs...)
	ret0, _ := ret[0].(*SignResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignClientMockRecorder) Sign(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignClient)(nil).Sign), varargs...)
}

// MockSignServer is a mock of SignServer interface.
type MockSignServer struct {
	ctrl     *gomock.Controller
	recorder *MockSignServerMockRecorder
}

// MockSignServerMockRecorder is the mock recorder for MockSignServer.
type MockSignServerMockRecorder struct {
	mock *MockSignServer
}

// NewMockSignServer creates a new mock instance.
func NewMockSignServer(ctrl *gomock.Controller) *MockSignServer {
	mock := &MockSignServer{ctrl: ctrl}
	mock.recorder = &MockSignServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignServer) EXPECT() *MockSignServerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockSignServer) Info(arg0 context.Context, arg1 *InfoReq) (*InfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", arg0, arg1)
	ret0, _ := ret[0].(*InfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockSignServerMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockSignServer)(nil).Info), arg0, arg1)
}

// Sign mocks base method.
func (m *MockSignServer) Sign(arg0 context.Context, arg1 *SignReq) (*SignResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1)
	ret0, _ := ret[0].(*SignResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockSignServerMockRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockSignServer)(nil).Sign), arg0, arg1)
}

// mustEmbedUnimplementedSignServer mocks base method.
func (m *MockSignServer) mustEmbedUnimplementedSignServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSignServer")
}

// mustEmbedUnimplementedSignServer indicates an expected call of mustEmbedUnimplementedSignServer.
func (mr *MockSignServerMockRecorder) mustEmbedUnimplementedSignServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSignServer", reflect.TypeOf((*MockSignServer)(nil).mustEmbedUnimplementedSignServer))
}

// MockUnsafeSignServer is a mock of UnsafeSignServer interface.
type MockUnsafeSignServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSignServerMockRecorder
}

// MockUnsafeSignServerMockRecorder is the mock recorder for MockUnsafeSignServer.
type MockUnsafeSignServerMockRecorder struct {
	mock *MockUnsafeSignServer
}

// NewMockUnsafeSignServer creates a new mock instance.
func NewMockUnsafeSignServer(ctrl *gomock.Controller) *MockUnsafeSignServer {
	mock := &MockUnsafeSignServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSignServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSignServer) EXPECT() *MockUnsafeSignServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSignServer mocks base method.
func (m *MockUnsafeSignServer) mustEmbedUnimplementedSignServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSignServer")
}

// mustEmbedUnimplementedSignServer indicates an expected call of mustEmbedUnimplementedSignServer.
func (mr *MockUnsafeSignServerMockRecorder) mustEmbedUnimplementedSignServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSignServer", reflect.TypeOf((*MockUnsafeSignServer)(nil).mustEmbedUnimplementedSignServer))
}
