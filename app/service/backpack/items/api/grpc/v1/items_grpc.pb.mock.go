// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/backpack/items/api/grpc/v1/items_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockItemsClient is a mock of ItemsClient interface.
type MockItemsClient struct {
	ctrl     *gomock.Controller
	recorder *MockItemsClientMockRecorder
}

// MockItemsClientMockRecorder is the mock recorder for MockItemsClient.
type MockItemsClientMockRecorder struct {
	mock *MockItemsClient
}

// NewMockItemsClient creates a new mock instance.
func NewMockItemsClient(ctrl *gomock.Controller) *MockItemsClient {
	mock := &MockItemsClient{ctrl: ctrl}
	mock.recorder = &MockItemsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsClient) EXPECT() *MockItemsClientMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockItemsClient) GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItems", varargs...)
	ret0, _ := ret[0].(*GetItemsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemsClientMockRecorder) GetItems(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemsClient)(nil).GetItems), varargs...)
}

// MockItemsServer is a mock of ItemsServer interface.
type MockItemsServer struct {
	ctrl     *gomock.Controller
	recorder *MockItemsServerMockRecorder
}

// MockItemsServerMockRecorder is the mock recorder for MockItemsServer.
type MockItemsServerMockRecorder struct {
	mock *MockItemsServer
}

// NewMockItemsServer creates a new mock instance.
func NewMockItemsServer(ctrl *gomock.Controller) *MockItemsServer {
	mock := &MockItemsServer{ctrl: ctrl}
	mock.recorder = &MockItemsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsServer) EXPECT() *MockItemsServerMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockItemsServer) GetItems(arg0 context.Context, arg1 *GetItemsReq) (*GetItemsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", arg0, arg1)
	ret0, _ := ret[0].(*GetItemsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockItemsServerMockRecorder) GetItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockItemsServer)(nil).GetItems), arg0, arg1)
}

// mustEmbedUnimplementedItemsServer mocks base method.
func (m *MockItemsServer) mustEmbedUnimplementedItemsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedItemsServer")
}

// mustEmbedUnimplementedItemsServer indicates an expected call of mustEmbedUnimplementedItemsServer.
func (mr *MockItemsServerMockRecorder) mustEmbedUnimplementedItemsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedItemsServer", reflect.TypeOf((*MockItemsServer)(nil).mustEmbedUnimplementedItemsServer))
}

// MockUnsafeItemsServer is a mock of UnsafeItemsServer interface.
type MockUnsafeItemsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeItemsServerMockRecorder
}

// MockUnsafeItemsServerMockRecorder is the mock recorder for MockUnsafeItemsServer.
type MockUnsafeItemsServerMockRecorder struct {
	mock *MockUnsafeItemsServer
}

// NewMockUnsafeItemsServer creates a new mock instance.
func NewMockUnsafeItemsServer(ctrl *gomock.Controller) *MockUnsafeItemsServer {
	mock := &MockUnsafeItemsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeItemsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeItemsServer) EXPECT() *MockUnsafeItemsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedItemsServer mocks base method.
func (m *MockUnsafeItemsServer) mustEmbedUnimplementedItemsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedItemsServer")
}

// mustEmbedUnimplementedItemsServer indicates an expected call of mustEmbedUnimplementedItemsServer.
func (mr *MockUnsafeItemsServerMockRecorder) mustEmbedUnimplementedItemsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedItemsServer", reflect.TypeOf((*MockUnsafeItemsServer)(nil).mustEmbedUnimplementedItemsServer))
}
