// Code generated by MockGen. DO NOT EDIT.
// Source: app/service/backpack/user/api/grpc/v1/public_grpc.pb.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockUserPublicClient is a mock of UserPublicClient interface.
type MockUserPublicClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserPublicClientMockRecorder
}

// MockUserPublicClientMockRecorder is the mock recorder for MockUserPublicClient.
type MockUserPublicClientMockRecorder struct {
	mock *MockUserPublicClient
}

// NewMockUserPublicClient creates a new mock instance.
func NewMockUserPublicClient(ctrl *gomock.Controller) *MockUserPublicClient {
	mock := &MockUserPublicClient{ctrl: ctrl}
	mock.recorder = &MockUserPublicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPublicClient) EXPECT() *MockUserPublicClientMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockUserPublicClient) GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItems", varargs...)
	ret0, _ := ret[0].(*GetItemsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockUserPublicClientMockRecorder) GetItems(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockUserPublicClient)(nil).GetItems), varargs...)
}

// MockUserPublicServer is a mock of UserPublicServer interface.
type MockUserPublicServer struct {
	ctrl     *gomock.Controller
	recorder *MockUserPublicServerMockRecorder
}

// MockUserPublicServerMockRecorder is the mock recorder for MockUserPublicServer.
type MockUserPublicServerMockRecorder struct {
	mock *MockUserPublicServer
}

// NewMockUserPublicServer creates a new mock instance.
func NewMockUserPublicServer(ctrl *gomock.Controller) *MockUserPublicServer {
	mock := &MockUserPublicServer{ctrl: ctrl}
	mock.recorder = &MockUserPublicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserPublicServer) EXPECT() *MockUserPublicServerMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockUserPublicServer) GetItems(arg0 context.Context, arg1 *GetItemsReq) (*GetItemsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", arg0, arg1)
	ret0, _ := ret[0].(*GetItemsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockUserPublicServerMockRecorder) GetItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockUserPublicServer)(nil).GetItems), arg0, arg1)
}

// mustEmbedUnimplementedUserPublicServer mocks base method.
func (m *MockUserPublicServer) mustEmbedUnimplementedUserPublicServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserPublicServer")
}

// mustEmbedUnimplementedUserPublicServer indicates an expected call of mustEmbedUnimplementedUserPublicServer.
func (mr *MockUserPublicServerMockRecorder) mustEmbedUnimplementedUserPublicServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserPublicServer", reflect.TypeOf((*MockUserPublicServer)(nil).mustEmbedUnimplementedUserPublicServer))
}

// MockUnsafeUserPublicServer is a mock of UnsafeUserPublicServer interface.
type MockUnsafeUserPublicServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeUserPublicServerMockRecorder
}

// MockUnsafeUserPublicServerMockRecorder is the mock recorder for MockUnsafeUserPublicServer.
type MockUnsafeUserPublicServerMockRecorder struct {
	mock *MockUnsafeUserPublicServer
}

// NewMockUnsafeUserPublicServer creates a new mock instance.
func NewMockUnsafeUserPublicServer(ctrl *gomock.Controller) *MockUnsafeUserPublicServer {
	mock := &MockUnsafeUserPublicServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeUserPublicServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeUserPublicServer) EXPECT() *MockUnsafeUserPublicServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedUserPublicServer mocks base method.
func (m *MockUnsafeUserPublicServer) mustEmbedUnimplementedUserPublicServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedUserPublicServer")
}

// mustEmbedUnimplementedUserPublicServer indicates an expected call of mustEmbedUnimplementedUserPublicServer.
func (mr *MockUnsafeUserPublicServerMockRecorder) mustEmbedUnimplementedUserPublicServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedUserPublicServer", reflect.TypeOf((*MockUnsafeUserPublicServer)(nil).mustEmbedUnimplementedUserPublicServer))
}
