// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error)
	GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error)
	AddItems(ctx context.Context, in *AddItemsReq, opts ...grpc.CallOption) (*AddItemsResp, error)
	RemoveItem(ctx context.Context, in *RemoveItemReq, opts ...grpc.CallOption) (*RemoveItemResp, error)
	HaveItem(ctx context.Context, in *HaveItemReq, opts ...grpc.CallOption) (*HaveItemResp, error)
	AddAllItems(ctx context.Context, in *AddAllItemsReq, opts ...grpc.CallOption) (*AddAllItemsResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) Init(ctx context.Context, in *InitReq, opts ...grpc.CallOption) (*InitResp, error) {
	out := new(InitResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.User/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error) {
	out := new(GetItemsResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.User/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddItems(ctx context.Context, in *AddItemsReq, opts ...grpc.CallOption) (*AddItemsResp, error) {
	out := new(AddItemsResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.User/AddItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RemoveItem(ctx context.Context, in *RemoveItemReq, opts ...grpc.CallOption) (*RemoveItemResp, error) {
	out := new(RemoveItemResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.User/RemoveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) HaveItem(ctx context.Context, in *HaveItemReq, opts ...grpc.CallOption) (*HaveItemResp, error) {
	out := new(HaveItemResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.User/HaveItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddAllItems(ctx context.Context, in *AddAllItemsReq, opts ...grpc.CallOption) (*AddAllItemsResp, error) {
	out := new(AddAllItemsResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.User/AddAllItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	Init(context.Context, *InitReq) (*InitResp, error)
	GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error)
	AddItems(context.Context, *AddItemsReq) (*AddItemsResp, error)
	RemoveItem(context.Context, *RemoveItemReq) (*RemoveItemResp, error)
	HaveItem(context.Context, *HaveItemReq) (*HaveItemResp, error)
	AddAllItems(context.Context, *AddAllItemsReq) (*AddAllItemsResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) Init(context.Context, *InitReq) (*InitResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedUserServer) GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedUserServer) AddItems(context.Context, *AddItemsReq) (*AddItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItems not implemented")
}
func (UnimplementedUserServer) RemoveItem(context.Context, *RemoveItemReq) (*RemoveItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveItem not implemented")
}
func (UnimplementedUserServer) HaveItem(context.Context, *HaveItemReq) (*HaveItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HaveItem not implemented")
}
func (UnimplementedUserServer) AddAllItems(context.Context, *AddAllItemsReq) (*AddAllItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAllItems not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.User/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Init(ctx, req.(*InitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.User/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetItems(ctx, req.(*GetItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.User/AddItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddItems(ctx, req.(*AddItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RemoveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RemoveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.User/RemoveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RemoveItem(ctx, req.(*RemoveItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_HaveItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HaveItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).HaveItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.User/HaveItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).HaveItem(ctx, req.(*HaveItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddAllItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAllItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddAllItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.User/AddAllItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddAllItems(ctx, req.(*AddAllItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.backpack.user.v1.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _User_Init_Handler,
		},
		{
			MethodName: "GetItems",
			Handler:    _User_GetItems_Handler,
		},
		{
			MethodName: "AddItems",
			Handler:    _User_AddItems_Handler,
		},
		{
			MethodName: "RemoveItem",
			Handler:    _User_RemoveItem_Handler,
		},
		{
			MethodName: "HaveItem",
			Handler:    _User_HaveItem_Handler,
		},
		{
			MethodName: "AddAllItems",
			Handler:    _User_AddAllItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/backpack/user/api/grpc/v1/user.proto",
}

// WebClient is the client API for Web service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebClient interface {
	GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error)
}

type webClient struct {
	cc grpc.ClientConnInterface
}

func NewWebClient(cc grpc.ClientConnInterface) WebClient {
	return &webClient{cc}
}

func (c *webClient) GetItems(ctx context.Context, in *GetItemsReq, opts ...grpc.CallOption) (*GetItemsResp, error) {
	out := new(GetItemsResp)
	err := c.cc.Invoke(ctx, "/ncs.service.backpack.user.v1.Web/GetItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebServer is the server API for Web service.
// All implementations must embed UnimplementedWebServer
// for forward compatibility
type WebServer interface {
	GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error)
	mustEmbedUnimplementedWebServer()
}

// UnimplementedWebServer must be embedded to have forward compatible implementations.
type UnimplementedWebServer struct {
}

func (UnimplementedWebServer) GetItems(context.Context, *GetItemsReq) (*GetItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItems not implemented")
}
func (UnimplementedWebServer) mustEmbedUnimplementedWebServer() {}

// UnsafeWebServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebServer will
// result in compilation errors.
type UnsafeWebServer interface {
	mustEmbedUnimplementedWebServer()
}

func RegisterWebServer(s grpc.ServiceRegistrar, srv WebServer) {
	s.RegisterService(&Web_ServiceDesc, srv)
}

func _Web_GetItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebServer).GetItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ncs.service.backpack.user.v1.Web/GetItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebServer).GetItems(ctx, req.(*GetItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Web_ServiceDesc is the grpc.ServiceDesc for Web service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Web_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncs.service.backpack.user.v1.Web",
	HandlerType: (*WebServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetItems",
			Handler:    _Web_GetItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app/service/backpack/user/api/grpc/v1/user.proto",
}
